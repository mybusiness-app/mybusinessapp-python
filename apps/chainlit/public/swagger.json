{
    "swagger": "2.0",
    "info": {
        "description": "The MyPetParlor tenant service exposes an API with simple CRUD operations for managing a tenant's isolated resources.",
        "title": "MyPetParlor Tenant Service API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://mybusinessapp.co.za/support",
            "email": "support@mybusinessapp.co.za"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:5084",
    "basePath": "/",
    "paths": {
        "/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the authorization resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Get all authorization resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/authorization.Authorization"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single authorization resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Create single authorization resource",
                "parameters": [
                    {
                        "description": "JSON body to create a authorization resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authorization.CreateAuthorization"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/accounts": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the accounts from the tenant's Xero integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Xero"
                ],
                "summary": "Get all the accounts from tenant",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/xero.XeroAccount"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/accounts/recover-email": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Send a recover email link",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Send a recover email link",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/accounts/{uid}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Delete single account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the account's user",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/application-stamps": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the application stamp resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ApplicationStamp"
                ],
                "summary": "Get all application stamp resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/application_stamp.ApplicationStamp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single application stamp resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ApplicationStamp"
                ],
                "summary": "Create single application stamp resource",
                "parameters": [
                    {
                        "description": "JSON body to create a application stamp resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/application_stamp.CreateApplicationStamp"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/application-stamps/{idAndType}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single application stamp resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ApplicationStamp"
                ],
                "summary": "Get single application stamp resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the application stamp resource",
                        "name": "idAndType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/application_stamp.ApplicationStamp"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single application stamp",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ApplicationStamp"
                ],
                "summary": "Delete single application stamp",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the application stamp",
                        "name": "idAndType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/application-stamps/{idAndType}/properties": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single application stamp's properties",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ApplicationStamp"
                ],
                "summary": "Update single application stamp's properties",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the application stamp",
                        "name": "idAndType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update an application stamp's properties",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/application_stamp.UpdateApplicationStampProperties"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/application-stamps/{idAndType}/properties/disable-eft": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Disable EFT configuration for a single application stamp",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ApplicationStamp"
                ],
                "summary": "Disable EFT for single application stamp",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the application stamp",
                        "name": "idAndType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/application-stamps/{idAndType}/properties/disable-pay-parlor": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Disable pay parlor configuration for a single application stamp",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ApplicationStamp"
                ],
                "summary": "Disable pay parlor for single application stamp",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the application stamp",
                        "name": "idAndType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/application-stamps/{idAndType}/properties/xero": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single application stamp's xero configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ApplicationStamp"
                ],
                "summary": "Update single application stamp's xero configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the application stamp",
                        "name": "idAndType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a application stamp",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/util.UpdateXeroConfiguration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/applications": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the application resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Application"
                ],
                "summary": "Get all application resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/application.Application"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single application resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Application"
                ],
                "summary": "Create single application resource",
                "parameters": [
                    {
                        "description": "JSON body to create a application resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/application.CreateApplication"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/applications/{idAndType}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single application resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Application"
                ],
                "summary": "Get single application resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the application resource",
                        "name": "idAndType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/application.Application"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single application",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Application"
                ],
                "summary": "Delete single application",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the application",
                        "name": "idAndType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single application",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Application"
                ],
                "summary": "Update single application",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the application",
                        "name": "idAndType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a application",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/application.UpdateApplication"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/authorization/charge": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Charge an authorization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Paystack"
                ],
                "summary": "Charge authorization",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/paystack.ChargedAuthorization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/azure-resource-groups": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the azure resource group resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AzureResourceGroup"
                ],
                "summary": "Get all azure resource group resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/azure_resource_group.AzureResourceGroup"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single azure resource group resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AzureResourceGroup"
                ],
                "summary": "Create single azure resource group resource",
                "parameters": [
                    {
                        "description": "JSON body to create a azure resource group resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/azure_resource_group.CreateAzureResourceGroup"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/azure-resource-groups/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single azure resource group resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AzureResourceGroup"
                ],
                "summary": "Get single azure resource group resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the azure resource group resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/azure_resource_group.AzureResourceGroup"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single Google project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AzureResourceGroup"
                ],
                "summary": "Delete single Google project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the Google project",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single azure resource group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AzureResourceGroup"
                ],
                "summary": "Update single azure resource group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the azure resource group",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a azure resource group",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/azure_resource_group.UpdateAzureResourceGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/billing/accounts": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the account resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Get all account resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/billing.Account"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single account resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Create single account resource",
                "parameters": [
                    {
                        "description": "JSON body to create an account resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/billing.CreateAccount"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/billing.Account"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/billing/accounts/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single account resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Get single account resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the account resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/billing.Account"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Delete single account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Update single account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a account",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/billing.UpdateAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/billing/accounts/{id}/notes": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the account note resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Get all account note resources",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and of the account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/billing.AccountNote"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single account note resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Create single account note resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and of the account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to create a account note resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/billing.CreateAccountNote"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/billing.AccountNote"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/billing/accounts/{id}/notes/{noteId}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single account note resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Get single account note resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and of the account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID and of the account's note",
                        "name": "noteId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/billing.AccountNote"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single account note",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Delete single account note",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and of the account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID and of the account's note",
                        "name": "noteId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single account note",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Update single account note",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and of the account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID and of the account's note",
                        "name": "noteId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update an account note",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/billing.UpdateAccountNote"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/billing/accounts/{id}/shipping-addresses": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the account shipping address resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Get all account shipping address resources",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/billing.AccountShippingAddress"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single account shipping address resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Create single account shipping address resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to create an account shipping address resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/billing.CreateAccountShippingAddress"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/billing.AccountShippingAddress"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/billing/accounts/{id}/shipping-addresses/{addressId}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single account shipping address resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Get single account shipping address resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the account shipping address resource",
                        "name": "addressId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/billing.AccountShippingAddress"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single account shipping address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Delete single account shipping address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the account shipping address",
                        "name": "addressId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single account shipping address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Update single account shipping address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the account shipping address",
                        "name": "addressId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a account shipping address",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/billing.UpdateAccountShippingAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/billing/accounts/{id}/subscriptions": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the account subscription resources for a given account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Get all account subscription resources",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/billing.AccountSubscription"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/billing/subscriptions": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the subscription resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Get all subscription resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/billing.AccountSubscription"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single subscription resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Create single subscription resource",
                "parameters": [
                    {
                        "description": "JSON body to create an subscription resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/billing.CreateAccountSubscription"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/billing.AccountSubscription"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/billing/subscriptions/{subscriptionId}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single subscription resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Get single subscription resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the subscription resource",
                        "name": "subscriptionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/billing.AccountSubscription"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Delete single subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the subscription",
                        "name": "subscriptionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BillingAccount"
                ],
                "summary": "Update single subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the subscription",
                        "name": "subscriptionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a subscription",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/billing.UpdateAccountSubscription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/bookings": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the booking resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Get all booking resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/booking.Booking"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single booking resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Create single booking resource",
                "parameters": [
                    {
                        "description": "JSON body to create a booking resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/booking.CreateBooking"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete many bookings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Delete many bookings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/bookings/metadata": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the booking resources metadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Get all booking resources metadata",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/bookings/recurring": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create many booking resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Create many booking resources",
                "parameters": [
                    {
                        "description": "JSON body to create a booking resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/booking.CreateBooking"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/bookings/reports": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the bookings' report data points",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Get all bookings' report data points",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/booking.BookingsReportDataPoint"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/bookings/search": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Search all the booking resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Search all booking resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/booking.Booking"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/bookings/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single booking resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Get single booking resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the booking resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/booking.Booking"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single booking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Delete single booking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the booking",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/bookings/{id}/change-voucher": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Change a booking's voucher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Change booking voucher",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the booking",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to change a booking's voucher",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/booking.RescheduleBooking"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/bookings/{id}/messages": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Add a new message to booking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Add booking message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the booking",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to change a booking's voucher",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/booking.RescheduleBooking"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "CREATED",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/bookings/{id}/messages/{messageId}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Change an existing message of booking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Change booking message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the booking",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to change a booking's voucher",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/booking.RescheduleBooking"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/bookings/{id}/move": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Move a single booking resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Move a single booking resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Booking ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to move a booking resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/booking.MoveBooking"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/bookings/{id}/orders": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update booking for a pet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Update booking order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the booking",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to change a booking's voucher",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/booking.UpdateBookingOrders"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/bookings/{id}/reschedule": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Reschedule a single booking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Reschedule single booking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the booking",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to reschedule a booking",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/booking.RescheduleBooking"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/breeds": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the breed resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Breed"
                ],
                "summary": "Get all breed resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/breed.Breed"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single breed resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Breed"
                ],
                "summary": "Create single breed resource",
                "parameters": [
                    {
                        "description": "JSON body to create a breed resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/breed.CreateBreed"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/breeds/uniquename/{uniqueName}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single breed resource by its unique name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Breed"
                ],
                "summary": "Get single breed resource by its unique name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique name of the breed resource",
                        "name": "uniqueName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/breed.Breed"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/breeds/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single breed resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Breed"
                ],
                "summary": "Get single breed resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the breed resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/breed.Breed"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single breed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Breed"
                ],
                "summary": "Delete single breed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the breed",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single breed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Breed"
                ],
                "summary": "Update single breed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the breed",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a breed",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/breed.UpdateBreed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/claims/uid/{uid}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single claim resource by its user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Claim"
                ],
                "summary": "Get single claim resource by its user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID of the claim resource",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/claim.Claim"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/configs/firebase": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the breed resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FirebaseConfig"
                ],
                "summary": "Get all breed resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/config.FirebaseConfig"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single breed resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FirebaseConfig"
                ],
                "summary": "Create single breed resource",
                "parameters": [
                    {
                        "description": "JSON body to create a breed resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/config.CreateFirebaseConfig"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/configs/firebase/projects/{projectId}/{appType}/{appId}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single breed resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FirebaseConfig"
                ],
                "summary": "Get single breed resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the breed resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/config.FirebaseConfig"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/configs/live": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a live test configuration for the tenant's Paystack integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Breed"
                ],
                "summary": "Get live configuration for Paystack",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a live configuration for the tenant's Xero integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Xero"
                ],
                "summary": "Create live configuration",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a live test configuration for the tenant's Paystack integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Breed"
                ],
                "summary": "Update live configuration for Paystack",
                "parameters": [
                    {
                        "description": "JSON payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/paystack.UpdatePaystackConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/configs/test": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a test test configuration for the tenant's Paystack integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Breed"
                ],
                "summary": "Get test configuration for Paystack",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new test configuration for the tenant's Paystack integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Breed"
                ],
                "summary": "Create test configuration for Paystack",
                "parameters": [
                    {
                        "description": "JSON payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/paystack.CreatePaystackConfig"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a test test configuration for the tenant's Paystack integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Breed"
                ],
                "summary": "Update test configuration for Paystack",
                "parameters": [
                    {
                        "description": "JSON payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/paystack.UpdatePaystackConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/connections": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the connections authorized for the tenant's Xero integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Xero"
                ],
                "summary": "Get all the connections authorized for tenant",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/xero.XeroConnection"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/consenturl": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Build a consent url to start the client's auth flow",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Xero"
                ],
                "summary": "Build a consent url",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/contacts": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the contacts from the tenant's Xero integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Xero"
                ],
                "summary": "Get all the contacts from tenant",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/xero.XeroContact"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single contact the tenant's Xero integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Xero"
                ],
                "summary": "Create a single contact for tenant",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/xero.XeroContact"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/crm/close/leads": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a lead in Close CRM",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Close CRM"
                ],
                "summary": "Create a lead",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/crm/close/opportunities": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create an opportunity in Close CRM",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Close CRM"
                ],
                "summary": "Create an opportunity",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/custom-field-schemas/{reference_type}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single custom field resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomFieldSchema"
                ],
                "summary": "Get single custom field resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reference type of the custom field resource",
                        "name": "reference_type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.CustomFieldSchema"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single custom field schema",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomField"
                ],
                "summary": "Update single custom field",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reference type of the custom field schema",
                        "name": "reference_type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a custom field schema",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UpdateCustomField"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/custom-field-values": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the custom field value resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomFieldValue"
                ],
                "summary": "Get all custom field value resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.CustomFieldValue"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single custom field value resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomFieldValue"
                ],
                "summary": "Create single custom field value resource",
                "parameters": [
                    {
                        "description": "JSON body to create a custom field value resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.CreateCustomFieldValue"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.CustomFieldValue"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/custom-field-values/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single custom field value resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomFieldValue"
                ],
                "summary": "Get single custom field value resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the custom field value resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.CustomFieldValue"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single custom field value",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomFieldValue"
                ],
                "summary": "Delete single custom field value",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the custom field value",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single custom field value",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomFieldValue"
                ],
                "summary": "Update single custom field value",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the custom field value",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a custom field value",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UpdateCustomFieldValue"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.CustomFieldValue"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/custom-fields": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the custom field resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomField"
                ],
                "summary": "Get all custom field resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.CustomField"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single custom field resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomField"
                ],
                "summary": "Create single custom field resource",
                "parameters": [
                    {
                        "description": "JSON body to create a custom field resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.CreateCustomField"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.CustomField"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/custom-fields/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single custom field resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomField"
                ],
                "summary": "Get single custom field resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the custom field resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.CustomField"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single custom field",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomField"
                ],
                "summary": "Delete single custom field",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the custom field",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single custom field",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomField"
                ],
                "summary": "Update single custom field",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the custom field",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a custom field",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UpdateCustomField"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.CustomField"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/custom-object-types": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the custom object type resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomObjectType"
                ],
                "summary": "Get all custom object type resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/custom_object_type.CustomObjectType"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single custom object type resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomObjectType"
                ],
                "summary": "Create single custom object type resource",
                "parameters": [
                    {
                        "description": "JSON body to create a custom object type resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/custom_object_type.CreateCustomObjectType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/custom-object-types/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single custom object type resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomObjectType"
                ],
                "summary": "Get single custom object type resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the custom object type resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/custom_object_type.CustomObjectType"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single custom object type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomObjectType"
                ],
                "summary": "Delete single custom object type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the custom object type",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single custom object type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CustomObjectType"
                ],
                "summary": "Update single custom object type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the custom object type",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a custom object type",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/custom_object_type.UpdateCustomObjectType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the customer resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Get all customer resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/customer.Customer"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single customer resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Create single customer resource",
                "parameters": [
                    {
                        "description": "JSON body to create a customer resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customer.CreateCustomer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/customers/uid/{uid}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single customer resource by its unique name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Get single customer resource by its unique name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique name of the customer resource",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/customer.Customer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/customers/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single customer resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Get single customer resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the customer resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/customer.Customer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Delete single customer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the customer",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Update single customer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the customer",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a customer",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customer.UpdateCustomer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/customers/{id}/associations/teams/{teamId}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Add a single customer's association with a team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Add single customer's association with a team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the customer",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the team",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Remove a single customer's association with a team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Remove single customer's association with a team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the customer",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the team",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/customers/{id}/unlink-xero-contact": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Unlink a single customer's xero contact",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Unlink single customer's xero contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the customer",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/dates": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the day schedule resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DateSchedule"
                ],
                "summary": "Get all day schedule resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/schedule.DateSchedule"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single day schedule resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DateSchedule"
                ],
                "summary": "Create single day schedule resource",
                "parameters": [
                    {
                        "description": "JSON body to create a day schedule resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schedule.CreateDateSchedule"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/dates/date/{date}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single date schedule resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DateSchedule"
                ],
                "summary": "Get single date schedule resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Date of the date schedule resource",
                        "name": "date",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schedule.DateSchedule"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/dates/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single day schedule resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DateSchedule"
                ],
                "summary": "Get single day schedule resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the day schedule resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schedule.DateSchedule"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single day schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DateSchedule"
                ],
                "summary": "Delete single day schedule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the day schedule",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single day schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DateSchedule"
                ],
                "summary": "Update single day schedule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the day schedule",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a day schedule",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schedule.UpdateDateSchedule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/days": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the day schedule resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaySchedule"
                ],
                "summary": "Get all day schedule resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/schedule.DaySchedule"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single day schedule resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaySchedule"
                ],
                "summary": "Create single day schedule resource",
                "parameters": [
                    {
                        "description": "JSON body to create a day schedule resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schedule.CreateDaySchedule"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/days/day/{day}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single day schedule resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaySchedule"
                ],
                "summary": "Get single day schedule resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Day of the day schedule resource",
                        "name": "day",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schedule.DaySchedule"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/days/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single day schedule resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaySchedule"
                ],
                "summary": "Get single day schedule resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the day schedule resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schedule.DaySchedule"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single day schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaySchedule"
                ],
                "summary": "Delete single day schedule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the day schedule",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single day schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaySchedule"
                ],
                "summary": "Update single day schedule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the day schedule",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a day schedule",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schedule.UpdateDaySchedule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/documents": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the document resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Get all document resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/document.Document"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single document resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Create single document resource",
                "parameters": [
                    {
                        "description": "JSON body to create a document resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/document.CreateDocument"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/documents/generate/refund-policy": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Generate a refund policy content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Generate refund policy content",
                "parameters": [
                    {
                        "description": "JSON body to generate a refund policy content",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/document.GenerateRefundPolicyContent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/documents/generate/terms": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Generate a terms content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Generate terms content",
                "parameters": [
                    {
                        "description": "JSON body to generate a terms content",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/document.GenerateTermsContent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/documents/reference/{referenceType}/{referenceId}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single document resource by reference",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Get single document resource by reference",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reference type of the document resource",
                        "name": "referenceType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Reference ID of the document resource",
                        "name": "referenceId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/document.Document"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/documents/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single document resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Get single document resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the document resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/document.Document"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single document",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Delete single document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the document",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single document",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Update single document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the document",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a document",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/document.UpdateDocument"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/employees": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the employee resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Get all employee resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/employee.Employee"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "403": {
                        "description": "Error: Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single employee resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Create single employee resource",
                "parameters": [
                    {
                        "description": "JSON body to create a employee resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/employee.CreateEmployee"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "403": {
                        "description": "Error: Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/employees/uid/{uid}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single employee resource by its unique name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Get single employee resource by its unique name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique name of the employee resource",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/employee.Employee"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "403": {
                        "description": "Error: Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/employees/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single employee resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Get single employee resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the employee resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/employee.Employee"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "403": {
                        "description": "Error: Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single employee",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Delete single employee",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the employee",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "403": {
                        "description": "Error: Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single employee",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Update single employee",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the employee",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a employee",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/employee.UpdateEmployee"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/employee.Employee"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "403": {
                        "description": "Error: Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/employees/{id}/roles": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Set roles for a single employee",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Set roles for employee",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the employee",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update an employee role(s)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.UpdateEmployeeRoles"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/employee.Employee"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "403": {
                        "description": "Error: Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/employees/{id}/teams": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Set teams for a single employee",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Set teams for employee",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the employee",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update an employee team(s)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/employee.UpdateEmployeeTeams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/employee.Employee"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "403": {
                        "description": "Error: Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/events": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single event for many booking resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Create a single event for many booking resources",
                "parameters": [
                    {
                        "description": "JSON body to create an event for many booking resources",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/booking.CreateBookingEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/exporter/bookings": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Export all booking rows filtered by team IDs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exporter"
                ],
                "summary": "Export all booking rows",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/exporter.BookingRow"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/exporter/customers": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Export all customer rows filtered by team IDs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exporter"
                ],
                "summary": "Export all customer rows",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/exporter.CustomerRow"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/google-identity-platforms": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the breed resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IdentityPlatform"
                ],
                "summary": "Get all breed resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/google_identity_platform.IdentityPlatformConfig"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/google-identity-platforms/initialize": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Initialize a single identity platform tenant resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IdentityPlatform"
                ],
                "summary": "Initialize single identity platform tenant resource",
                "parameters": [
                    {
                        "description": "JSON body to initialize a identity platform resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/google_identity_platform.InitializeIdentityPlatform"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/google-identity-platforms/projects/{id}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single Google project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IdentityPlatform"
                ],
                "summary": "Delete single Google project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the Google project",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/google-identity-platforms/projects/{id}/config": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single breed resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IdentityPlatform"
                ],
                "summary": "Get single breed resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the breed resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/google_identity_platform.IdentityPlatformConfig"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single breed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IdentityPlatform"
                ],
                "summary": "Update single breed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the breed",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a breed",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/google_identity_platform.UpdateIdentityPlatform"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/google-identity-platforms/projects/{id}/tenants": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single identity platform tenant resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IdentityPlatform"
                ],
                "summary": "Create single identity platform tenant resource",
                "parameters": [
                    {
                        "description": "JSON body to create a identity platform tenant resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/google_identity_platform.CreateIdentityPlatformTenant"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/google-identity-platforms/projects/{id}/tenants/{tenantId}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single breed resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IdentityPlatform"
                ],
                "summary": "Get single breed resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the identity platform project resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the identity platform tenant resource",
                        "name": "tenantId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/google_identity_platform.IdentityPlatformTenantOperation"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single identity platform tenant resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IdentityPlatform"
                ],
                "summary": "Update single identity platform tenant resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the identity platform project resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the identity platform tenant resource",
                        "name": "tenantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a identity platform tenant",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/google_identity_platform.UpdateIdentityPlatformTenant"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/google-projects": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the breed resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Project"
                ],
                "summary": "Get all breed resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/google_cloud_project.Project"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single breed resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Project"
                ],
                "summary": "Create single breed resource",
                "parameters": [
                    {
                        "description": "JSON body to create a breed resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/google_cloud_project.CreateProject"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/google-projects/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single breed resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Project"
                ],
                "summary": "Get single breed resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the breed resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/google_cloud_project.Project"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single Google project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Project"
                ],
                "summary": "Delete single Google project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the Google project",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single breed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Project"
                ],
                "summary": "Update single breed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the breed",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a breed",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/google_cloud_project.UpdateProject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/guides": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the guide resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guide"
                ],
                "summary": "Get all guide resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/guide.Guide"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single guide resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guide"
                ],
                "summary": "Create single guide resource",
                "parameters": [
                    {
                        "description": "JSON body to create a guide resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/guide.CreateGuide"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/guides/{idAndType}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single guide resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guide"
                ],
                "summary": "Get single guide resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the guide resource",
                        "name": "idAndType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/guide.Guide"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single guide",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guide"
                ],
                "summary": "Delete single guide",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the guide",
                        "name": "idAndType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single guide",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guide"
                ],
                "summary": "Update single guide",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the guide",
                        "name": "idAndType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a guide",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/guide.UpdateGuide"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/invoices": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the invoices from the tenant's Xero integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Xero"
                ],
                "summary": "Get all the invoices from tenant",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/xero.XeroInvoice"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single invoice the tenant's Xero integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Xero"
                ],
                "summary": "Create a single invoice for tenant",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/xero.XeroInvoice"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/invoices/recurring": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a recurring invoice the tenant's Xero integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Xero"
                ],
                "summary": "Create a recurring invoice for tenant",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/xero.XeroInvoice"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/invoices/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single invoice the tenant's Xero integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Xero"
                ],
                "summary": "Get a single invoice for tenant",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/xero.XeroInvoice"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single invoice the tenant's Xero integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Xero"
                ],
                "summary": "Delete a single invoice for tenant",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single invoice the tenant's Xero integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Xero"
                ],
                "summary": "Update a single invoice for tenant",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/xero.XeroInvoice"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/jobs": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the job resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Get all job resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.Job"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create single job",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "importer"
                ],
                "summary": "Create single job",
                "responses": {
                    "201": {
                        "description": "CREATED",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/importer.CreateJobMetadata"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete many jobs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Delete many jobs",
                "parameters": [
                    {
                        "description": "IDs of the jobs to delete",
                        "name": "ids",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/jobs/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single job resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Get single job resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the job resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/importer.Job"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Approve a job to import data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "importer"
                ],
                "summary": "Approve a job to import data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single job",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Update single job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the job",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a job",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UpdateJob"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/jobs/{id}/approve": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Approve a job to import data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "importer"
                ],
                "summary": "Approve a job to import data",
                "responses": {
                    "201": {
                        "description": "CREATED",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/importer.ApproveJobMetadata"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/jobs/{id}/events": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the event resources by job",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Importer"
                ],
                "summary": "Get all job event resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/importer.JobEvent"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/jobs/{id}/events/row-number/{rowNum}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update single job's event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "importer"
                ],
                "summary": "Update single job's event",
                "parameters": [
                    {
                        "description": "JSON body to update a job event resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/importer.UpdateJobEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/importer.JobEvent"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/mails/invites/customer/{customerID}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Invite an customer via email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mail"
                ],
                "summary": "Invite an customer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the mail's user",
                        "name": "customerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/mails/invites/customer/{employeeID}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Invite an employee via email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mail"
                ],
                "summary": "Invite an employee",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the mail's user",
                        "name": "employeeID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/measured-units": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the measured unit resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MeasuredUnit"
                ],
                "summary": "Get all measured unit resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/measured_unit.MeasuredUnit"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single measured unit resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MeasuredUnit"
                ],
                "summary": "Create single measured unit resource",
                "parameters": [
                    {
                        "description": "JSON body to create a measured unit resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/measured_unit.CreateMeasuredUnit"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/measured-units/name/{name}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single measured unit resource by its unique name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MeasuredUnit"
                ],
                "summary": "Get single measured unit resource by its unique name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique name of the measured unit resource",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/measured_unit.MeasuredUnit"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/measured-units/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single measured unit resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MeasuredUnit"
                ],
                "summary": "Get single measured unit resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the measured unit resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/measured_unit.MeasuredUnit"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single measured unit",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MeasuredUnit"
                ],
                "summary": "Delete single measured unit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the measured unit",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single measured unit",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MeasuredUnit"
                ],
                "summary": "Update single measured unit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the measured unit",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a measured unit",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/measured_unit.UpdateMeasuredUnit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/messages": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the message resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "Get all message resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/message.Message"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single message resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "Create single message resource",
                "parameters": [
                    {
                        "description": "JSON body to create a message resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/message.CreateMessage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/messages/event/{event}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single message resource by its unique name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "Get single message resource by its unique name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique name of the message resource",
                        "name": "event",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/message.Message"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/messages/preview": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single message resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "Create single message resource",
                "parameters": [
                    {
                        "description": "JSON body to create a message resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/message.CreateMessage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/messages/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single message resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "Get single message resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the message resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/message.Message"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "Delete single message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the message",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "Update single message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the message",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a message",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/message.UpdateMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/notifications/customer/{customerID}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Notify an customer via email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mail"
                ],
                "summary": "Notify an customer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the mail's user",
                        "name": "customerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/notifications/customer/{employeeID}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Notify an employee via email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mail"
                ],
                "summary": "Notify an employee",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the mail's user",
                        "name": "employeeID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/payments": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single payment the tenant's Xero integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Xero"
                ],
                "summary": "Create a single payment for tenant",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/xero.XeroPayment"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/permissions": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Reset all permissions to defaults",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permission"
                ],
                "summary": "Reset all permissions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/permission.AllPermissions"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a permission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permission"
                ],
                "summary": "Create permission",
                "parameters": [
                    {
                        "description": "JSON payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/permission.CreatePermission"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/permission.AllPermissions"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/permissions/{id}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a permission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permission"
                ],
                "summary": "Create permission",
                "parameters": [
                    {
                        "description": "JSON payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/permission.UpdatePermission"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/permission.AllPermissions"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a permission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permission"
                ],
                "summary": "Delete permission",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/permission.AllPermissions"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/pets": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the pet resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pet"
                ],
                "summary": "Get all pet resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/pet.Pet"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single pet resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pet"
                ],
                "summary": "Create single pet resource",
                "parameters": [
                    {
                        "description": "JSON body to create a pet resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pet.CreatePet"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/pets/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single pet resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pet"
                ],
                "summary": "Get single pet resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the pet resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/pet.Pet"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single pet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pet"
                ],
                "summary": "Delete single pet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the pet",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/plan-add-ons": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the plan add-on resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlanAddOn"
                ],
                "summary": "Get all plan add-on resources",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and of the plan",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/plan.PlanAddOn"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/plans": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the plan resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "Get all plan resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/plan.Plan"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single plan resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "Create single plan resource",
                "parameters": [
                    {
                        "description": "JSON body to create a plan resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/plan.CreatePlan"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/plan.Plan"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/plans/{idAndType}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single plan resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "Get single plan resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the plan resource",
                        "name": "idAndType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/plan.Plan"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single plan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "Delete single plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the plan",
                        "name": "idAndType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single plan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "Update single plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the plan",
                        "name": "idAndType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a plan",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/plan.UpdatePlan"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/plans/{id}/add-ons": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single plan add-on resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlanAddOn"
                ],
                "summary": "Create single plan add-on resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and of the plan",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to create a plan add-on resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/plan.CreatePlanAddOn"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/plan.PlanAddOn"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/plans/{id}/add-ons/{addOnId}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single plan add-on resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlanAddOn"
                ],
                "summary": "Get single plan add-on resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and of the plan",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID and of the plan's add on",
                        "name": "addOnId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/plan.PlanAddOn"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single plan add-on",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlanAddOn"
                ],
                "summary": "Delete single plan add-on",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and of the plan",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID and of the plan's add on",
                        "name": "addOnId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single plan add-on",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlanAddOn"
                ],
                "summary": "Update single plan add-on",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and of the plan",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID and of the plan's add on",
                        "name": "addOnId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a plan add-on",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/plan.UpdatePlanAddOn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/profiles": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the profile resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get all profile resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/profile.Profile"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single profile resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Create single profile resource",
                "parameters": [
                    {
                        "description": "JSON body to create a profile resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/profile.CreateProfile"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/profiles/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single profile resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get single profile resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the profile resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/profile.Profile"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Delete single profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the profile",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Update single profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the profile",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a profile",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/profile.UpdateProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/search": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Search all the customer resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Search all customer resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/customer.Customer"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/services": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the service resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service"
                ],
                "summary": "Get all service resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {}
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single service resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service"
                ],
                "summary": "Create single service resource",
                "parameters": [
                    {
                        "description": "JSON body to create a service resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateServiceDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/services/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single service resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service"
                ],
                "summary": "Get single service resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the service resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/service.ServiceDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service"
                ],
                "summary": "Delete single service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the service",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service"
                ],
                "summary": "Update single service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the service",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a service",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateServiceDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/service.ServiceDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/stamps": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the stamp resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stamp"
                ],
                "summary": "Get all stamp resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/stamp.Stamp"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single stamp resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stamp"
                ],
                "summary": "Create single stamp resource",
                "parameters": [
                    {
                        "description": "JSON body to create a stamp resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/stamp.CreateStamp"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/stamps/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single stamp resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stamp"
                ],
                "summary": "Get single stamp resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the stamp resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/stamp.Stamp"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single stamp",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stamp"
                ],
                "summary": "Delete single stamp",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the stamp",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single stamp",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stamp"
                ],
                "summary": "Update single stamp",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the stamp",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a stamp",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/stamp.UpdateStamp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/statistics": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the service resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service"
                ],
                "summary": "Get all service resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/statistics/${dateId}/timeslots/bookings/${bookingId}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete multiple time slots for a booking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Statistic"
                ],
                "summary": "Delete multiple time slots for a booking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the time slot",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/statistics/timeslots": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single time slot in stats",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Statistic"
                ],
                "summary": "Create a single time slot in stats",
                "parameters": [
                    {
                        "description": "JSON body to create a time slot in stats",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/statistic.CreateStatisticTimeSlot"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/statistics/timeslots/bookings/{bookingId}/pets/{petId}": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single time slot in stats",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Statistic"
                ],
                "summary": "Update a single time slot in stats",
                "parameters": [
                    {
                        "description": "JSON body to create a time slot in stats",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/statistic.UpdateStatisticTimeSlot"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/statistics/{dateId}/timeslots/{timeSlotId}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete (or delete) a single time slot in stats",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Statistic"
                ],
                "summary": "Delete a single time slot in stats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the time slot",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/statistics/{id}/increment-total-bookings/{intakeTimeID}": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single stats",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Statistic"
                ],
                "summary": "Delete single stats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the stats",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to decrement total bookings",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/statistic.DecrementTotalBookingsDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/teams": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the team resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Get all team resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/team.Team"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single team resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Create single team resource",
                "parameters": [
                    {
                        "description": "JSON body to create a team resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/team.CreateTeam"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/teams/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single team resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Get single team resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the team resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/team.Team"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Delete single team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the team",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Update single team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the team",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a team",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/team.UpdateTeam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tenants": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the tenant resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenant"
                ],
                "summary": "Get all tenant resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/tenant.Tenant"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single tenant resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenant"
                ],
                "summary": "Create single tenant resource",
                "parameters": [
                    {
                        "description": "JSON body to create a tenant resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tenant.CreateTenant"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tenants/azureresourcegroups": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the tenant resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TenantsAzureResourceGroup"
                ],
                "summary": "Get all tenant resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/tenant_azure_resource_group.TenantsAzureResourceGroup"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single tenant resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TenantsAzureResourceGroup"
                ],
                "summary": "Create single tenant resource",
                "parameters": [
                    {
                        "description": "JSON body to create a tenant resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tenant_azure_resource_group.CreateTenantsAzureResourceGroup"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tenants/azureresourcegroups/resourceid/{resourceID}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single tenant resource by its unique name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TenantsAzureResourceGroup"
                ],
                "summary": "Get single tenant resource by its unique name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique name of the tenant resource",
                        "name": "resourceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tenant_azure_resource_group.TenantsAzureResourceGroup"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tenants/azureresourcegroups/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single tenant resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TenantsAzureResourceGroup"
                ],
                "summary": "Get single tenant resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the tenant resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tenant_azure_resource_group.TenantsAzureResourceGroup"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TenantsAzureResourceGroup"
                ],
                "summary": "Delete single tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the tenant",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TenantsAzureResourceGroup"
                ],
                "summary": "Update single tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the tenant",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a tenant",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tenant_azure_resource_group.UpdateTenantsAzureResourceGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tenants/googlecloudprojects": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the tenant resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TenantsGoogleCloudProject"
                ],
                "summary": "Get all tenant resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/tenant_google_cloud_project.TenantsGoogleCloudProject"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single tenant resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TenantsGoogleCloudProject"
                ],
                "summary": "Create single tenant resource",
                "parameters": [
                    {
                        "description": "JSON body to create a tenant resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tenant_google_cloud_project.CreateTenantsGoogleCloudProject"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tenants/googlecloudprojects/resourceid/{resourceID}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single tenant resource by its unique name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TenantsGoogleCloudProject"
                ],
                "summary": "Get single tenant resource by its unique name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique name of the tenant resource",
                        "name": "resourceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tenant_google_cloud_project.TenantsGoogleCloudProject"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tenants/googlecloudprojects/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single tenant resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TenantsGoogleCloudProject"
                ],
                "summary": "Get single tenant resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the tenant resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tenant_google_cloud_project.TenantsGoogleCloudProject"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TenantsGoogleCloudProject"
                ],
                "summary": "Delete single tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the tenant",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TenantsGoogleCloudProject"
                ],
                "summary": "Update single tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the tenant",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a tenant",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tenant_google_cloud_project.UpdateTenantsGoogleCloudProject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tenants/uniquename/{tenantID}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single tenant resource by its unique name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenant"
                ],
                "summary": "Get single tenant resource by its unique name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique name of the tenant resource",
                        "name": "tenantID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tenant.Tenant"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tenants/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single tenant resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenant"
                ],
                "summary": "Get single tenant resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the tenant resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tenant.Tenant"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenant"
                ],
                "summary": "Delete single tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the tenant",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenant"
                ],
                "summary": "Update single tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the tenant",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a tenant",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tenant.UpdateTenant"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tenants/{id}/disable-eft": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Disable EFT configuration for a single tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenant"
                ],
                "summary": "Disable EFT for single tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the tenant",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tenants/{id}/disable-pay-parlor": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Disable pay parlor configuration for a single tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenant"
                ],
                "summary": "Disable pay parlor for single tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the tenant",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tenants/{id}/link-azure-resource-group": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Link Azure resource group to a single tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenant"
                ],
                "summary": "Link Azure resource group to single tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the tenant",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tenants/{id}/link-google-cloud-project": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Link Google Cloud project to a single tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenant"
                ],
                "summary": "Link Google Cloud project to single tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the tenant",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tenants/{id}/xero-config": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single tenant's xero configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenant"
                ],
                "summary": "Update single tenant's xero configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the tenant",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a tenant",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tenant.UpdateXeroConfiguration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tokens": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the token resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token"
                ],
                "summary": "Get all token resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/token.Token"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single token resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token"
                ],
                "summary": "Create single token resource",
                "parameters": [
                    {
                        "description": "JSON body to create a token resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/token.CreateToken"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tokens/uid/{uid}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single token resource by its unique name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token"
                ],
                "summary": "Get single token resource by its unique name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique name of the token resource",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/token.Token"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tokens/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single token resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token"
                ],
                "summary": "Get single token resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the token resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/token.Token"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token"
                ],
                "summary": "Delete single token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the token",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token"
                ],
                "summary": "Update single token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the token",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a token",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/token.UpdateToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/tokens/{id}/remove-registration-token": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Remove a registration token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token"
                ],
                "summary": "Remove registration token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the token",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a token",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/token.RemoveRegistrationToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/transaction/initialize": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Initialize a new transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Paystack"
                ],
                "summary": "Initialize transaction",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/paystack.NewTransaction"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/transaction/verify": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Verify a transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Paystack"
                ],
                "summary": "Verify transaction",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/paystack.VerifiedTransaction"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/transports": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the transport resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transport"
                ],
                "summary": "Get all transport resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/transport.Transport"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single transport resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transport"
                ],
                "summary": "Create single transport resource",
                "parameters": [
                    {
                        "description": "JSON body to create a transport resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/transport.CreateTransport"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/transports/uniquename/{transportMode}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single transport resource by its unique name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transport"
                ],
                "summary": "Get single transport resource by its unique name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique name of the transport resource",
                        "name": "transportMode",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/transport.Transport"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/transports/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single transport resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transport"
                ],
                "summary": "Get single transport resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the transport resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/transport.Transport"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single transport",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transport"
                ],
                "summary": "Delete single transport",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the transport",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single transport",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transport"
                ],
                "summary": "Update single transport",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the transport",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a transport",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/transport.UpdateTransport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/upload/booking/{id}/message/{messageId}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Upload booking message's image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "imageupload"
                ],
                "summary": "Upload booking message's image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the booking",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the booking's message",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "CREATED",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/lib_user_imageupload.UploadMetadata"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/upload/customer/{uid}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Upload customer's image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "imageupload"
                ],
                "summary": "Upload customer's image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID of the customer",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "CREATED",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/lib_user_imageupload.UploadMetadata"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/upload/employee/{uid}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Upload employee's image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "imageupload"
                ],
                "summary": "Upload employee's image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID of the employee",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "CREATED",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/lib_user_imageupload.UploadMetadata"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/upload/pet/{id}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Upload pet's image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "imageupload"
                ],
                "summary": "Upload pet's image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the pet",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "CREATED",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/lib_user_imageupload.UploadMetadata"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/upload/team/{id}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Upload team's image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "imageupload"
                ],
                "summary": "Upload team's image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the team",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "CREATED",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/lib_user_imageupload.UploadMetadata"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/user.User"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single user resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create single user resource",
                "parameters": [
                    {
                        "description": "JSON body to create a user resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/lib_management_user.CreateUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/user.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "403": {
                        "description": "Error: Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single user resource by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get single user resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/user.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete single user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "403": {
                        "description": "Error: Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update single user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a user",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/lib_management_user.UpdateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "403": {
                        "description": "Error: Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/users/{id}/roles": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Set roles for a single user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Set roles for user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a user's role(s)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.UpdateEmployeeRoles"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "403": {
                        "description": "Error: Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/visibility-rules": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the visibility rule resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VisibilityRule"
                ],
                "summary": "Get all visibility rule resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.VisibilityRule"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single visibility rule resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VisibilityRule"
                ],
                "summary": "Create single visibility rule resource",
                "parameters": [
                    {
                        "description": "JSON body to create a visibility rule resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.CreateVisibilityRule"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.VisibilityRule"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/visibility-rules/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single visibility rule resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VisibilityRule"
                ],
                "summary": "Get single visibility rule resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the visibility rule resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.VisibilityRule"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single visibility rule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VisibilityRule"
                ],
                "summary": "Delete single visibility rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the visibility rule",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single visibility rule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VisibilityRule"
                ],
                "summary": "Update single visibility rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID and type of the visibility rule",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a visibility rule",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UpdateVisibilityRule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/vouchers": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the voucher resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Voucher"
                ],
                "summary": "Get all voucher resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/voucher.Voucher"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single voucher resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Voucher"
                ],
                "summary": "Create single voucher resource",
                "parameters": [
                    {
                        "description": "JSON body to create a voucher resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voucher.CreateVoucher"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/vouchers/vouchercode/{voucherCode}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single voucher resource by its unique code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Voucher"
                ],
                "summary": "Get single voucher resource by its unique code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The unique code of the voucher resource",
                        "name": "voucherCode",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/voucher.Voucher"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/vouchers/vouchercode/{voucherCode}/redeem": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Redeem a voucher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Voucher"
                ],
                "summary": "Redeem voucher",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The code of the voucher",
                        "name": "voucherCode",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to redeem a voucher",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voucher.RedeemVoucher"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "403": {
                        "description": "Error: Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/vouchers/vouchercode/{voucherCode}/release": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Release a voucher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Voucher"
                ],
                "summary": "Release voucher",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The code of the voucher",
                        "name": "voucherCode",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to release a voucher",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voucher.ReleaseVoucher"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "403": {
                        "description": "Error: Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/vouchers/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single voucher resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Voucher"
                ],
                "summary": "Get single voucher resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the voucher resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/voucher.Voucher"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single voucher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Voucher"
                ],
                "summary": "Delete single voucher",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the voucher",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single voucher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Voucher"
                ],
                "summary": "Update single voucher",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the voucher",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a voucher",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voucher.UpdateVoucher"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/weightclasses": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all the weight class resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WeightClass"
                ],
                "summary": "Get all weight class resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/weightclass.WeightClass"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a single weight class resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WeightClass"
                ],
                "summary": "Create single weight class resource",
                "parameters": [
                    {
                        "description": "JSON body to create a weight class resource",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/weightclass.CreateWeightClass"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "409": {
                        "description": "Error: Conflict",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/weightclasses/size/{size}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single weight class resource by its size",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WeightClass"
                ],
                "summary": "Get single weight class resource by its size",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Size of the weight class resource",
                        "name": "size",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/weightclass.WeightClass"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/weightclasses/weight/{weight}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single weight class resource by its size",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WeightClass"
                ],
                "summary": "Get single weight class resource by its size",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Weight of the weight class resource",
                        "name": "weight",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/weightclass.WeightClass"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/weightclasses/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single weight class resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WeightClass"
                ],
                "summary": "Get single weight class resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the weight class resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/weightclass.WeightClass"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single weight class",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WeightClass"
                ],
                "summary": "Delete single weight class",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the weight class",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single weight class",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WeightClass"
                ],
                "summary": "Update single weight class",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the weight class",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a weight class",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/weightclass.UpdateWeightClass"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single authorization resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Get single authorization resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the authorization resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.JSONResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/authorization.Authorization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a single authorization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Delete single authorization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the authorization",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a single pet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pet"
                ],
                "summary": "Update single pet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the pet",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to update a pet",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pet.UpdatePet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/{id}/messages/{messageId}": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Change an existing message of booking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Change booking message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the booking",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to change a booking's voucher",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/booking.RescheduleBooking"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/{id}/transportmode": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Change transport mode for a single booking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Booking"
                ],
                "summary": "Change transport mode for a booking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the booking",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body to change transport mode of a booking",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/booking.RescheduleBooking"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "422": {
                        "description": "Error: Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        },
        "/{id}/unlink-xero-invoice": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Unlink a single customer's xero contact",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Unlink single customer's xero contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the customer",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultSuccess"
                        }
                    },
                    "401": {
                        "description": "Error: Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "404": {
                        "description": "Error: Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.JSONResultFailure"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "address.Address": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string",
                    "example": "South Africa"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "customerId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "isDefault": {
                    "type": "boolean",
                    "example": true
                },
                "location": {
                    "$ref": "#/definitions/address.Location"
                },
                "name": {
                    "type": "string",
                    "example": "Home"
                },
                "postalCode": {
                    "type": "string",
                    "example": "2309"
                },
                "province": {
                    "type": "string",
                    "example": "North West"
                },
                "streetName": {
                    "type": "string",
                    "example": "Du Plooy St"
                },
                "streetNumber": {
                    "type": "string",
                    "example": "92"
                },
                "suburb": {
                    "type": "string",
                    "example": "George East"
                },
                "town": {
                    "type": "string",
                    "example": "George"
                },
                "unitName": {
                    "type": "string",
                    "example": "Mooikloof Golf \u0026 Lifestyle Estate"
                },
                "unitNumber": {
                    "type": "string",
                    "example": "9"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "address.BookingAddress": {
            "type": "object",
            "required": [
                "country",
                "isDefault",
                "location",
                "name",
                "postalCode",
                "province",
                "streetName",
                "streetNumber",
                "suburb",
                "town"
            ],
            "properties": {
                "country": {
                    "type": "string",
                    "minLength": 1,
                    "example": "South Africa"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "customerId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "isDefault": {
                    "type": "boolean",
                    "example": true
                },
                "location": {
                    "$ref": "#/definitions/address.Location"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Home"
                },
                "postalCode": {
                    "type": "string",
                    "minLength": 1,
                    "example": "2309"
                },
                "province": {
                    "type": "string",
                    "minLength": 1,
                    "example": "North West"
                },
                "streetName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Du Plooy St"
                },
                "streetNumber": {
                    "type": "string",
                    "minLength": 1,
                    "example": "92"
                },
                "suburb": {
                    "type": "string",
                    "minLength": 1,
                    "example": "George East"
                },
                "town": {
                    "type": "string",
                    "minLength": 1,
                    "example": "George"
                },
                "unitName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Mooikloof Golf \u0026 Lifestyle Estate"
                },
                "unitNumber": {
                    "type": "string",
                    "minLength": 1,
                    "example": "9"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "address.CreateAddress": {
            "type": "object",
            "required": [
                "country",
                "customerId",
                "isDefault",
                "location",
                "name",
                "postalCode",
                "province",
                "streetName",
                "streetNumber",
                "suburb",
                "town"
            ],
            "properties": {
                "country": {
                    "type": "string",
                    "minLength": 1,
                    "example": "South Africa"
                },
                "customerId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "isDefault": {
                    "type": "boolean",
                    "example": true
                },
                "location": {
                    "$ref": "#/definitions/address.CreateLocation"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Home"
                },
                "postalCode": {
                    "type": "string",
                    "minLength": 1,
                    "example": "2309"
                },
                "province": {
                    "type": "string",
                    "minLength": 1,
                    "example": "North West"
                },
                "streetName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Du Plooy St"
                },
                "streetNumber": {
                    "type": "string",
                    "minLength": 1,
                    "example": "92"
                },
                "suburb": {
                    "type": "string",
                    "minLength": 1,
                    "example": "George East"
                },
                "town": {
                    "type": "string",
                    "minLength": 1,
                    "example": "George"
                },
                "unitName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Mooikloof Golf \u0026 Lifestyle Estate"
                },
                "unitNumber": {
                    "type": "string",
                    "minLength": 1,
                    "example": "9"
                }
            }
        },
        "address.CreateBookingAddress": {
            "type": "object",
            "required": [
                "country",
                "isDefault",
                "location",
                "name",
                "postalCode",
                "province",
                "streetName",
                "streetNumber",
                "suburb",
                "town"
            ],
            "properties": {
                "country": {
                    "type": "string",
                    "minLength": 1,
                    "example": "South Africa"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "isDefault": {
                    "type": "boolean",
                    "example": true
                },
                "location": {
                    "$ref": "#/definitions/address.CreateLocation"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Home"
                },
                "postalCode": {
                    "type": "string",
                    "minLength": 1,
                    "example": "2309"
                },
                "province": {
                    "type": "string",
                    "minLength": 1,
                    "example": "North West"
                },
                "streetName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Du Plooy St"
                },
                "streetNumber": {
                    "type": "string",
                    "minLength": 1,
                    "example": "92"
                },
                "suburb": {
                    "type": "string",
                    "minLength": 1,
                    "example": "George East"
                },
                "town": {
                    "type": "string",
                    "minLength": 1,
                    "example": "George"
                },
                "unitName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Mooikloof Golf \u0026 Lifestyle Estate"
                },
                "unitNumber": {
                    "type": "string",
                    "minLength": 1,
                    "example": "9"
                }
            }
        },
        "address.CreateLocation": {
            "type": "object",
            "required": [
                "coordinates",
                "type"
            ],
            "properties": {
                "coordinates": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "example": [
                        22.9375,
                        30.5595
                    ]
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Point"
                    ],
                    "example": "Point"
                }
            }
        },
        "address.Location": {
            "type": "object",
            "properties": {
                "coordinates": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "example": [
                        22.9375,
                        30.5595
                    ]
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Point"
                    ],
                    "example": "Point"
                }
            }
        },
        "address.UpdateAddress": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string",
                    "minLength": 1,
                    "example": "South Africa"
                },
                "customerId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "isDefault": {
                    "type": "boolean",
                    "example": true
                },
                "location": {
                    "$ref": "#/definitions/address.UpdateLocation"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Home"
                },
                "postalCode": {
                    "type": "string",
                    "minLength": 1,
                    "example": "2309"
                },
                "province": {
                    "type": "string",
                    "minLength": 1,
                    "example": "North West"
                },
                "streetName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Du Plooy St"
                },
                "streetNumber": {
                    "type": "string",
                    "minLength": 1,
                    "example": "92"
                },
                "suburb": {
                    "type": "string",
                    "minLength": 1,
                    "example": "George East"
                },
                "town": {
                    "type": "string",
                    "minLength": 1,
                    "example": "George"
                },
                "unitName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Mooikloof Golf \u0026 Lifestyle Estate"
                },
                "unitNumber": {
                    "type": "string",
                    "minLength": 1,
                    "example": "9"
                }
            }
        },
        "address.UpdateLocation": {
            "type": "object",
            "properties": {
                "coordinates": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "example": [
                        22.9375,
                        30.5595
                    ]
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Point"
                    ],
                    "example": "Point"
                }
            }
        },
        "application.Application": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "applicationType": {
                    "type": "string",
                    "example": "mypetparlorapp"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "My Pet Shop \u0026 Grooming"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "application.CreateApplication": {
            "type": "object",
            "required": [
                "application",
                "tenant",
                "useExistingTenant"
            ],
            "properties": {
                "application": {
                    "type": "object",
                    "required": [
                        "name",
                        "region",
                        "type"
                    ],
                    "properties": {
                        "currency": {
                            "type": "string",
                            "example": "ZAR"
                        },
                        "name": {
                            "type": "string",
                            "example": "My Pet Shop \u0026 Grooming"
                        },
                        "quotaForMobileTeams": {
                            "type": "integer",
                            "example": 1
                        },
                        "quotaForParlorTeams": {
                            "type": "integer",
                            "example": 0
                        },
                        "region": {
                            "type": "string",
                            "enum": [
                                "za",
                                "us",
                                "uk"
                            ],
                            "example": "za"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "mypetparlorapp"
                            ],
                            "example": "mypetparlorapp"
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "owner": {
                    "type": "object",
                    "required": [
                        "password"
                    ],
                    "properties": {
                        "email": {
                            "type": "string",
                            "example": "info@mppdemo.co.za"
                        },
                        "firstName": {
                            "type": "string",
                            "minLength": 1,
                            "example": "MyPetParlor"
                        },
                        "lastName": {
                            "type": "string",
                            "minLength": 1,
                            "example": "Demo"
                        },
                        "password": {
                            "type": "string",
                            "minLength": 8,
                            "example": "password12345678"
                        },
                        "phoneNumber": {
                            "type": "string",
                            "example": "+27654324343"
                        },
                        "uid": {
                            "type": "string",
                            "example": "gSI5TgB90dU0wd42WkwZdEQy9vL2"
                        }
                    }
                },
                "tenant": {
                    "type": "object",
                    "required": [
                        "id",
                        "name"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "example": "568c28fffc4be30d44d0398e"
                        },
                        "name": {
                            "type": "string",
                            "example": "My Pet Shop \u0026 Grooming"
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "useExistingTenant": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "application.UpdateApplication": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "My Pet Shop \u0026 Grooming"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "application_stamp.ApplicationStamp": {
            "type": "object",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "applicationType": {
                    "type": "string",
                    "example": "mpp"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "properties": {
                    "$ref": "#/definitions/util.ApplicationStampProperties"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "application_stamp.CreateApplicationStamp": {
            "type": "object",
            "required": [
                "applicationType",
                "properties"
            ],
            "properties": {
                "applicationId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "applicationType": {
                    "type": "string",
                    "example": "mpp"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "properties": {
                    "$ref": "#/definitions/util.CreateApplicationStampProperties"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "application_stamp.UpdateApplicationStampProperties": {
            "type": "object",
            "required": [
                "properties"
            ],
            "properties": {
                "properties": {
                    "$ref": "#/definitions/util.UpdateApplicationStampProperties"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "auth.CreateEmployeeRoles": {
            "type": "object",
            "properties": {
                "isAdmin": {
                    "type": "boolean",
                    "example": false
                },
                "isDeveloper": {
                    "type": "boolean",
                    "example": false
                },
                "isEmployee": {
                    "type": "boolean",
                    "example": false
                },
                "isGroomer": {
                    "type": "boolean",
                    "example": false
                },
                "isOwner": {
                    "type": "boolean",
                    "example": false
                },
                "isReception": {
                    "type": "boolean",
                    "example": false
                },
                "isTaxi": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "auth.EmployeeRoles": {
            "type": "object",
            "properties": {
                "isAdmin": {
                    "type": "boolean",
                    "example": false
                },
                "isDeveloper": {
                    "type": "boolean",
                    "example": false
                },
                "isEmployee": {
                    "type": "boolean",
                    "example": false
                },
                "isGroomer": {
                    "type": "boolean",
                    "example": false
                },
                "isOwner": {
                    "type": "boolean",
                    "example": false
                },
                "isReception": {
                    "type": "boolean",
                    "example": false
                },
                "isTaxi": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "auth.Role": {
            "type": "string",
            "enum": [
                "Owner",
                "Admin",
                "Guest",
                "Taxi",
                "Groomer",
                "Reception",
                "Customer",
                "Employee"
            ],
            "x-enum-varnames": [
                "Owner",
                "Admin",
                "Guest",
                "Taxi",
                "Groomer",
                "Reception",
                "Customer",
                "Employee"
            ]
        },
        "auth.UpdateEmployeeRoles": {
            "type": "object",
            "properties": {
                "isAdmin": {
                    "type": "boolean",
                    "example": false
                },
                "isDeveloper": {
                    "type": "boolean",
                    "example": false
                },
                "isEmployee": {
                    "type": "boolean",
                    "example": false
                },
                "isGroomer": {
                    "type": "boolean",
                    "example": false
                },
                "isOwner": {
                    "type": "boolean",
                    "example": false
                },
                "isReception": {
                    "type": "boolean",
                    "example": false
                },
                "isTaxi": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "authorization.Authorization": {
            "type": "object",
            "properties": {
                "accountName": {
                    "type": "string",
                    "example": "Bank Card"
                },
                "authorizationCode": {
                    "type": "string",
                    "example": "AUTH_s5nditseka"
                },
                "bank": {
                    "type": "string",
                    "example": "TEST BANK"
                },
                "bin": {
                    "type": "string",
                    "example": "408408"
                },
                "brand": {
                    "type": "string",
                    "example": "visa"
                },
                "cardType": {
                    "type": "string",
                    "example": "visa"
                },
                "channel": {
                    "type": "string",
                    "example": "card"
                },
                "countryCode": {
                    "type": "string",
                    "example": "NG"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "customerId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "expiryMonth": {
                    "type": "string",
                    "example": "09"
                },
                "expiryYear": {
                    "type": "string",
                    "example": "2025"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "last4": {
                    "type": "string",
                    "example": "4081"
                },
                "reusable": {
                    "type": "boolean",
                    "example": true
                },
                "signature": {
                    "type": "string",
                    "example": "SIG_qdUrNo5EyBmVbMIq6J0v"
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "authorization.CreateAuthorization": {
            "type": "object",
            "required": [
                "accountName",
                "authorizationCode",
                "bank",
                "bin",
                "brand",
                "cardType",
                "channel",
                "countryCode",
                "customerId",
                "expiryMonth",
                "expiryYear",
                "last4",
                "reusable",
                "signature"
            ],
            "properties": {
                "accountName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Bank Card"
                },
                "authorizationCode": {
                    "type": "string",
                    "minLength": 1,
                    "example": "AUTH_s5nditseka"
                },
                "bank": {
                    "type": "string",
                    "minLength": 1,
                    "example": "TEST BANK"
                },
                "bin": {
                    "type": "string",
                    "example": "408408"
                },
                "brand": {
                    "type": "string",
                    "minLength": 1,
                    "example": "visa"
                },
                "cardType": {
                    "type": "string",
                    "minLength": 1,
                    "example": "visa"
                },
                "channel": {
                    "type": "string",
                    "minLength": 1,
                    "example": "card"
                },
                "countryCode": {
                    "type": "string",
                    "minLength": 1,
                    "example": "NG"
                },
                "customerId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "expiryMonth": {
                    "type": "string",
                    "minLength": 1,
                    "example": "09"
                },
                "expiryYear": {
                    "type": "string",
                    "example": "2025"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "last4": {
                    "type": "string",
                    "example": "4081"
                },
                "reusable": {
                    "type": "boolean",
                    "example": true
                },
                "signature": {
                    "type": "string",
                    "minLength": 1,
                    "example": "SIG_qdUrNo5EyBmVbMIq6J0v"
                }
            }
        },
        "authorization.UpdateAuthorization": {
            "type": "object",
            "properties": {
                "accountName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Bank Card"
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                }
            }
        },
        "azure_resource_group.AzureResourceGroup": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "azure_resource_group.CreateAzureResourceGroup": {
            "type": "object",
            "required": [
                "location",
                "name"
            ],
            "properties": {
                "location": {
                    "type": "string",
                    "enum": [
                        "southafricanorth"
                    ]
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "azure_resource_group.UpdateAzureResourceGroup": {
            "type": "object",
            "properties": {
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "billing.Account": {
            "type": "object",
            "properties": {
                "billTo": {
                    "type": "string",
                    "example": "self"
                },
                "billingInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.AccountBillingInfo"
                    }
                },
                "ccEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['cc1@example.com'",
                        "'cc2@example.com']"
                    ]
                },
                "code": {
                    "type": "string",
                    "example": "myaccountcode"
                },
                "company": {
                    "type": "string",
                    "example": "Company Name"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "deletedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "dunningCampaignId": {
                    "type": "string",
                    "example": "campaign_123"
                },
                "exemptionCertificate": {
                    "type": "string",
                    "example": "CERT123"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "invoiceTemplateId": {
                    "type": "string",
                    "example": "template_123"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "overrideBusinessEntityId": {
                    "type": "string",
                    "example": "entity_123"
                },
                "parentAccountId": {
                    "type": "string",
                    "example": "parent_123"
                },
                "shippingAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.AccountShippingAddress"
                    }
                },
                "taxExempt": {
                    "type": "boolean",
                    "example": true
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "transactionType": {
                    "type": "string",
                    "example": "sale"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "userEmail": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "vatNumber": {
                    "type": "string",
                    "example": "VAT123456"
                }
            }
        },
        "billing.AccountBillingInfo": {
            "type": "object",
            "properties": {
                "authorizations": {
                    "$ref": "#/definitions/billing.AccountBillingInfoAuthorization"
                },
                "backupPaymentMethod": {
                    "type": "boolean",
                    "example": false
                },
                "company": {
                    "type": "string",
                    "example": "Company Name"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "primaryPaymentMethod": {
                    "type": "boolean",
                    "example": true
                },
                "tokenId": {
                    "type": "string",
                    "example": "token_123"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "updatedByCountry": {
                    "type": "string",
                    "example": "US"
                },
                "updatedByIp": {
                    "type": "string",
                    "example": "192.168.1.1"
                },
                "valid": {
                    "type": "boolean",
                    "example": true
                },
                "vatNumber": {
                    "type": "string",
                    "example": "VAT123456"
                }
            }
        },
        "billing.AccountBillingInfoAuthorization": {
            "type": "object",
            "properties": {
                "accountName": {
                    "type": "string",
                    "example": "Account Name"
                },
                "authorizationCode": {
                    "type": "string",
                    "example": "AUTH123"
                },
                "bank": {
                    "type": "string",
                    "example": "Bank Name"
                },
                "bin": {
                    "type": "string",
                    "example": "123456"
                },
                "brand": {
                    "type": "string",
                    "example": "Brand Name"
                },
                "cardType": {
                    "type": "string",
                    "example": "Visa"
                },
                "channel": {
                    "type": "string",
                    "example": "web"
                },
                "countryCode": {
                    "type": "string",
                    "example": "US"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "expiryMonth": {
                    "type": "string",
                    "example": "12"
                },
                "expiryYear": {
                    "type": "string",
                    "example": "2025"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "last4": {
                    "type": "string",
                    "example": "1234"
                },
                "reusable": {
                    "type": "boolean",
                    "example": false
                },
                "signature": {
                    "type": "string",
                    "example": "signature"
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "billing.AccountLocation": {
            "type": "object",
            "properties": {
                "coordinates": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "example": [
                        22.9375,
                        30.5595
                    ]
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Point"
                    ],
                    "example": "Point"
                }
            }
        },
        "billing.AccountNote": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "imageUrl": {
                    "type": "string",
                    "example": "http://example.com/image.jpg"
                },
                "message": {
                    "type": "string",
                    "example": "Note Message"
                },
                "name": {
                    "type": "string",
                    "example": "Note Name"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "userId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                }
            }
        },
        "billing.AccountShippingAddress": {
            "type": "object",
            "properties": {
                "company": {
                    "type": "string",
                    "example": "Company Name"
                },
                "country": {
                    "type": "string",
                    "example": "USA"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "location": {
                    "$ref": "#/definitions/billing.AccountLocation"
                },
                "nickname": {
                    "type": "string",
                    "example": "Home"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+15551234567"
                },
                "postalCode": {
                    "type": "string",
                    "example": "12345"
                },
                "region": {
                    "type": "string",
                    "example": "Region"
                },
                "streetName": {
                    "type": "string",
                    "example": "Main St"
                },
                "streetNumber": {
                    "type": "string",
                    "example": "456"
                },
                "suburb": {
                    "type": "string",
                    "example": "Suburb"
                },
                "town": {
                    "type": "string",
                    "example": "Townsville"
                },
                "unitName": {
                    "type": "string",
                    "example": "Apt"
                },
                "unitNumber": {
                    "type": "string",
                    "example": "123"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "vatNumber": {
                    "type": "string",
                    "example": "VAT123456"
                }
            }
        },
        "billing.AccountSubscription": {
            "type": "object",
            "properties": {
                "account": {
                    "$ref": "#/definitions/billing.AccountSubscriptionAccountMini"
                },
                "activatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "activeInvoiceId": {
                    "type": "string",
                    "example": "invoice_123"
                },
                "addOns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.AccountSubscriptionAddOn"
                    }
                },
                "addOnsTotal": {
                    "type": "integer",
                    "example": 1000
                },
                "autoRenew": {
                    "type": "boolean",
                    "example": true
                },
                "billingInfoId": {
                    "type": "string",
                    "example": "billing_123"
                },
                "businessEntityId": {
                    "type": "string",
                    "example": "business_123"
                },
                "canceledAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "code": {
                    "type": "string",
                    "example": "ZAR"
                },
                "collectionMethod": {
                    "type": "string",
                    "example": "automatic"
                },
                "convertedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "currentPeriodEndsAt": {
                    "type": "string",
                    "example": "2024-01-05T00:00:00.000Z"
                },
                "currentPeriodStartedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "currentTermEndsAt": {
                    "type": "string",
                    "example": "2024-01-05T00:00:00.000Z"
                },
                "currentTermStartedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "customerNotes": {
                    "type": "string",
                    "example": "Customer notes"
                },
                "deletedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "expirationReason": {
                    "type": "string",
                    "example": "Expired"
                },
                "gatewayCode": {
                    "type": "string",
                    "example": "gateway_123"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "netTerms": {
                    "type": "integer",
                    "example": 30
                },
                "netTermsType": {
                    "type": "string",
                    "example": "net"
                },
                "pausedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "plan": {
                    "$ref": "#/definitions/billing.AccountSubscriptionPlanMini"
                },
                "poNumber": {
                    "type": "string",
                    "example": "PO123"
                },
                "quantity": {
                    "type": "integer",
                    "example": 1
                },
                "rampIntervals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.AccountSubscriptionRampInterval"
                    }
                },
                "remainingBillingCycles": {
                    "type": "integer",
                    "example": 12
                },
                "remainingPauseCycles": {
                    "type": "integer",
                    "example": 3
                },
                "renewalBillingCycles": {
                    "type": "integer",
                    "example": 12
                },
                "revenueScheduleType": {
                    "type": "string",
                    "example": "monthly"
                },
                "shipping": {
                    "$ref": "#/definitions/billing.AccountSubscriptionShipping"
                },
                "startedWithGift": {
                    "type": "boolean",
                    "example": true
                },
                "state": {
                    "type": "string",
                    "example": "active"
                },
                "subtotal": {
                    "type": "integer",
                    "example": 9000
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "termsAndConditions": {
                    "type": "string",
                    "example": "Terms apply"
                },
                "total": {
                    "type": "integer",
                    "example": 10000
                },
                "totalBillingCycles": {
                    "type": "integer",
                    "example": 24
                },
                "trialEndsAt": {
                    "type": "string",
                    "example": "2024-01-05T00:00:00.000Z"
                },
                "trialStartedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "unitAmount": {
                    "type": "integer",
                    "example": 10000
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "billing.AccountSubscriptionAccountMini": {
            "type": "object",
            "properties": {
                "billTo": {
                    "type": "string",
                    "example": "self"
                },
                "code": {
                    "type": "string",
                    "example": "myaccountcode"
                },
                "company": {
                    "type": "string",
                    "example": "Company Name"
                },
                "dunningCampaignId": {
                    "type": "string",
                    "example": "campaign_123"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "parentAccountId": {
                    "type": "string",
                    "example": "parent_123"
                },
                "userEmail": {
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "billing.AccountSubscriptionAddOn": {
            "type": "object",
            "properties": {
                "addOn": {
                    "$ref": "#/definitions/billing.AccountSubscriptionAddOnMini"
                },
                "addOnSource": {
                    "type": "string",
                    "example": "plan_add_on"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "expiredAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "percentageTiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.AccountSubscriptionAddOnPercentageTier"
                    }
                },
                "quantity": {
                    "type": "integer",
                    "example": 1
                },
                "revenueScheduleType": {
                    "type": "string",
                    "example": "at_range_start"
                },
                "subscriptionId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "tierType": {
                    "type": "string",
                    "example": "flat"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.AccountSubscriptionAddOnTier"
                    }
                },
                "unitAmount": {
                    "type": "integer",
                    "example": 99999
                },
                "unitAmountDecimal": {
                    "type": "string",
                    "example": "0.0005"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "usageCalculationType": {
                    "type": "string",
                    "example": "percentage"
                },
                "usagePercentage": {
                    "type": "number",
                    "example": 100
                },
                "usageTimeframe": {
                    "type": "string",
                    "example": "billing_period"
                }
            }
        },
        "billing.AccountSubscriptionAddOnMini": {
            "type": "object",
            "properties": {
                "accountingCode": {
                    "type": "string",
                    "example": "400"
                },
                "addOnType": {
                    "type": "string",
                    "example": "fixed"
                },
                "code": {
                    "type": "string",
                    "example": "mppstandardplanaddon"
                },
                "externalSku": {
                    "type": "string",
                    "example": "SKU123"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "measuredUnitId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "MyPetParlor App Standard Add On"
                },
                "usagePercentage": {
                    "type": "number",
                    "example": 100
                },
                "usageType": {
                    "type": "string",
                    "example": "price"
                }
            }
        },
        "billing.AccountSubscriptionAddOnPercentageTier": {
            "type": "object",
            "properties": {
                "endingAmount": {
                    "type": "integer",
                    "example": 999
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "usagePercentage": {
                    "type": "number",
                    "example": 0
                }
            }
        },
        "billing.AccountSubscriptionAddOnTier": {
            "type": "object",
            "properties": {
                "endingQuantity": {
                    "type": "integer",
                    "example": 10
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "unitAmount": {
                    "type": "integer",
                    "example": 999
                },
                "unitAmountDecimal": {
                    "type": "string",
                    "example": "0.0005"
                }
            }
        },
        "billing.AccountSubscriptionPlanMini": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "mppstandardplan"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "MyPetParlor App Standard"
                }
            }
        },
        "billing.AccountSubscriptionRampInterval": {
            "type": "object",
            "properties": {
                "endingOn": {
                    "type": "string",
                    "example": "2025-01-01T00:00:00.000Z"
                },
                "remainingBillingCycles": {
                    "type": "integer",
                    "example": 11
                },
                "startingBillingCycle": {
                    "type": "integer",
                    "example": 1
                },
                "startingOn": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00.000Z"
                },
                "unitAmount": {
                    "type": "integer",
                    "example": 10000
                }
            }
        },
        "billing.AccountSubscriptionShipping": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/billing.AccountShippingAddress"
                },
                "amount": {
                    "type": "integer",
                    "example": 10000
                },
                "method": {
                    "$ref": "#/definitions/billing.AccountSubscriptionShippingMethodMini"
                }
            }
        },
        "billing.AccountSubscriptionShippingMethodMini": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "usps_priority"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "USPS Priority"
                }
            }
        },
        "billing.CreateAccount": {
            "type": "object",
            "required": [
                "code",
                "firstName",
                "lastName",
                "userEmail"
            ],
            "properties": {
                "acquisition": {
                    "$ref": "#/definitions/billing.CreateAccountAcquisitionInfo"
                },
                "billTo": {
                    "type": "string",
                    "enum": [
                        "self",
                        "other"
                    ],
                    "example": "self"
                },
                "billingInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.CreateAccountBillingInfo"
                    }
                },
                "ccEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['cc1@example.com'",
                        "'cc2@example.com']"
                    ]
                },
                "code": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "myaccountcode"
                },
                "company": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Company Name"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "dunningCampaignId": {
                    "type": "string",
                    "example": "campaign_123"
                },
                "exemptionCertificate": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "CERT123"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "invoiceTemplateId": {
                    "type": "string",
                    "example": "template_123"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "notes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.CreateAccountNote"
                    }
                },
                "overrideBusinessEntityId": {
                    "type": "string",
                    "example": "entity_123"
                },
                "parentAccountId": {
                    "type": "string",
                    "example": "parent_123"
                },
                "shippingAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.CreateAccountShippingAddress"
                    }
                },
                "taxExempt": {
                    "type": "boolean",
                    "example": true
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "tenantId": {
                    "type": "string",
                    "example": "tenant_123"
                },
                "transactionType": {
                    "type": "string",
                    "example": "sale"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "userEmail": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "vatNumber": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "VAT123456"
                }
            }
        },
        "billing.CreateAccountAcquisitionInfo": {
            "type": "object",
            "required": [
                "channel",
                "costCurrency"
            ],
            "properties": {
                "campaign": {
                    "type": "string",
                    "example": "my_campaign"
                },
                "channel": {
                    "type": "string",
                    "enum": [
                        "advertising",
                        "blog",
                        "direct_traffic",
                        "email",
                        "events",
                        "marketing_content",
                        "organic_search",
                        "other",
                        "outbound_sales",
                        "paid_search",
                        "public_relations",
                        "referral",
                        "social_media"
                    ],
                    "example": "organic_search"
                },
                "channelDescription": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Google Ads"
                },
                "costAmount": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 100
                },
                "costCurrency": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "USD"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "subchannel": {
                    "type": "string",
                    "example": "google_ads"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "billing.CreateAccountBillingInfo": {
            "type": "object",
            "required": [
                "authorizations",
                "backupPaymentMethod",
                "firstName",
                "lastName",
                "primaryPaymentMethod",
                "tokenId",
                "updatedByCountry",
                "updatedByIp",
                "valid"
            ],
            "properties": {
                "authorizations": {
                    "$ref": "#/definitions/billing.CreateAccountBillingInfoAuthorization"
                },
                "backupPaymentMethod": {
                    "type": "boolean",
                    "example": false
                },
                "company": {
                    "type": "string",
                    "example": "Company Name"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "primaryPaymentMethod": {
                    "type": "boolean",
                    "example": true
                },
                "tokenId": {
                    "type": "string",
                    "example": "token_123"
                },
                "updatedByCountry": {
                    "type": "string",
                    "example": "US"
                },
                "updatedByIp": {
                    "type": "string",
                    "example": "192.168.1.1"
                },
                "valid": {
                    "type": "boolean",
                    "example": true
                },
                "vatNumber": {
                    "type": "string",
                    "example": "VAT123456"
                }
            }
        },
        "billing.CreateAccountBillingInfoAuthorization": {
            "type": "object",
            "required": [
                "accountName",
                "authorizationCode",
                "bank",
                "bin",
                "brand",
                "cardType",
                "channel",
                "countryCode",
                "expiryMonth",
                "expiryYear",
                "last4",
                "reusable",
                "signature",
                "teamId"
            ],
            "properties": {
                "accountName": {
                    "type": "string",
                    "example": "Account Name"
                },
                "authorizationCode": {
                    "type": "string",
                    "example": "AUTH123"
                },
                "bank": {
                    "type": "string",
                    "example": "Bank Name"
                },
                "bin": {
                    "type": "string",
                    "example": "123456"
                },
                "brand": {
                    "type": "string",
                    "example": "Brand Name"
                },
                "cardType": {
                    "type": "string",
                    "example": "Visa"
                },
                "channel": {
                    "type": "string",
                    "example": "web"
                },
                "countryCode": {
                    "type": "string",
                    "example": "US"
                },
                "expiryMonth": {
                    "type": "string",
                    "example": "12"
                },
                "expiryYear": {
                    "type": "string",
                    "example": "2025"
                },
                "last4": {
                    "type": "string",
                    "example": "1234"
                },
                "reusable": {
                    "type": "boolean",
                    "example": false
                },
                "signature": {
                    "type": "string",
                    "example": "signature"
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                }
            }
        },
        "billing.CreateAccountLocation": {
            "type": "object",
            "required": [
                "coordinates",
                "type"
            ],
            "properties": {
                "coordinates": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "example": [
                        22.9375,
                        30.5595
                    ]
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Point"
                    ],
                    "example": "Point"
                }
            }
        },
        "billing.CreateAccountNote": {
            "type": "object",
            "required": [
                "message",
                "name",
                "userId"
            ],
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "imageUrl": {
                    "type": "string",
                    "example": "http://example.com/image.jpg"
                },
                "message": {
                    "type": "string",
                    "example": "Note Message"
                },
                "name": {
                    "type": "string",
                    "example": "Note Name"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "userId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                }
            }
        },
        "billing.CreateAccountShippingAddress": {
            "type": "object",
            "required": [
                "country",
                "firstName",
                "lastName",
                "location",
                "postalCode",
                "region",
                "streetName",
                "streetNumber",
                "suburb",
                "town"
            ],
            "properties": {
                "company": {
                    "type": "string",
                    "example": "Company Name"
                },
                "country": {
                    "type": "string",
                    "example": "USA"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "location": {
                    "$ref": "#/definitions/billing.CreateAccountLocation"
                },
                "nickname": {
                    "type": "string",
                    "example": "Home"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+15551234567"
                },
                "postalCode": {
                    "type": "string",
                    "example": "12345"
                },
                "region": {
                    "type": "string",
                    "example": "Region"
                },
                "streetName": {
                    "type": "string",
                    "example": "Main St"
                },
                "streetNumber": {
                    "type": "string",
                    "example": "456"
                },
                "suburb": {
                    "type": "string",
                    "example": "Suburb"
                },
                "town": {
                    "type": "string",
                    "example": "Townsville"
                },
                "unitName": {
                    "type": "string",
                    "example": "Apt"
                },
                "unitNumber": {
                    "type": "string",
                    "example": "123"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "vatNumber": {
                    "type": "string",
                    "example": "VAT123456"
                }
            }
        },
        "billing.CreateAccountSubscription": {
            "type": "object",
            "required": [
                "account",
                "code"
            ],
            "properties": {
                "account": {
                    "$ref": "#/definitions/billing.CreateAccount"
                },
                "activatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "activeInvoiceId": {
                    "type": "string",
                    "example": "invoice_123"
                },
                "addOns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.CreateAccountSubscriptionAddOn"
                    }
                },
                "autoRenew": {
                    "type": "boolean",
                    "example": true
                },
                "billingInfoId": {
                    "type": "string",
                    "example": "billing_123"
                },
                "bulk": {
                    "type": "boolean",
                    "example": true
                },
                "businessEntityCode": {
                    "type": "string",
                    "example": "business_code_123"
                },
                "businessEntityId": {
                    "type": "string",
                    "example": "business_123"
                },
                "canceledAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "code": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "ZAR"
                },
                "collectionMethod": {
                    "type": "string",
                    "enum": [
                        "automatic",
                        "manual"
                    ],
                    "example": "automatic"
                },
                "convertedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "couponCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "creditCustomerNotes": {
                    "type": "string",
                    "example": "Credit customer notes"
                },
                "customerNotes": {
                    "type": "string",
                    "example": "Customer notes"
                },
                "deletedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "expirationReason": {
                    "type": "string",
                    "example": "Expired"
                },
                "gatewayCode": {
                    "type": "string",
                    "maxLength": 13,
                    "example": "gateway_123"
                },
                "giftCardRedemptionCode": {
                    "type": "string",
                    "example": "gift_card_123"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "netTerms": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 30
                },
                "netTermsType": {
                    "type": "string",
                    "enum": [
                        "net",
                        "eom"
                    ],
                    "example": "net"
                },
                "nextBillDate": {
                    "type": "string",
                    "example": "2024-01-05T00:00:00.000Z"
                },
                "pausedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "planCode": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "plan_code_123"
                },
                "planId": {
                    "type": "string",
                    "example": "plan_123"
                },
                "poNumber": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "PO123"
                },
                "quantity": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 1
                },
                "rampIntervals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.CreateAccountSubscriptionRampInterval"
                    }
                },
                "remainingPauseCycles": {
                    "type": "integer",
                    "example": 3
                },
                "renewalBillingCycles": {
                    "type": "integer",
                    "example": 12
                },
                "revenueScheduleType": {
                    "type": "string",
                    "enum": [
                        "at_range_end",
                        "at_range_start",
                        "evenly",
                        "never"
                    ],
                    "example": "monthly"
                },
                "shipping": {
                    "$ref": "#/definitions/billing.CreateAccountSubscriptionShipping"
                },
                "startedWithGift": {
                    "type": "boolean",
                    "example": true
                },
                "startsAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "active",
                        "canceled",
                        "expired",
                        "failed",
                        "future",
                        "paused"
                    ],
                    "example": "active"
                },
                "taxInclusive": {
                    "type": "boolean",
                    "example": true
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "termsAndConditions": {
                    "type": "string",
                    "example": "Terms apply"
                },
                "totalBillingCycles": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 24
                },
                "transactionType": {
                    "type": "string",
                    "enum": [
                        "moto"
                    ],
                    "example": "moto"
                },
                "trialEndsAt": {
                    "type": "string",
                    "example": "2024-01-05T00:00:00.000Z"
                },
                "unitAmount": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 10000
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "billing.CreateAccountSubscriptionAddOn": {
            "type": "object",
            "required": [
                "addOnCode",
                "addOnSource",
                "code",
                "percentageTiers",
                "quantity",
                "tiers"
            ],
            "properties": {
                "addOnCode": {
                    "type": "string",
                    "maxLength": 25,
                    "example": "mppstandardplanaddon"
                },
                "addOnSource": {
                    "type": "string",
                    "enum": [
                        "plan_add_on",
                        "item"
                    ],
                    "example": "plan_add_on"
                },
                "code": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "mppstandardplanaddon"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "percentageTiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.CreateAccountSubscriptionAddOnPercentageTier"
                    }
                },
                "quantity": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "revenueScheduleType": {
                    "type": "string",
                    "example": "at_range_start"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.CreateAccountSubscriptionAddOnTier"
                    }
                },
                "unitAmount": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 999
                },
                "unitAmountDecimal": {
                    "type": "string",
                    "example": "0.0005"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "usagePercentage": {
                    "type": "number",
                    "example": 100
                }
            }
        },
        "billing.CreateAccountSubscriptionAddOnPercentageTier": {
            "type": "object",
            "required": [
                "endingAmount",
                "usagePercentage"
            ],
            "properties": {
                "endingAmount": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 999
                },
                "usagePercentage": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 0
                }
            }
        },
        "billing.CreateAccountSubscriptionAddOnTier": {
            "type": "object",
            "properties": {
                "endingQuantity": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 10
                },
                "unitAmount": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 999
                },
                "unitAmountDecimal": {
                    "type": "string",
                    "example": "0.0005"
                }
            }
        },
        "billing.CreateAccountSubscriptionRampInterval": {
            "type": "object",
            "properties": {
                "startingBillingCycle": {
                    "type": "integer",
                    "example": 1
                },
                "unitAmount": {
                    "type": "integer",
                    "example": 10000
                }
            }
        },
        "billing.CreateAccountSubscriptionShipping": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/billing.CreateAccountShippingAddress"
                },
                "amount": {
                    "type": "number",
                    "example": 100
                },
                "methodCode": {
                    "type": "string",
                    "example": "usps_priority"
                },
                "methodId": {
                    "type": "string",
                    "example": "method_123"
                }
            }
        },
        "billing.UpdateAccount": {
            "type": "object",
            "properties": {
                "billTo": {
                    "type": "string",
                    "enum": [
                        "self",
                        "other"
                    ],
                    "example": "self"
                },
                "billingInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.UpdateAccountBillingInfo"
                    }
                },
                "ccEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['cc1@example.com'",
                        "'cc2@example.com']"
                    ]
                },
                "code": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "myaccountcode"
                },
                "company": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Company Name"
                },
                "dunningCampaignId": {
                    "type": "string",
                    "example": "campaign_123"
                },
                "exemptionCertificate": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "CERT123"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "invoiceTemplateId": {
                    "type": "string",
                    "example": "template_123"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "overrideBusinessEntityId": {
                    "type": "string",
                    "example": "entity_123"
                },
                "parentAccountId": {
                    "type": "string",
                    "example": "parent_123"
                },
                "taxExempt": {
                    "type": "boolean",
                    "example": true
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "transactionType": {
                    "type": "string",
                    "example": "sale"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "userEmail": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "vatNumber": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "VAT123456"
                }
            }
        },
        "billing.UpdateAccountBillingInfo": {
            "type": "object",
            "properties": {
                "authorizations": {
                    "$ref": "#/definitions/billing.UpdateAccountBillingInfoAuthorization"
                },
                "backupPaymentMethod": {
                    "type": "boolean",
                    "example": false
                },
                "company": {
                    "type": "string",
                    "example": "Company Name"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "primaryPaymentMethod": {
                    "type": "boolean",
                    "example": true
                },
                "tokenId": {
                    "type": "string",
                    "example": "token_123"
                },
                "updatedByCountry": {
                    "type": "string",
                    "example": "US"
                },
                "updatedByIp": {
                    "type": "string",
                    "example": "192.168.1.1"
                },
                "valid": {
                    "type": "boolean",
                    "example": true
                },
                "vatNumber": {
                    "type": "string",
                    "example": "VAT123456"
                }
            }
        },
        "billing.UpdateAccountBillingInfoAuthorization": {
            "type": "object",
            "properties": {
                "accountName": {
                    "type": "string",
                    "example": "Account Name"
                },
                "authorizationCode": {
                    "type": "string",
                    "example": "AUTH123"
                },
                "bank": {
                    "type": "string",
                    "example": "Bank Name"
                },
                "bin": {
                    "type": "string",
                    "example": "123456"
                },
                "brand": {
                    "type": "string",
                    "example": "Brand Name"
                },
                "cardType": {
                    "type": "string",
                    "example": "Visa"
                },
                "channel": {
                    "type": "string",
                    "example": "web"
                },
                "countryCode": {
                    "type": "string",
                    "example": "US"
                },
                "expiryMonth": {
                    "type": "string",
                    "example": "12"
                },
                "expiryYear": {
                    "type": "string",
                    "example": "2025"
                },
                "last4": {
                    "type": "string",
                    "example": "1234"
                },
                "reusable": {
                    "type": "boolean",
                    "example": false
                },
                "signature": {
                    "type": "string",
                    "example": "signature"
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                }
            }
        },
        "billing.UpdateAccountLocation": {
            "type": "object",
            "required": [
                "coordinates",
                "type"
            ],
            "properties": {
                "coordinates": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "example": [
                        22.9375,
                        30.5595
                    ]
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Point"
                    ],
                    "example": "Point"
                }
            }
        },
        "billing.UpdateAccountNote": {
            "type": "object",
            "properties": {
                "imageUrl": {
                    "type": "string",
                    "example": "http://example.com/image.jpg"
                },
                "message": {
                    "type": "string",
                    "example": "Note Message"
                },
                "name": {
                    "type": "string",
                    "example": "Note Name"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "billing.UpdateAccountShippingAddress": {
            "type": "object",
            "properties": {
                "company": {
                    "type": "string",
                    "example": "Company Name"
                },
                "country": {
                    "type": "string",
                    "example": "USA"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "location": {
                    "$ref": "#/definitions/billing.UpdateAccountLocation"
                },
                "nickname": {
                    "type": "string",
                    "example": "Home"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+15551234567"
                },
                "postalCode": {
                    "type": "string",
                    "example": "12345"
                },
                "region": {
                    "type": "string",
                    "example": "Region"
                },
                "streetName": {
                    "type": "string",
                    "example": "Main St"
                },
                "streetNumber": {
                    "type": "string",
                    "example": "456"
                },
                "suburb": {
                    "type": "string",
                    "example": "Suburb"
                },
                "town": {
                    "type": "string",
                    "example": "Townsville"
                },
                "unitName": {
                    "type": "string",
                    "example": "Apt"
                },
                "unitNumber": {
                    "type": "string",
                    "example": "123"
                },
                "vatNumber": {
                    "type": "string",
                    "example": "VAT123456"
                }
            }
        },
        "billing.UpdateAccountSubscription": {
            "type": "object",
            "properties": {
                "autoRenew": {
                    "type": "boolean",
                    "example": true
                },
                "billingInfoId": {
                    "type": "string",
                    "example": "billing_123"
                },
                "collectionMethod": {
                    "type": "string",
                    "enum": [
                        "automatic",
                        "manual"
                    ],
                    "example": "automatic"
                },
                "customerNotes": {
                    "type": "string",
                    "example": "Customer notes"
                },
                "gatewayCode": {
                    "type": "string",
                    "maxLength": 13,
                    "example": "gateway_123"
                },
                "netTerms": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 30
                },
                "netTermsType": {
                    "type": "string",
                    "enum": [
                        "net",
                        "eom"
                    ],
                    "example": "net"
                },
                "nextBillDate": {
                    "type": "string",
                    "example": "2024-01-05T00:00:00.000Z"
                },
                "poNumber": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "PO123"
                },
                "remainingBillingCycles": {
                    "type": "integer",
                    "example": 12
                },
                "renewalBillingCycles": {
                    "type": "integer",
                    "example": 12
                },
                "revenueScheduleType": {
                    "type": "string",
                    "enum": [
                        "at_range_end",
                        "at_range_start",
                        "evenly",
                        "never"
                    ],
                    "example": "monthly"
                },
                "termsAndConditions": {
                    "type": "string",
                    "example": "Terms apply"
                }
            }
        },
        "booking.Booking": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/address.BookingAddress"
                },
                "approved": {
                    "type": "boolean",
                    "example": false
                },
                "bookedFor": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "bookedForTime": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "bookingNumber": {
                    "type": "integer",
                    "example": 3
                },
                "bookingState": {
                    "type": "string",
                    "enum": [
                        "created",
                        "moved",
                        "approved",
                        "paid",
                        "unpaid",
                        "started",
                        "completed",
                        "cancelled",
                        "deleted",
                        "rescheduled",
                        "commented"
                    ],
                    "example": "created"
                },
                "bookingStates": {
                    "$ref": "#/definitions/booking.BookingStates"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "customer": {
                    "$ref": "#/definitions/customer.BookingCustomer"
                },
                "customerId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.BookingEvent"
                    }
                },
                "groupId": {
                    "type": "string",
                    "example": "groupid-abc123"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Job"
                    }
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.BookingMessage"
                    }
                },
                "notes": {
                    "type": "string",
                    "example": "Not completed because customer was nowhere to be found"
                },
                "orderSnapshots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.OrderSnapshot"
                    }
                },
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.BookingOrder"
                    }
                },
                "paymentInfo": {
                    "$ref": "#/definitions/booking.PaymentInfo"
                },
                "reminder": {
                    "$ref": "#/definitions/booking.BookingReminder"
                },
                "scheduleType": {
                    "type": "string",
                    "enum": [
                        "intaketime",
                        "timeblock"
                    ],
                    "example": "intaketime"
                },
                "shiftSnapshot": {
                    "$ref": "#/definitions/schedule.ShiftSnapshot"
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "transportMode": {
                    "type": "string",
                    "example": "collectAndDeliver"
                },
                "transportSnapshot": {
                    "$ref": "#/definitions/transport.TransportSnapshot"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "voucher": {
                    "$ref": "#/definitions/booking.Voucher"
                },
                "xeroInvoiceId": {
                    "type": "string",
                    "example": ""
                },
                "xeroInvoiceNumber": {
                    "type": "string",
                    "example": ""
                },
                "xeroPaymentId": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "booking.BookingEvent": {
            "type": "object",
            "properties": {
                "bookingState": {
                    "type": "string",
                    "enum": [
                        "created",
                        "moved",
                        "approved",
                        "paid",
                        "unpaid",
                        "started",
                        "completed",
                        "cancelled",
                        "deleted",
                        "rescheduled",
                        "commented",
                        "custom"
                    ],
                    "example": "paid"
                },
                "comment": {
                    "type": "string",
                    "example": "Jiltons Reception"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "eventNumber": {
                    "type": "integer",
                    "example": 1
                },
                "imageUrl": {
                    "type": "string",
                    "example": "Jiltons Reception"
                },
                "name": {
                    "type": "string",
                    "example": "Jiltons Reception"
                },
                "uid": {
                    "type": "string",
                    "example": "XyPEBUq6DfTEEK288TzARnWwVoH2"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "booking.BookingMessage": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "imageUrl": {
                    "type": "string",
                    "example": "https://user.image.url.com"
                },
                "message": {
                    "type": "string",
                    "example": "I was here."
                },
                "name": {
                    "type": "string",
                    "example": "Jiltons Reception"
                },
                "uid": {
                    "type": "string",
                    "example": "XyPEBUq6DfTEEK288TzARnWwVoH2"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "uploadType": {
                    "type": "string",
                    "example": "image"
                },
                "uploadUrl": {
                    "type": "string",
                    "example": "https://message.upload.url.com"
                }
            }
        },
        "booking.BookingOrder": {
            "type": "object",
            "properties": {
                "additionalInfo": {
                    "type": "string",
                    "example": "He is partially blind, please take care."
                },
                "extraServicesIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['568c28fffc4be30d44d0398e']"
                    ]
                },
                "groomServiceId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "petId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                }
            }
        },
        "booking.BookingReminder": {
            "type": "object",
            "required": [
                "scheduledAt"
            ],
            "properties": {
                "scheduledAt": {
                    "type": "string"
                }
            }
        },
        "booking.BookingStates": {
            "type": "object",
            "properties": {
                "arrived": {
                    "type": "boolean",
                    "example": true
                },
                "cancelled": {
                    "type": "boolean",
                    "example": true
                },
                "collected": {
                    "type": "boolean",
                    "example": true
                },
                "completed": {
                    "type": "boolean",
                    "example": true
                },
                "confirmed": {
                    "type": "boolean",
                    "example": true
                },
                "created": {
                    "type": "boolean",
                    "example": true
                },
                "delivered": {
                    "type": "boolean",
                    "example": true
                },
                "finished": {
                    "type": "boolean",
                    "example": true
                },
                "moved": {
                    "type": "boolean",
                    "example": true
                },
                "rescheduled": {
                    "type": "boolean",
                    "example": true
                },
                "started": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "booking.BookingsReportDataPoint": {
            "type": "object",
            "properties": {
                "bookedDateTime": {
                    "type": "string",
                    "example": "2024-10-28 07:00:00"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "totalPets": {
                    "type": "integer",
                    "example": 1
                },
                "totalPriceValue": {
                    "type": "integer",
                    "example": 25000
                },
                "totalServicePriceValue": {
                    "type": "integer",
                    "example": 30000
                },
                "totalTransportPriceValue": {
                    "type": "integer",
                    "example": 0
                },
                "totalVoucherPriceValue": {
                    "type": "integer",
                    "example": 5000
                },
                "voucherCode": {
                    "type": "string",
                    "example": "30%OFF_MAY2024"
                }
            }
        },
        "booking.ChangeBookingVoucherData": {
            "type": "object",
            "required": [
                "enabled",
                "voucherCode"
            ],
            "properties": {
                "discountValue": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 10000
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "percentageValue": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 55
                },
                "usePercentage": {
                    "type": "boolean",
                    "example": true
                },
                "voucherCode": {
                    "type": "string",
                    "minLength": 1,
                    "example": "JAN2023"
                }
            }
        },
        "booking.CreateBooking": {
            "type": "object",
            "required": [
                "approved",
                "bookedFor",
                "bookedForTime",
                "customerId",
                "eventToCreate",
                "orderSnapshots",
                "orders",
                "paymentInfo",
                "reminders",
                "transportMode",
                "transportSnapshot"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/address.CreateBookingAddress"
                },
                "approved": {
                    "type": "boolean",
                    "example": false
                },
                "bookedFor": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "bookedForTime": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "bookingNumber": {
                    "type": "integer",
                    "example": 3
                },
                "bookingState": {
                    "type": "string",
                    "enum": [
                        "created",
                        "moved",
                        "approved",
                        "paid",
                        "unpaid",
                        "started",
                        "completed",
                        "cancelled",
                        "deleted",
                        "rescheduled",
                        "commented"
                    ],
                    "example": "paid"
                },
                "bookingStates": {
                    "$ref": "#/definitions/booking.CreateBookingStates"
                },
                "customerId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "eventToCreate": {
                    "$ref": "#/definitions/booking.EventToCreate"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.BookingEvent"
                    }
                },
                "groupId": {
                    "type": "string",
                    "example": "groupid-abc123"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.BookingMessage"
                    }
                },
                "notes": {
                    "type": "string",
                    "example": "Not completed because customer was nowhere to be found"
                },
                "orderSnapshots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.OrderSnapshot"
                    }
                },
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.CreateBookingOrder"
                    }
                },
                "paymentInfo": {
                    "$ref": "#/definitions/booking.CreatePaymentInfo"
                },
                "reminders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.CreateBookingReminder"
                    }
                },
                "scheduleType": {
                    "type": "string",
                    "enum": [
                        "intaketime",
                        "timeblock"
                    ],
                    "example": "intaketime"
                },
                "shiftPerAppointment": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/schedule.ShiftSnapshot"
                    }
                },
                "shiftSnapshot": {
                    "$ref": "#/definitions/schedule.ShiftSnapshot"
                },
                "timeSlotBoundsPerAppointment": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/statistic.TimeSlotBounds"
                    }
                },
                "transportMode": {
                    "type": "string",
                    "minLength": 1,
                    "example": "collectAndDeliver"
                },
                "transportSnapshot": {
                    "$ref": "#/definitions/transport.TransportSnapshot"
                },
                "voucher": {
                    "$ref": "#/definitions/booking.CreateVoucher"
                },
                "xeroInvoice": {
                    "$ref": "#/definitions/xero.CreateXeroInvoice"
                },
                "xeroInvoiceId": {
                    "type": "string",
                    "minLength": 1,
                    "example": ""
                },
                "xeroInvoiceNumber": {
                    "type": "string",
                    "minLength": 1,
                    "example": ""
                },
                "xeroPaymentId": {
                    "type": "string",
                    "minLength": 1,
                    "example": ""
                }
            }
        },
        "booking.CreateBookingEvent": {
            "type": "object",
            "required": [
                "bookingIds",
                "bookingState",
                "name",
                "uid"
            ],
            "properties": {
                "bookingIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['568c28fffc4be30d44d0398e'",
                        " '368c28fffc4be30d44d0398e']"
                    ]
                },
                "bookingState": {
                    "type": "string",
                    "enum": [
                        "created",
                        "moved",
                        "approved",
                        "paid",
                        "unpaid",
                        "started",
                        "completed",
                        "cancelled",
                        "deleted",
                        "rescheduled",
                        "commented",
                        "custom"
                    ],
                    "example": "paid"
                },
                "comment": {
                    "type": "string",
                    "example": "I was here."
                },
                "imageUrl": {
                    "type": "string",
                    "example": "https://user.image.url.com"
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Jiltons Reception"
                },
                "uid": {
                    "type": "string",
                    "minLength": 1,
                    "example": "XyPEBUq6DfTEEK288TzARnWwVoH2"
                }
            }
        },
        "booking.CreateBookingOrder": {
            "type": "object",
            "required": [
                "extraServicesIds",
                "petId"
            ],
            "properties": {
                "additionalInfo": {
                    "type": "string",
                    "maxLength": 400,
                    "minLength": 1,
                    "example": "He is partially blind, please take care."
                },
                "extraServicesIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['568c28fffc4be30d44d0398e']"
                    ]
                },
                "groomServiceId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "petId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                }
            }
        },
        "booking.CreateBookingReminder": {
            "type": "object",
            "required": [
                "scheduledAt"
            ],
            "properties": {
                "scheduledAt": {
                    "type": "string"
                }
            }
        },
        "booking.CreateBookingStates": {
            "type": "object",
            "properties": {
                "arrived": {
                    "type": "boolean",
                    "example": false
                },
                "cancelled": {
                    "type": "boolean",
                    "example": false
                },
                "collected": {
                    "type": "boolean",
                    "example": false
                },
                "completed": {
                    "type": "boolean",
                    "example": false
                },
                "confirmed": {
                    "type": "boolean",
                    "example": false
                },
                "created": {
                    "type": "boolean",
                    "example": true
                },
                "delivered": {
                    "type": "boolean",
                    "example": false
                },
                "finished": {
                    "type": "boolean",
                    "example": false
                },
                "moved": {
                    "type": "boolean",
                    "example": true
                },
                "rescheduled": {
                    "type": "boolean",
                    "example": false
                },
                "started": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "booking.CreatePaymentInfo": {
            "type": "object",
            "required": [
                "paid",
                "preferredPaymentOption"
            ],
            "properties": {
                "eftReference": {
                    "type": "string",
                    "minLength": 1,
                    "example": "232-813adc32"
                },
                "paid": {
                    "type": "boolean",
                    "example": false
                },
                "parlorPaymentType": {
                    "type": "string",
                    "enum": [
                        "cash",
                        "card"
                    ],
                    "example": "cash"
                },
                "preferredPaymentOption": {
                    "type": "string",
                    "enum": [
                        "cash",
                        "card",
                        "payAtParlor",
                        "eft"
                    ],
                    "example": "card"
                },
                "reference": {
                    "type": "string",
                    "minLength": 1,
                    "example": "none"
                },
                "transactionId": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "booking.CreateVoucher": {
            "type": "object",
            "required": [
                "enabled",
                "voucherCode"
            ],
            "properties": {
                "currency": {
                    "type": "string",
                    "minLength": 1,
                    "example": "ZAR"
                },
                "discountValue": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 10000
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "percentageValue": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 55
                },
                "usePercentage": {
                    "type": "boolean",
                    "example": true
                },
                "voucherCode": {
                    "type": "string",
                    "minLength": 1,
                    "example": "JAN2023"
                }
            }
        },
        "booking.EventToCreate": {
            "type": "object",
            "required": [
                "bookingState",
                "name",
                "uid"
            ],
            "properties": {
                "bookingState": {
                    "type": "string",
                    "enum": [
                        "created",
                        "moved",
                        "approved",
                        "paid",
                        "unpaid",
                        "started",
                        "completed",
                        "cancelled",
                        "deleted",
                        "rescheduled",
                        "commented",
                        "custom"
                    ],
                    "example": "paid"
                },
                "comment": {
                    "type": "string",
                    "example": "I was here."
                },
                "imageUrl": {
                    "type": "string",
                    "example": "I was here."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Jiltons Reception"
                },
                "uid": {
                    "type": "string",
                    "minLength": 1,
                    "example": "XyPEBUq6DfTEEK288TzARnWwVoH2"
                }
            }
        },
        "booking.MoveBooking": {
            "type": "object",
            "required": [
                "afterBooking"
            ],
            "properties": {
                "afterBooking": {
                    "$ref": "#/definitions/booking.UpdateBooking"
                },
                "afterXeroInvoice": {
                    "$ref": "#/definitions/xero.CreateXeroInvoice"
                },
                "beforeXeroInvoice": {
                    "$ref": "#/definitions/xero.CreateXeroInvoice"
                }
            }
        },
        "booking.OrderSnapshot": {
            "type": "object",
            "required": [
                "petSnapshot"
            ],
            "properties": {
                "additionalInfo": {
                    "type": "string",
                    "example": "He is partially blind, please take care."
                },
                "extraServicesSnapshot": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.ServiceDTOSnapshot"
                    }
                },
                "groomServiceSnapshot": {
                    "$ref": "#/definitions/service.ServiceDTOSnapshot"
                },
                "petSnapshot": {
                    "type": "object"
                }
            }
        },
        "booking.PaymentInfo": {
            "type": "object",
            "properties": {
                "eftReference": {
                    "type": "string",
                    "example": "232-813adc32"
                },
                "paid": {
                    "type": "boolean",
                    "example": false
                },
                "parlorPaymentType": {
                    "type": "string",
                    "enum": [
                        "cash",
                        "card"
                    ],
                    "example": "cash"
                },
                "preferredPaymentOption": {
                    "type": "string",
                    "enum": [
                        "cash",
                        "card",
                        "payAtParlor",
                        "eft"
                    ],
                    "example": "card"
                },
                "reference": {
                    "type": "string",
                    "example": "none"
                },
                "transactionId": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "booking.RescheduleBooking": {
            "type": "object",
            "properties": {
                "bookedFor": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "bookedForTime": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "bookingStates": {
                    "$ref": "#/definitions/booking.UpdateBookingStates"
                },
                "shiftSnapshot": {
                    "$ref": "#/definitions/schedule.ShiftSnapshot"
                }
            }
        },
        "booking.UpdateBooking": {
            "type": "object",
            "properties": {
                "addedOrderSnapshots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.UpdateOrderSnapshot"
                    }
                },
                "addedOrders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.UpdateBookingOrder"
                    }
                },
                "address": {
                    "$ref": "#/definitions/address.BookingAddress"
                },
                "approved": {
                    "type": "boolean",
                    "example": false
                },
                "bookedFor": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "bookedForTime": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "bookingNumber": {
                    "type": "integer",
                    "example": 3
                },
                "bookingState": {
                    "type": "string",
                    "enum": [
                        "created",
                        "moved",
                        "approved",
                        "paid",
                        "unpaid",
                        "started",
                        "completed",
                        "cancelled",
                        "deleted",
                        "rescheduled",
                        "commented"
                    ],
                    "example": "paid"
                },
                "bookingStates": {
                    "$ref": "#/definitions/booking.UpdateBookingStates"
                },
                "customerId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.BookingEvent"
                    }
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.BookingMessage"
                    }
                },
                "notes": {
                    "type": "string",
                    "example": "Not completed because customer was nowhere to be found"
                },
                "orderSnapshots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.OrderSnapshot"
                    }
                },
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.UpdateBookingOrder"
                    }
                },
                "paymentInfo": {
                    "$ref": "#/definitions/booking.UpdatePaymentInfo"
                },
                "reminders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.UpdateBookingReminder"
                    }
                },
                "removedOrderSnapshots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.UpdateOrderSnapshot"
                    }
                },
                "removedOrders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.UpdateBookingOrder"
                    }
                },
                "scheduleType": {
                    "type": "string",
                    "enum": [
                        "intaketime",
                        "timeblock"
                    ],
                    "example": "intaketime"
                },
                "shiftSnapshot": {
                    "$ref": "#/definitions/schedule.ShiftSnapshot"
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "transportMode": {
                    "type": "string",
                    "minLength": 1,
                    "example": "collectAndDeliver"
                },
                "transportSnapshot": {
                    "$ref": "#/definitions/transport.TransportSnapshot"
                },
                "voucher": {
                    "$ref": "#/definitions/booking.ChangeBookingVoucherData"
                },
                "xeroInvoiceId": {
                    "type": "string",
                    "minLength": 1,
                    "example": ""
                },
                "xeroInvoiceNumber": {
                    "type": "string",
                    "minLength": 1,
                    "example": ""
                },
                "xeroPaymentId": {
                    "type": "string",
                    "minLength": 1,
                    "example": ""
                }
            }
        },
        "booking.UpdateBookingOrder": {
            "type": "object",
            "required": [
                "extraServicesIds"
            ],
            "properties": {
                "additionalInfo": {
                    "type": "string",
                    "maxLength": 400,
                    "minLength": 1,
                    "example": "He is partially blind, please take care."
                },
                "extraServicesIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['568c28fffc4be30d44d0398e']"
                    ]
                },
                "groomServiceId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "petId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                }
            }
        },
        "booking.UpdateBookingOrders": {
            "type": "object",
            "required": [
                "orderSnapshots",
                "orders"
            ],
            "properties": {
                "addedOrderSnapshots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.UpdateOrderSnapshot"
                    }
                },
                "addedOrders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.UpdateBookingOrder"
                    }
                },
                "bookedForTime": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "orderSnapshots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.UpdateOrderSnapshot"
                    }
                },
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.UpdateBookingOrder"
                    }
                },
                "removedOrderSnapshots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.UpdateOrderSnapshot"
                    }
                },
                "removedOrders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/booking.UpdateBookingOrder"
                    }
                },
                "shiftSnapshot": {
                    "$ref": "#/definitions/schedule.ShiftSnapshot"
                },
                "xeroInvoice": {
                    "$ref": "#/definitions/xero.UpdateXeroInvoice"
                }
            }
        },
        "booking.UpdateBookingReminder": {
            "type": "object",
            "required": [
                "scheduledAt"
            ],
            "properties": {
                "jobId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "scheduledAt": {
                    "type": "string"
                }
            }
        },
        "booking.UpdateBookingStates": {
            "type": "object",
            "properties": {
                "arrived": {
                    "type": "boolean",
                    "example": false
                },
                "cancelled": {
                    "type": "boolean",
                    "example": false
                },
                "collected": {
                    "type": "boolean",
                    "example": false
                },
                "completed": {
                    "type": "boolean",
                    "example": false
                },
                "confirmed": {
                    "type": "boolean",
                    "example": false
                },
                "created": {
                    "type": "boolean",
                    "example": true
                },
                "delivered": {
                    "type": "boolean",
                    "example": false
                },
                "finished": {
                    "type": "boolean",
                    "example": false
                },
                "moved": {
                    "type": "boolean",
                    "example": true
                },
                "rescheduled": {
                    "type": "boolean",
                    "example": false
                },
                "started": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "booking.UpdateOrderSnapshot": {
            "type": "object",
            "required": [
                "petSnapshot"
            ],
            "properties": {
                "additionalInfo": {
                    "type": "string",
                    "example": "He is partially blind, please take care."
                },
                "extraServicesSnapshot": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.ServiceDTOSnapshot"
                    }
                },
                "groomServiceSnapshot": {
                    "$ref": "#/definitions/service.ServiceDTOSnapshot"
                },
                "petSnapshot": {
                    "type": "object"
                }
            }
        },
        "booking.UpdatePaymentInfo": {
            "type": "object",
            "properties": {
                "eftReference": {
                    "type": "string",
                    "minLength": 1,
                    "example": "232-813adc32"
                },
                "paid": {
                    "type": "boolean",
                    "example": false
                },
                "parlorPaymentType": {
                    "type": "string",
                    "enum": [
                        "cash",
                        "card"
                    ],
                    "example": "cash"
                },
                "preferredPaymentOption": {
                    "type": "string",
                    "enum": [
                        "cash",
                        "card",
                        "payAtParlor",
                        "eft"
                    ],
                    "example": "card"
                },
                "reference": {
                    "type": "string",
                    "minLength": 1,
                    "example": "none"
                },
                "transactionId": {
                    "type": "integer",
                    "example": 896678587
                }
            }
        },
        "booking.Voucher": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string",
                    "example": "ZAR"
                },
                "discountValue": {
                    "type": "integer",
                    "example": 10000
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "percentageValue": {
                    "type": "integer",
                    "example": 55
                },
                "usePercentage": {
                    "type": "boolean",
                    "example": true
                },
                "voucherCode": {
                    "type": "string",
                    "example": "JAN2023"
                }
            }
        },
        "breed.Breed": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "creationType": {
                    "type": "string",
                    "example": "original"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "Affenpinscher"
                },
                "uniqueName": {
                    "type": "string",
                    "example": "affenpinscher"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "url": {
                    "type": "string",
                    "example": "https://en.wikipedia.org/wiki/Affenpinscher"
                }
            }
        },
        "breed.CreateBreed": {
            "type": "object",
            "required": [
                "creationType",
                "name",
                "uniqueName",
                "url"
            ],
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "creationType": {
                    "type": "string",
                    "enum": [
                        "original",
                        "custom"
                    ],
                    "example": "original"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "Affenpinscher"
                },
                "uniqueName": {
                    "type": "string",
                    "example": "affenpinscher"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "url": {
                    "type": "string",
                    "example": "https://en.wikipedia.org/wiki/Affenpinscher"
                }
            }
        },
        "breed.UpdateBreed": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Affenpinscher"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "url": {
                    "type": "string",
                    "example": "https://en.wikipedia.org/wiki/Affenpinscher"
                }
            }
        },
        "claim.Claim": {
            "type": "object",
            "properties": {
                "customerTenantIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "employeeTenantId": {
                    "type": "string"
                },
                "isAdmin": {
                    "type": "boolean"
                },
                "isCustomer": {
                    "type": "boolean"
                },
                "isEmployee": {
                    "type": "boolean"
                },
                "isGroomer": {
                    "type": "boolean"
                },
                "isOwner": {
                    "type": "boolean"
                },
                "isReception": {
                    "type": "boolean"
                },
                "isTaxi": {
                    "type": "boolean"
                },
                "teamIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "config.CreateFirebaseConfig": {
            "type": "object",
            "required": [
                "apiKey",
                "appId",
                "appType",
                "authDomain",
                "locationId",
                "measurementId",
                "messagingSenderId",
                "projectId",
                "storageBucket"
            ],
            "properties": {
                "apiKey": {
                    "type": "string",
                    "example": ""
                },
                "appId": {
                    "type": "string",
                    "example": ""
                },
                "appType": {
                    "type": "string",
                    "enum": [
                        "webApps",
                        "androidApps",
                        "iosApps"
                    ]
                },
                "authDomain": {
                    "type": "string",
                    "example": ""
                },
                "databaseUrl": {
                    "type": "string",
                    "example": ""
                },
                "locationId": {
                    "type": "string",
                    "example": ""
                },
                "measurementId": {
                    "type": "string",
                    "example": ""
                },
                "messagingSenderId": {
                    "type": "string",
                    "example": ""
                },
                "projectId": {
                    "type": "string",
                    "example": ""
                },
                "storageBucket": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "config.FirebaseConfig": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "example": ""
                },
                "appId": {
                    "type": "string",
                    "example": ""
                },
                "authDomain": {
                    "type": "string",
                    "example": ""
                },
                "databaseUrl": {
                    "type": "string",
                    "example": ""
                },
                "locationId": {
                    "type": "string",
                    "example": ""
                },
                "measurementId": {
                    "type": "string",
                    "example": ""
                },
                "messagingSenderId": {
                    "type": "string",
                    "example": ""
                },
                "projectId": {
                    "type": "string",
                    "example": ""
                },
                "storageBucket": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "config.UpdateFirebaseConfig": {
            "type": "object",
            "required": [
                "apiKey",
                "appId",
                "authDomain",
                "locationId",
                "measurementId",
                "messagingSenderId",
                "projectId",
                "storageBucket"
            ],
            "properties": {
                "apiKey": {
                    "type": "string",
                    "example": ""
                },
                "appId": {
                    "type": "string",
                    "example": ""
                },
                "authDomain": {
                    "type": "string",
                    "example": ""
                },
                "databaseUrl": {
                    "type": "string",
                    "example": ""
                },
                "locationId": {
                    "type": "string",
                    "example": ""
                },
                "measurementId": {
                    "type": "string",
                    "example": ""
                },
                "messagingSenderId": {
                    "type": "string",
                    "example": ""
                },
                "projectId": {
                    "type": "string",
                    "example": ""
                },
                "storageBucket": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "custom_object_type.CreateCustomObjectType": {
            "type": "object",
            "required": [
                "name",
                "namePlural"
            ],
            "properties": {
                "apiCreateOnly": {
                    "type": "boolean",
                    "example": false
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "description": {
                    "type": "string",
                    "example": "Information about products we sell."
                },
                "editableWithRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "cot_abcdef123456"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Product"
                },
                "namePlural": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Products"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "custom_object_type.CustomObjectType": {
            "type": "object",
            "required": [
                "name",
                "namePlural"
            ],
            "properties": {
                "apiCreateOnly": {
                    "type": "boolean",
                    "example": false
                },
                "backReferenceFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.CustomField"
                    }
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "description": {
                    "type": "string",
                    "example": "Information about products we sell."
                },
                "editableWithRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.CustomField"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "cot_abcdef123456"
                },
                "name": {
                    "type": "string",
                    "example": "Product"
                },
                "namePlural": {
                    "type": "string",
                    "example": "Products"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "custom_object_type.UpdateCustomObjectType": {
            "type": "object",
            "properties": {
                "apiCreateOnly": {
                    "type": "boolean",
                    "example": true
                },
                "description": {
                    "type": "string",
                    "example": "Updated product information."
                },
                "editableWithRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Product"
                },
                "namePlural": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Products"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-06T00:00:00.000Z"
                }
            }
        },
        "customer.BookingCustomer": {
            "type": "object",
            "properties": {
                "addressCount": {
                    "type": "integer",
                    "example": 4
                },
                "authorizationCount": {
                    "type": "integer",
                    "example": 4
                },
                "bookingCount": {
                    "type": "integer",
                    "example": 4
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "defaultAuthorization": {
                    "$ref": "#/definitions/customer.CustomerAuthorization"
                },
                "defaultAuthorizationId": {
                    "type": "string"
                },
                "defaultEftReference": {
                    "type": "string",
                    "example": "CUS-5543f324"
                },
                "email": {
                    "type": "string",
                    "example": "jydy@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "Jay"
                },
                "gravatarUrl": {
                    "type": "string",
                    "example": "https://gravatar.com/avatar/d0e9201191872ec2ea8c5916df838e7d?d=retro"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "isDifficult": {
                    "type": "boolean",
                    "example": false
                },
                "isLatePayer": {
                    "type": "boolean",
                    "example": false
                },
                "isXeroDataStale": {
                    "type": "boolean",
                    "example": false
                },
                "lastName": {
                    "type": "string",
                    "example": "Day"
                },
                "petCount": {
                    "type": "integer",
                    "example": 4
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+27654324343"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://shared-mybusinessapp.azureedge.net/images/mSI8TgB90dU0wd42WkwZdEQy9vL2-dd43f0be-9dcc-4326-87f1-beea52aed3d1.jpg"
                },
                "teamCustomerData": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/customer.TeamCustomerData"
                    }
                },
                "teamsAssociatedWith": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[]"
                    ]
                },
                "uid": {
                    "type": "string",
                    "example": "gSI5TgB90dU0wd42WkwZdEQy9vL2"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "useGravatar": {
                    "type": "boolean",
                    "example": false
                },
                "xeroContactId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "xeroContactName": {
                    "type": "string",
                    "example": "Jay Day"
                }
            }
        },
        "customer.CreateCustomer": {
            "type": "object",
            "properties": {
                "defaultAuthorizationId": {
                    "type": "string",
                    "example": "62f298042b32093cf600963f"
                },
                "defaultEftReference": {
                    "type": "string",
                    "example": "CUS-5543f324"
                },
                "email": {
                    "type": "string",
                    "example": "info@mppdemo.co.za"
                },
                "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MyPetParlor"
                },
                "gravatarUrl": {
                    "type": "string",
                    "example": "https://gravatar.com/avatar/fe1dad0128df2f64a8e50ba221fff1d1?d=retro"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "isDifficult": {
                    "type": "boolean",
                    "example": false
                },
                "isLatePayer": {
                    "type": "boolean",
                    "example": false
                },
                "isXeroDataStale": {
                    "type": "boolean",
                    "example": false
                },
                "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Demo"
                },
                "password": {
                    "type": "string",
                    "example": "password12345678"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+27654324343"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://shared-mybusinessapp.azureedge.net/images/mSI8TgB90dU0wd42WkwZdEQy9vL2-dd43f0be-9dcc-4326-87f1-beea52aed3d1.jpg"
                },
                "teamsAssociatedWith": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[]"
                    ]
                },
                "uid": {
                    "type": "string",
                    "example": "gSI5TgB90dU0wd42WkwZdEQy9vL2"
                },
                "useGravatar": {
                    "type": "boolean",
                    "example": false
                },
                "xeroContactId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "xeroContactName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Jay Day"
                }
            }
        },
        "customer.Customer": {
            "type": "object",
            "properties": {
                "addressCount": {
                    "type": "integer",
                    "example": 4
                },
                "authorizationCount": {
                    "type": "integer",
                    "example": 4
                },
                "bookingCount": {
                    "type": "integer",
                    "example": 4
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "customFieldValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.CustomFieldValue"
                    }
                },
                "defaultAuthorization": {
                    "$ref": "#/definitions/customer.CustomerAuthorization"
                },
                "defaultAuthorizationId": {
                    "type": "string"
                },
                "defaultEftReference": {
                    "type": "string",
                    "example": "CUS-5543f324"
                },
                "email": {
                    "type": "string",
                    "example": "jydy@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "Jay"
                },
                "gravatarUrl": {
                    "type": "string",
                    "example": "https://gravatar.com/avatar/d0e9201191872ec2ea8c5916df838e7d?d=retro"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "isDifficult": {
                    "type": "boolean",
                    "example": false
                },
                "isLatePayer": {
                    "type": "boolean",
                    "example": false
                },
                "isXeroDataStale": {
                    "type": "boolean",
                    "example": false
                },
                "lastName": {
                    "type": "string",
                    "example": "Day"
                },
                "petCount": {
                    "type": "integer",
                    "example": 4
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+27654324343"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://shared-mybusinessapp.azureedge.net/images/mSI8TgB90dU0wd42WkwZdEQy9vL2-dd43f0be-9dcc-4326-87f1-beea52aed3d1.jpg"
                },
                "teamCustomerData": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/customer.TeamCustomerData"
                    }
                },
                "teamsAssociatedWith": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[]"
                    ]
                },
                "uid": {
                    "type": "string",
                    "example": "gSI5TgB90dU0wd42WkwZdEQy9vL2"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "useGravatar": {
                    "type": "boolean",
                    "example": false
                },
                "xeroContactId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "xeroContactName": {
                    "type": "string",
                    "example": "Jay Day"
                }
            }
        },
        "customer.CustomerAuthorization": {
            "type": "object",
            "properties": {
                "accountName": {
                    "type": "string",
                    "example": "Bank Card"
                },
                "authorizationCode": {
                    "type": "string",
                    "example": "AUTH_s5nditseka"
                },
                "bank": {
                    "type": "string",
                    "example": "TEST BANK"
                },
                "bin": {
                    "type": "string",
                    "example": "408408"
                },
                "brand": {
                    "type": "string",
                    "example": "visa"
                },
                "cardType": {
                    "type": "string",
                    "example": "visa"
                },
                "channel": {
                    "type": "string",
                    "example": "card"
                },
                "countryCode": {
                    "type": "string",
                    "example": "NG"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "customerId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "expiryMonth": {
                    "type": "string",
                    "example": "09"
                },
                "expiryYear": {
                    "type": "string",
                    "example": "2025"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "last4": {
                    "type": "string",
                    "example": "4081"
                },
                "reusable": {
                    "type": "boolean",
                    "example": true
                },
                "signature": {
                    "type": "string",
                    "example": "SIG_qdUrNo5EyBmVbMIq6J0v"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "customer.TeamCustomerData": {
            "type": "object",
            "properties": {
                "authorizationCount": {
                    "type": "integer",
                    "example": 4
                },
                "bookingCount": {
                    "type": "integer",
                    "example": 4
                },
                "defaultAuthorization": {
                    "$ref": "#/definitions/customer.CustomerAuthorization"
                },
                "defaultAuthorizationId": {
                    "type": "string"
                },
                "isDifficult": {
                    "type": "boolean",
                    "example": false
                },
                "isLatePayer": {
                    "type": "boolean",
                    "example": false
                },
                "isXeroDataStale": {
                    "type": "boolean",
                    "example": false
                },
                "xeroContactId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "xeroContactName": {
                    "type": "string",
                    "example": "Jay Day"
                }
            }
        },
        "customer.UpdateCustomer": {
            "type": "object",
            "properties": {
                "defaultAuthorizationId": {
                    "type": "string",
                    "example": "62f298042b32093cf600963f"
                },
                "defaultEftReference": {
                    "type": "string",
                    "example": "CUS-5543f324"
                },
                "email": {
                    "type": "string",
                    "example": "info@mppdemo.co.za"
                },
                "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MyPetParlor"
                },
                "isDifficult": {
                    "type": "boolean",
                    "example": false
                },
                "isLatePayer": {
                    "type": "boolean",
                    "example": false
                },
                "isXeroDataStale": {
                    "type": "boolean",
                    "example": false
                },
                "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Demo"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+27654324343"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://url-to-photo.com"
                },
                "teamCustomerData": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/customer.UpdateTeamCustomerData"
                    }
                },
                "uid": {
                    "type": "string",
                    "example": "gSI5TgB90dU0wd42WkwZdEQy9vL2"
                },
                "useGravatar": {
                    "type": "boolean",
                    "example": false
                },
                "xeroContactId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "xeroContactName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Jay Day"
                }
            }
        },
        "customer.UpdateTeamCustomerData": {
            "type": "object",
            "properties": {
                "authorizationCount": {
                    "type": "integer",
                    "example": 4
                },
                "bookingCount": {
                    "type": "integer",
                    "example": 4
                },
                "defaultAuthorizationId": {
                    "type": "string"
                },
                "isDifficult": {
                    "type": "boolean",
                    "example": false
                },
                "isLatePayer": {
                    "type": "boolean",
                    "example": false
                },
                "isXeroDataStale": {
                    "type": "boolean",
                    "example": false
                },
                "xeroContactId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "xeroContactName": {
                    "type": "string",
                    "example": "Jay Day"
                }
            }
        },
        "document.CreateDocument": {
            "type": "object",
            "required": [
                "documentType",
                "name",
                "referenceId",
                "referenceType"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "example": "\u003ch1\u003eRefund Policy\u003c/h1\u003e\u003cp\u003eOur refund policy is very simple. If you are not satisfied with our services, you can request a refund within 30 days of purchase.\u003c/p\u003e"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "documentType": {
                    "type": "string",
                    "example": "refund_policy"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "Refund Policy"
                },
                "referenceId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "mobile"
                },
                "referenceType": {
                    "type": "string",
                    "enum": [
                        "organisation",
                        "profile",
                        "team"
                    ],
                    "example": "profile"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "document.Document": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "\u003ch1\u003eRefund Policy\u003c/h1\u003e\u003cp\u003eOur refund policy is very simple. If you are not satisfied with our services, you can request a refund within 30 days of purchase.\u003c/p\u003e"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "documentType": {
                    "type": "string",
                    "example": "refund_policy"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "Refund Policy"
                },
                "referenceId": {
                    "type": "string",
                    "example": "mobile"
                },
                "referenceType": {
                    "type": "string",
                    "example": "profile"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "document.GenerateRefundPolicyContent": {
            "type": "object",
            "required": [
                "appName",
                "companyAddress",
                "companyName",
                "lastUpdated",
                "validation"
            ],
            "properties": {
                "appName": {
                    "type": "string",
                    "example": "My App"
                },
                "companyAddress": {
                    "type": "string",
                    "example": "123 Main St, Falls, WC 3342"
                },
                "companyName": {
                    "type": "string",
                    "example": "My Company"
                },
                "email": {
                    "type": "string",
                    "example": "refunds@email.com"
                },
                "lastUpdated": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "maxDaysToCancel": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 30
                },
                "maxDaysToReimburse": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 30
                },
                "maxDaysToReturn": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 30
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "returnAddress": {
                    "type": "string",
                    "example": "123 Main St, Falls, WC 3342"
                },
                "validation": {
                    "type": "object",
                    "properties": {
                        "requireEmail": {
                            "type": "boolean",
                            "example": true
                        },
                        "requirePhone": {
                            "type": "boolean",
                            "example": true
                        }
                    }
                }
            }
        },
        "document.GenerateTermsContent": {
            "type": "object",
            "required": [
                "businessName",
                "cancellationFee",
                "cancellationHours",
                "complaintWindowHours",
                "depositAmount",
                "lastUpdated",
                "paymentMethods",
                "validation"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "example": "123 Main St, Falls, WC 3342"
                },
                "businessName": {
                    "type": "string",
                    "example": "My Company"
                },
                "cancellationFee": {
                    "type": "string",
                    "example": "$25"
                },
                "cancellationHours": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 24
                },
                "complaintWindowHours": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 48
                },
                "depositAmount": {
                    "type": "string",
                    "example": "$50"
                },
                "email": {
                    "type": "string",
                    "example": "refunds@email.com"
                },
                "emergencyVet": {
                    "type": "string",
                    "example": "Animal Hospital"
                },
                "lastUpdated": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "paymentMethods": {
                    "type": "string",
                    "example": "Credit Card, Cash"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "validation": {
                    "type": "object",
                    "properties": {
                        "requireAddress": {
                            "type": "boolean",
                            "example": true
                        },
                        "requireEmail": {
                            "type": "boolean",
                            "example": true
                        },
                        "requirePhone": {
                            "type": "boolean",
                            "example": true
                        }
                    }
                }
            }
        },
        "document.UpdateDocument": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "\u003ch1\u003eRefund Policy\u003c/h1\u003e\u003cp\u003eOur refund policy is very simple. If you are not satisfied with our services, you can request a refund within 30 days of purchase.\u003c/p\u003e"
                },
                "name": {
                    "type": "string",
                    "example": "Refund Policy"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "employee.CreateEmployee": {
            "type": "object",
            "required": [
                "roles"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "info@mppdemo.co.za"
                },
                "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MyPetParlor"
                },
                "gravatarUrl": {
                    "type": "string",
                    "example": "https://gravatar.com/avatar/fe1dad0128df2f64a8e50ba221fff1d1?d=retro"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Demo"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password12345678"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+27654324343"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://shared-mybusinessapp.azureedge.net/images/mSI8TgB90dU0wd42WkwZdEQy9vL2-dd43f0be-9dcc-4326-87f1-beea52aed3d1.jpg"
                },
                "roles": {
                    "$ref": "#/definitions/auth.CreateEmployeeRoles"
                },
                "teamIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "example": "Sr. Vice President"
                },
                "uid": {
                    "type": "string",
                    "example": "gSI5TgB90dU0wd42WkwZdEQy9vL2"
                }
            }
        },
        "employee.Employee": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "email": {
                    "type": "string",
                    "example": "jydy@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "Jay"
                },
                "gravatarUrl": {
                    "type": "string",
                    "example": "https://gravatar.com/avatar/d0e9201191872ec2ea8c5916df838e7d?d=retro"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "inviteStatus": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "accepted",
                        "declined"
                    ],
                    "example": "pending"
                },
                "lastName": {
                    "type": "string",
                    "example": "Day"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+27654324343"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://shared-mybusinessapp.azureedge.net/images/mSI8TgB90dU0wd42WkwZdEQy9vL2-dd43f0be-9dcc-4326-87f1-beea52aed3d1.jpg"
                },
                "roles": {
                    "$ref": "#/definitions/auth.EmployeeRoles"
                },
                "teamIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "example": "Sr. Vice President"
                },
                "uid": {
                    "type": "string",
                    "example": "gSI5TgB90dU0wd42WkwZdEQy9vL2"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "useGravatar": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "employee.UpdateEmployee": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "info@mppdemo.co.za"
                },
                "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MyPetParlor"
                },
                "inviteStatus": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "accepted",
                        "declined"
                    ],
                    "example": "pending"
                },
                "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Demo"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+27654324343"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://url-to-photo.com"
                },
                "roles": {
                    "$ref": "#/definitions/auth.UpdateEmployeeRoles"
                },
                "teamIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "example": "Sr. Vice President"
                },
                "uid": {
                    "type": "string",
                    "example": "gSI5TgB90dU0wd42WkwZdEQy9vL2"
                },
                "useGravatar": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "employee.UpdateEmployeeTeams": {
            "type": "object",
            "properties": {
                "teamIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "entities.CreateCustomField": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "acceptsMultipleValues": {
                    "type": "boolean",
                    "example": false
                },
                "associations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.CreateCustomFieldAssociation"
                    }
                },
                "choices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "description": {
                    "type": "string",
                    "maxLength": 280,
                    "example": "This customer is known to pay late."
                },
                "editableWithRoles": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "Late Payer"
                },
                "referenceType": {
                    "type": "string",
                    "enum": [
                        "booking",
                        "customer",
                        "shared"
                    ],
                    "example": "customer"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "choices",
                        "date",
                        "datetime",
                        "number",
                        "text",
                        "textarea",
                        "user",
                        "custom_object",
                        "hidden"
                    ],
                    "example": "text"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "entities.CreateCustomFieldAssociation": {
            "type": "object",
            "required": [
                "referenceType"
            ],
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "editableWithRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "referenceType": {
                    "type": "string",
                    "example": "customer"
                },
                "required": {
                    "type": "boolean",
                    "example": true
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "entities.CreateCustomFieldValue": {
            "type": "object",
            "required": [
                "customFieldId",
                "referenceId",
                "referenceType"
            ],
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "customFieldId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "referenceId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "referenceType": {
                    "type": "string",
                    "example": "customer"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "valueDate": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "valueDateTime": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "valueJson": {
                    "type": "object"
                },
                "valueNumber": {
                    "type": "number",
                    "example": 123.45
                },
                "valueText": {
                    "type": "string",
                    "example": "Some Text"
                }
            }
        },
        "entities.CreateJob": {
            "type": "object",
            "required": [
                "firebaseTenantId",
                "googleStampId",
                "id",
                "jobType",
                "priority"
            ],
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "firebaseTenantId": {
                    "type": "string",
                    "example": "mppdemo-5thak"
                },
                "googleStampId": {
                    "type": "string",
                    "example": "google-stamp0"
                },
                "id": {
                    "type": "string",
                    "example": "job0"
                },
                "jobData": {
                    "type": "string",
                    "example": "{\"key\":\"value\"}"
                },
                "jobType": {
                    "type": "string",
                    "example": "reminder"
                },
                "priority": {
                    "type": "integer",
                    "example": 0
                },
                "referenceId": {
                    "type": "string",
                    "example": "323941029f2243"
                },
                "referenceType": {
                    "type": "string",
                    "example": "booking"
                },
                "scheduledAt": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "entities.CreateVisibilityCondition": {
            "type": "object",
            "required": [
                "expectedValue",
                "operator"
            ],
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "customFieldId": {
                    "type": "string",
                    "example": "field_123"
                },
                "expectedValue": {
                    "type": "object"
                },
                "operator": {
                    "type": "string",
                    "enum": [
                        "equals",
                        "not_equals",
                        "is_null",
                        "is_not_null",
                        "in",
                        "not_in"
                    ],
                    "example": "equals"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "entities.CreateVisibilityRule": {
            "type": "object",
            "required": [
                "behaviour",
                "conditionGroupType",
                "referenceId",
                "referenceType"
            ],
            "properties": {
                "behaviour": {
                    "type": "string",
                    "example": "hide"
                },
                "conditionGroupType": {
                    "type": "string",
                    "enum": [
                        "AND",
                        "OR"
                    ],
                    "example": "AND"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.CreateVisibilityRuleConditionGroup"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "rule_123"
                },
                "referenceId": {
                    "type": "string",
                    "example": "ref_123"
                },
                "referenceType": {
                    "type": "string",
                    "example": "service"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "entities.CreateVisibilityRuleConditionGroup": {
            "type": "object",
            "required": [
                "conditionGroupType"
            ],
            "properties": {
                "conditionGroupType": {
                    "type": "string",
                    "enum": [
                        "AND",
                        "OR"
                    ],
                    "example": "AND"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.CreateVisibilityCondition"
                    }
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.CreateVisibilityRuleConditionGroup"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "condition_group_123"
                }
            }
        },
        "entities.CustomField": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "acceptsMultipleValues": {
                    "type": "boolean",
                    "example": false
                },
                "associations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.CustomFieldAssociation"
                    }
                },
                "choices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "description": {
                    "type": "string",
                    "maxLength": 280,
                    "example": "This customer is known to pay late."
                },
                "editableWithRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "Late Payer"
                },
                "referenceType": {
                    "type": "string",
                    "example": "customer"
                },
                "type": {
                    "type": "string",
                    "example": "text"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "entities.CustomFieldAssociation": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "editableWithRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "referenceType": {
                    "type": "string",
                    "example": "customer"
                },
                "required": {
                    "type": "boolean",
                    "example": true
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "entities.CustomFieldSchema": {
            "type": "object",
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.CustomField"
                    }
                },
                "referenceType": {
                    "type": "string",
                    "example": "customer"
                }
            }
        },
        "entities.CustomFieldValue": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "customFieldId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "referenceId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "referenceType": {
                    "type": "string",
                    "example": "customer"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "valueDate": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "valueDateTime": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "valueJson": {
                    "type": "object"
                },
                "valueNumber": {
                    "type": "number",
                    "example": 123.45
                },
                "valueText": {
                    "type": "string",
                    "example": "Some Text"
                }
            }
        },
        "entities.JSONResultFailure": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "entities.JSONResultSuccess": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "metadata": {},
                "success": {
                    "type": "boolean"
                }
            }
        },
        "entities.Job": {
            "type": "object",
            "required": [
                "firebaseTenantId",
                "googleStampId",
                "status"
            ],
            "properties": {
                "attempts": {
                    "type": "integer",
                    "example": 0
                },
                "createdAt": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "errorDetails": {
                    "type": "string",
                    "example": "error"
                },
                "firebaseTenantId": {
                    "type": "string",
                    "example": "mppdemo-5thak"
                },
                "googleStampId": {
                    "type": "string",
                    "example": "google-stamp0"
                },
                "id": {
                    "type": "string",
                    "example": "job0"
                },
                "jobData": {
                    "type": "string",
                    "example": "{\"key\":\"value\"}"
                },
                "jobType": {
                    "type": "string",
                    "example": "reminder"
                },
                "lastAttemptedAt": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "messageSequenceNumber": {
                    "type": "integer",
                    "example": 0
                },
                "priority": {
                    "type": "integer",
                    "example": 0
                },
                "referenceId": {
                    "type": "string",
                    "example": "323941029f2243"
                },
                "referenceType": {
                    "type": "string",
                    "example": "booking"
                },
                "scheduledAt": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "running",
                        "completed",
                        "failed"
                    ],
                    "example": "pending"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                }
            }
        },
        "entities.UpdateCustomField": {
            "type": "object",
            "properties": {
                "acceptsMultipleValues": {
                    "type": "boolean",
                    "example": false
                },
                "choices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "maxLength": 280,
                    "example": "This customer is known to pay late."
                },
                "editableWithRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "example": "Late Payer"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "choices",
                        "date",
                        "datetime",
                        "number",
                        "text",
                        "textarea",
                        "user",
                        "custom_object",
                        "hidden"
                    ],
                    "example": "text"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "entities.UpdateCustomFieldValue": {
            "type": "object",
            "properties": {
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "valueDate": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "valueDateTime": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "valueJson": {
                    "type": "object"
                },
                "valueNumber": {
                    "type": "number",
                    "example": 123.45
                },
                "valueText": {
                    "type": "string",
                    "example": "Some Text"
                }
            }
        },
        "entities.UpdateJob": {
            "type": "object",
            "properties": {
                "attempts": {
                    "type": "integer",
                    "example": 0
                },
                "errorDetails": {
                    "type": "string",
                    "example": "error"
                },
                "jobData": {
                    "type": "string",
                    "example": "{\"key\":\"value\"}"
                },
                "lastAttemptedAt": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "priority": {
                    "type": "integer",
                    "example": 0
                },
                "scheduledAt": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "status": {
                    "type": "string",
                    "example": "pending,oneof=pending running completed failed"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "entities.UpdateVisibilityRule": {
            "type": "object",
            "properties": {
                "behaviour": {
                    "type": "string",
                    "example": "hide"
                },
                "conditionGroupType": {
                    "type": "string",
                    "enum": [
                        "AND",
                        "OR"
                    ],
                    "example": "AND"
                },
                "groups": {
                    "description": "Top-level groups",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.CreateVisibilityRuleConditionGroup"
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "entities.VisibilityCondition": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "customFieldId": {
                    "type": "string",
                    "example": "field_123"
                },
                "expectedValue": {
                    "type": "object"
                },
                "id": {
                    "type": "string",
                    "example": "condition_123"
                },
                "operator": {
                    "type": "string",
                    "example": "equals"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "entities.VisibilityRule": {
            "type": "object",
            "properties": {
                "behaviour": {
                    "type": "string",
                    "example": "hide"
                },
                "conditionGroupType": {
                    "type": "string",
                    "example": "AND"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.VisibilityRuleConditionGroup"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "rule_123"
                },
                "referenceId": {
                    "type": "string",
                    "example": "ref_123"
                },
                "referenceType": {
                    "type": "string",
                    "example": "service"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "role1",
                        "role2"
                    ]
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "entities.VisibilityRuleConditionGroup": {
            "type": "object",
            "properties": {
                "conditionGroupType": {
                    "type": "string",
                    "example": "AND"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.VisibilityCondition"
                    }
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.VisibilityRuleConditionGroup"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "condition_group_123"
                },
                "parentGroupId": {
                    "type": "string",
                    "example": "parent_group_456"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "visibilityRuleId": {
                    "description": "Only for top-level groups",
                    "type": "string",
                    "example": "rule_123"
                }
            }
        },
        "exporter.AddressRow": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "streetName": {
                    "type": "string"
                },
                "streetNumber": {
                    "type": "string"
                },
                "suburb": {
                    "type": "string"
                },
                "town": {
                    "type": "string"
                },
                "unitName": {
                    "type": "string"
                },
                "unitNumber": {
                    "type": "string"
                }
            }
        },
        "exporter.BookingRow": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/exporter.AddressRow"
                },
                "bookingDate": {
                    "type": "string"
                },
                "bookingNumber": {
                    "type": "integer"
                },
                "bookingState": {
                    "type": "string"
                },
                "bookingTime": {
                    "type": "string"
                },
                "customerName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "paid": {
                    "type": "string"
                },
                "preferredPaymentOption": {
                    "type": "string"
                },
                "scheduleType": {
                    "type": "string"
                },
                "totalCatPets": {
                    "type": "integer"
                },
                "totalDogPets": {
                    "type": "integer"
                },
                "totalPets": {
                    "type": "integer"
                },
                "totalPrice": {
                    "type": "integer"
                },
                "transport": {
                    "type": "string"
                },
                "transportPrice": {
                    "type": "integer"
                },
                "voucherCode": {
                    "type": "string"
                },
                "voucherPrice": {
                    "type": "integer"
                }
            }
        },
        "exporter.CustomerRow": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastBookingDate": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "totalAddresses": {
                    "type": "integer"
                },
                "totalAuthorisedCards": {
                    "type": "integer"
                },
                "totalBookings": {
                    "type": "integer"
                },
                "totalCatPets": {
                    "type": "integer"
                },
                "totalDogPets": {
                    "type": "integer"
                },
                "totalPets": {
                    "type": "integer"
                }
            }
        },
        "google_cloud_project.CreateProject": {
            "type": "object",
            "required": [
                "displayName",
                "projectId"
            ],
            "properties": {
                "displayName": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 5
                },
                "parent": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                }
            }
        },
        "google_cloud_project.Project": {
            "type": "object",
            "properties": {
                "createTime": {
                    "type": "string"
                },
                "deleteTime": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "etag": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "parent": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "updateTime": {
                    "type": "string"
                }
            }
        },
        "google_cloud_project.UpdateProject": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 5
                }
            }
        },
        "google_identity_platform.CreateIdentityPlatformTenant": {
            "type": "object",
            "required": [
                "displayName"
            ],
            "properties": {
                "allowPasswordSignup": {
                    "type": "boolean"
                },
                "autodeleteAnonymousUsers": {
                    "type": "boolean"
                },
                "disableAuth": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "enableAnonymousUser": {
                    "type": "boolean"
                },
                "enableEmailLinkSignin": {
                    "type": "boolean"
                }
            }
        },
        "google_identity_platform.IdentityPlatformClientConfig": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "firebaseSubdomain": {
                    "type": "string"
                },
                "permissions": {
                    "type": "object",
                    "properties": {
                        "disabledUserDeletion": {
                            "type": "boolean"
                        },
                        "disabledUserSignup": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "google_identity_platform.IdentityPlatformConfig": {
            "type": "object",
            "properties": {
                "authorizedDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "autodeleteAnonymousUsers": {
                    "type": "boolean"
                },
                "client": {
                    "$ref": "#/definitions/google_identity_platform.IdentityPlatformClientConfig"
                },
                "emailPrivacy": {
                    "$ref": "#/definitions/google_identity_platform.IdentityPlatformEmailPrivacyConfig"
                },
                "mfa": {
                    "$ref": "#/definitions/google_identity_platform.IdentityPlatformMfaConfig"
                },
                "monitoring": {
                    "$ref": "#/definitions/google_identity_platform.IdentityPlatformMonitoringConfig"
                },
                "multiTenant": {
                    "$ref": "#/definitions/google_identity_platform.IdentityPlatformMultiTenantConfig"
                },
                "name": {
                    "type": "string"
                },
                "quota": {
                    "$ref": "#/definitions/google_identity_platform.IdentityPlatformQuotaConfig"
                }
            }
        },
        "google_identity_platform.IdentityPlatformEmailPrivacyConfig": {
            "type": "object",
            "properties": {
                "enableImprovedEmailPrivacy": {
                    "type": "boolean"
                }
            }
        },
        "google_identity_platform.IdentityPlatformMfaConfig": {
            "type": "object",
            "properties": {
                "enabledProviders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "providerConfigs": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "state": {
                                "type": "string"
                            },
                            "totpProviderConfig": {
                                "type": "object",
                                "properties": {
                                    "adjacentIntervals": {
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "google_identity_platform.IdentityPlatformMonitoringConfig": {
            "type": "object",
            "properties": {
                "requestLogging": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "google_identity_platform.IdentityPlatformMultiTenantConfig": {
            "type": "object",
            "properties": {
                "allowTenants": {
                    "type": "boolean"
                },
                "defaultTenantLocation": {
                    "type": "string"
                }
            }
        },
        "google_identity_platform.IdentityPlatformQuotaConfig": {
            "type": "object",
            "properties": {
                "signUpQuotaConfig": {
                    "type": "object",
                    "properties": {
                        "quota": {
                            "type": "integer"
                        },
                        "quotaDuration": {
                            "type": "string"
                        },
                        "startTime": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "google_identity_platform.IdentityPlatformTenantOperation": {
            "type": "object",
            "properties": {
                "allowPasswordSignup": {
                    "type": "boolean"
                },
                "autodeleteAnonymousUsers": {
                    "type": "boolean"
                },
                "disableAuth": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "enableAnonymousUser": {
                    "type": "boolean"
                },
                "enableEmailLinkSignin": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "google_identity_platform.InitializeIdentityPlatform": {
            "type": "object",
            "required": [
                "project"
            ],
            "properties": {
                "project": {
                    "type": "string"
                }
            }
        },
        "google_identity_platform.UpdateIdentityPlatform": {
            "type": "object",
            "properties": {
                "authorizedDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "autodeleteAnonymousUsers": {
                    "type": "boolean"
                },
                "multiTenant": {
                    "$ref": "#/definitions/google_identity_platform.UpdateIdentityPlatformMultiTenantConfig"
                }
            }
        },
        "google_identity_platform.UpdateIdentityPlatformMultiTenantConfig": {
            "type": "object",
            "required": [
                "allowTenants"
            ],
            "properties": {
                "allowTenants": {
                    "type": "boolean"
                },
                "defaultTenantLocation": {
                    "type": "string"
                }
            }
        },
        "google_identity_platform.UpdateIdentityPlatformTenant": {
            "type": "object",
            "required": [
                "displayName"
            ],
            "properties": {
                "allowPasswordSignup": {
                    "type": "boolean"
                },
                "autodeleteAnonymousUsers": {
                    "type": "boolean"
                },
                "disableAuth": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "enableAnonymousUser": {
                    "type": "boolean"
                },
                "enableEmailLinkSignin": {
                    "type": "boolean"
                }
            }
        },
        "guide.CreateGuide": {
            "type": "object",
            "required": [
                "content",
                "description",
                "status",
                "title"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "prerequisites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "draft",
                        "published",
                        "archived"
                    ]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "guide.Guide": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "prerequisites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "publishedAt": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "guide.UpdateGuide": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "prerequisites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "draft",
                        "published",
                        "archived"
                    ]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "importer.ApproveJobMetadata": {
            "type": "object"
        },
        "importer.CreateJobMetadata": {
            "type": "object",
            "properties": {
                "job": {
                    "$ref": "#/definitions/importer.Job"
                }
            }
        },
        "importer.Job": {
            "type": "object",
            "properties": {
                "errorLogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/importer.JobEvent"
                    }
                },
                "failedRows": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "successLogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "totalRows": {
                    "type": "integer"
                }
            }
        },
        "importer.JobEvent": {
            "type": "object",
            "properties": {
                "errorLogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jobId": {
                    "type": "string"
                },
                "rowData": {
                    "type": "object",
                    "additionalProperties": true
                },
                "rowMetadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "rowNum": {
                    "type": "integer"
                },
                "rowType": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "successLogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "importer.UpdateJobEvent": {
            "type": "object",
            "properties": {
                "errorLogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rowData": {
                    "type": "object",
                    "additionalProperties": true
                },
                "rowMetadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "status": {
                    "type": "string"
                },
                "successLogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "lib_management_imageupload.UploadMetadata": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "lib_management_user.CreateUser": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "displayName": {
                    "type": "string",
                    "example": "John Doe"
                },
                "email": {
                    "type": "string",
                    "example": "j.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "1Pass233234@#f"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+271234567890"
                },
                "uid": {
                    "type": "string",
                    "example": "YTgFMgXVpqRZzmqdmEk9ybbgWCR2"
                }
            }
        },
        "lib_management_user.UpdateUser": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string",
                    "example": "John Doe"
                },
                "email": {
                    "type": "string",
                    "example": "j.doe@example.com"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+271234567890"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://cdn.images.com/jdoe"
                },
                "uid": {
                    "type": "string",
                    "example": "YTgFMgXVpqRZzmqdmEk9ybbgWCR2"
                }
            }
        },
        "lib_user_imageupload.UploadMetadata": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "measured_unit.CreateMeasuredUnit": {
            "type": "object",
            "required": [
                "displayName",
                "name",
                "state"
            ],
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "description": {
                    "type": "string",
                    "example": "Description of the measured unit"
                },
                "displayName": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "Display Name"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Unit Name"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ],
                    "example": "active"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "measured_unit.MeasuredUnit": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "description": {
                    "type": "string",
                    "example": "Description of the measured unit"
                },
                "displayName": {
                    "type": "string",
                    "example": "Display Name"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "Unit Name"
                },
                "state": {
                    "type": "string",
                    "example": "active"
                },
                "teamId": {
                    "type": "string",
                    "example": "team123"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "measured_unit.UpdateMeasuredUnit": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Description of the measured unit"
                },
                "displayName": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "Display Name"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Unit Name"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ],
                    "example": "active"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "message.BookingData": {
            "type": "object",
            "properties": {
                "bookedFor": {
                    "type": "string"
                },
                "bookedForTime": {
                    "type": "string"
                },
                "bookingNumber": {
                    "type": "integer"
                },
                "bookingState": {
                    "type": "string"
                },
                "bookingStates": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "customer": {
                    "type": "object",
                    "additionalProperties": true
                },
                "id": {
                    "type": "string"
                },
                "paymentInfo": {
                    "type": "object",
                    "additionalProperties": true
                },
                "reminder": {
                    "$ref": "#/definitions/message.BookingDataReminder"
                },
                "shiftSnapshot": {
                    "type": "object",
                    "additionalProperties": true
                },
                "transportMode": {
                    "type": "string"
                }
            }
        },
        "message.BookingDataReminder": {
            "type": "object",
            "properties": {
                "scheduledAt": {
                    "type": "string"
                }
            }
        },
        "message.CreateMessage": {
            "type": "object",
            "required": [
                "event",
                "message",
                "title"
            ],
            "properties": {
                "customPreviewData": {
                    "$ref": "#/definitions/message.PreviewData"
                },
                "event": {
                    "type": "string",
                    "enum": [
                        "created",
                        "approved",
                        "paid",
                        "unpaid",
                        "started",
                        "completed",
                        "cancelled",
                        "deleted",
                        "rescheduled",
                        "booking_reminder"
                    ],
                    "example": "started"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "message": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "Grooming Session Started, Hi {{booking.customer.firstName}}. Paws and All Groomers have started the booked grooming session you will notified as soon as it's time to go home!! :-)"
                },
                "title": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 1,
                    "example": "Booking Started"
                }
            }
        },
        "message.Message": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "event": {
                    "type": "string",
                    "enum": [
                        "created",
                        "approved",
                        "paid",
                        "unpaid",
                        "started",
                        "completed",
                        "cancelled",
                        "deleted",
                        "rescheduled",
                        "booking_reminder"
                    ],
                    "example": "started"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "message": {
                    "type": "string",
                    "example": "Grooming Session Started, Hi {{booking.customer.firstName}}. Paws and All Groomers have started the booked grooming session you will notified as soon as it's time to go home!! :-)"
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "title": {
                    "type": "string",
                    "example": "Booking Started"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "message.PreviewData": {
            "type": "object",
            "required": [
                "booking"
            ],
            "properties": {
                "booking": {
                    "$ref": "#/definitions/message.BookingData"
                }
            }
        },
        "message.UpdateMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "Grooming Session Started, Hi {{booking.customer.firstName}}. Paws and All Groomers have started the booked grooming session you will notified as soon as it's time to go home!! :-)"
                },
                "title": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 1,
                    "example": "Booking Started"
                }
            }
        },
        "paystack.ChargedAuthorization": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "authorization": {
                    "$ref": "#/definitions/authorization.Authorization"
                },
                "createdAt": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/paystack.Customer"
                },
                "domain": {
                    "type": "string"
                },
                "fees": {
                    "type": "integer"
                },
                "gatewayResponse": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ipAddress": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "paidAt": {
                    "type": "string"
                },
                "reference": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "transactionDate": {
                    "type": "string"
                }
            }
        },
        "paystack.CreatePaystackConfig": {
            "type": "object",
            "required": [
                "publicKey",
                "secretKey"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "minLength": 1,
                    "example": "pk_test_shdjkhdj827391nV4Lid"
                },
                "secretKey": {
                    "type": "string",
                    "minLength": 1,
                    "example": "sk_test_shdjkhdj827391nV4Lid"
                }
            }
        },
        "paystack.Customer": {
            "type": "object",
            "properties": {
                "customerCode": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "paystack.NewTransaction": {
            "type": "object",
            "properties": {
                "accessCode": {
                    "type": "string"
                },
                "authorization_url": {
                    "type": "string"
                },
                "reference": {
                    "type": "string"
                }
            }
        },
        "paystack.UpdatePaystackConfig": {
            "type": "object",
            "required": [
                "publicKey",
                "secretKey"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "minLength": 1,
                    "example": "pk_test_shdjkhdj827391nV4Lid"
                },
                "secretKey": {
                    "type": "string",
                    "minLength": 1,
                    "example": "sk_test_shdjkhdj827391nV4Lid"
                }
            }
        },
        "paystack.VerifiedTransaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "authorization": {
                    "$ref": "#/definitions/authorization.Authorization"
                },
                "createdAt": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/paystack.Customer"
                },
                "domain": {
                    "type": "string"
                },
                "fees": {
                    "type": "integer"
                },
                "gatewayResponse": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ipAddress": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "paidAt": {
                    "type": "string"
                },
                "reference": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "transactionDate": {
                    "type": "string"
                }
            }
        },
        "permission.AllPermissions": {
            "type": "object",
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/permission.Permission"
                    }
                }
            }
        },
        "permission.CreatePermission": {
            "type": "object",
            "required": [
                "groupId",
                "id",
                "name",
                "roles"
            ],
            "properties": {
                "groupId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Account"
                },
                "id": {
                    "type": "string",
                    "minLength": 1,
                    "example": "CreateAccountPermission"
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Create account"
                },
                "roles": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/auth.Role"
                    }
                }
            }
        },
        "permission.Permission": {
            "type": "object",
            "properties": {
                "groupId": {
                    "type": "string",
                    "example": "Account"
                },
                "id": {
                    "type": "string",
                    "example": "CreateAccountPermission"
                },
                "name": {
                    "type": "string",
                    "example": "Create account"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/auth.Role"
                    }
                }
            }
        },
        "permission.UpdatePermission": {
            "type": "object",
            "properties": {
                "groupId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Account"
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Create account"
                },
                "roles": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/auth.Role"
                    }
                }
            }
        },
        "pet.CreatePet": {
            "type": "object",
            "required": [
                "age",
                "coatType",
                "customerId",
                "name",
                "sex",
                "type",
                "weight"
            ],
            "properties": {
                "additionalInfo": {
                    "type": "string",
                    "maxLength": 400,
                    "minLength": 1,
                    "example": "He is partially blind, please take care."
                },
                "age": {
                    "type": "integer",
                    "maximum": 50,
                    "example": 4
                },
                "breedUniqueName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "affenpinscher"
                },
                "coatType": {
                    "type": "string",
                    "enum": [
                        "double",
                        "medium",
                        "single"
                    ],
                    "example": "single"
                },
                "customerId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "dateOfBirth": {
                    "type": "string",
                    "example": "2021-02-23"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Jay"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://en.wikipedia.org/wiki/Affenpinscher"
                },
                "sex": {
                    "type": "string",
                    "enum": [
                        "male",
                        "female"
                    ],
                    "example": "male"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "dog",
                        "cat"
                    ],
                    "example": "dog"
                },
                "weight": {
                    "type": "number",
                    "maximum": 100,
                    "example": 4
                },
                "weightClassSize": {
                    "type": "string",
                    "enum": [
                        "small",
                        "medium",
                        "large",
                        "extraLarge"
                    ],
                    "example": "large"
                }
            }
        },
        "pet.Pet": {
            "type": "object",
            "properties": {
                "additionalInfo": {
                    "type": "string",
                    "example": "He is partially blind, please take care."
                },
                "age": {
                    "type": "integer",
                    "example": 4
                },
                "breed": {
                    "$ref": "#/definitions/pet.PetBreed"
                },
                "coatType": {
                    "type": "string",
                    "enum": [
                        "double",
                        "medium",
                        "single"
                    ],
                    "example": "single"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "customerId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "dateOfBirth": {
                    "type": "string",
                    "example": "2021-02-23"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "Jay"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://en.wikipedia.org/wiki/Affenpinscher"
                },
                "sex": {
                    "type": "string",
                    "enum": [
                        "male",
                        "female"
                    ],
                    "example": "male"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "dog",
                        "cat"
                    ],
                    "example": "dog"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "weight": {
                    "type": "number",
                    "example": 4
                },
                "weightClass": {
                    "$ref": "#/definitions/pet.PetWeightClass"
                },
                "weightClassByTeam": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/pet.PetWeightClass"
                    }
                },
                "weightClassSize": {
                    "type": "string",
                    "enum": [
                        "small",
                        "medium",
                        "large",
                        "extraLarge"
                    ],
                    "example": "large"
                }
            }
        },
        "pet.PetBreed": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Affenpinscher"
                },
                "uniqueName": {
                    "type": "string",
                    "example": "affenpinscher"
                },
                "url": {
                    "type": "string",
                    "example": "https://en.wikipedia.org/wiki/Affenpinscher"
                }
            }
        },
        "pet.PetWeightClass": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string",
                    "example": "Medium"
                },
                "maxWeight": {
                    "type": "number",
                    "example": 20
                },
                "minWeight": {
                    "type": "number",
                    "example": 10
                },
                "size": {
                    "type": "string",
                    "enum": [
                        "small",
                        "medium",
                        "large",
                        "extraLarge"
                    ],
                    "example": "large"
                }
            }
        },
        "pet.UpdatePet": {
            "type": "object",
            "properties": {
                "additionalInfo": {
                    "type": "string",
                    "maxLength": 400,
                    "minLength": 0,
                    "example": "He is partially blind, please take care."
                },
                "age": {
                    "type": "integer",
                    "maximum": 50,
                    "example": 4
                },
                "breed": {
                    "$ref": "#/definitions/pet.PetBreed"
                },
                "breedUniqueName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "affenpinscher"
                },
                "coatType": {
                    "type": "string",
                    "enum": [
                        "double",
                        "medium",
                        "single"
                    ],
                    "example": "single"
                },
                "customerId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "dateOfBirth": {
                    "type": "string",
                    "example": "2021-02-23"
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Jay"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://en.wikipedia.org/wiki/Affenpinscher"
                },
                "sex": {
                    "type": "string",
                    "enum": [
                        "male",
                        "female"
                    ],
                    "example": "male"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "dog",
                        "cat"
                    ],
                    "example": "dog"
                },
                "weight": {
                    "type": "number",
                    "maximum": 100,
                    "example": 4
                },
                "weightClass": {
                    "$ref": "#/definitions/pet.PetWeightClass"
                },
                "weightClassByTeam": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/pet.PetWeightClass"
                    }
                },
                "weightClassSize": {
                    "type": "string",
                    "enum": [
                        "small",
                        "medium",
                        "large",
                        "extraLarge"
                    ],
                    "example": "large"
                }
            }
        },
        "plan.CreatePlan": {
            "type": "object",
            "required": [
                "code",
                "currencies",
                "name"
            ],
            "properties": {
                "accountingCode": {
                    "type": "string",
                    "example": "400"
                },
                "addOns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.CreatePlanAddOn"
                    }
                },
                "autoRenew": {
                    "type": "boolean",
                    "example": true
                },
                "code": {
                    "type": "string",
                    "maxLength": 25,
                    "example": "mppstandardplan"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "currencies": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/plan.CreatePlanCurrency"
                    }
                },
                "description": {
                    "type": "string",
                    "example": "The standard plan for the MyPetParlor App"
                },
                "dunningCampaignId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "intervalLength": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "intervalUnit": {
                    "type": "string",
                    "enum": [
                        "days",
                        "months"
                    ],
                    "example": "months"
                },
                "liabilityGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "MyPetParlor App Standard"
                },
                "performanceObligationId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "pricingModel": {
                    "type": "string",
                    "enum": [
                        "fixed",
                        "ramp"
                    ],
                    "example": "fixed"
                },
                "rampIntervals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.CreatePlanRampInterval"
                    }
                },
                "revenueGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "revenueScheduleType": {
                    "type": "string",
                    "enum": [
                        "at_range_end",
                        "at_range_start",
                        "evenly",
                        "never"
                    ],
                    "example": "at_range_start"
                },
                "sate": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ],
                    "example": "active"
                },
                "setupFeeAccountingCode": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "SETUP_FEE_ACCOUNTING_CODE"
                },
                "setupFeeLiabilityGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "setupFeePerformanceObligationId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "setupFeeRevenueGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "setupFeeRevenueScheduleType": {
                    "type": "string",
                    "enum": [
                        "at_range_end",
                        "at_range_start",
                        "evenly",
                        "never"
                    ],
                    "example": "at_range_start"
                },
                "taxCode": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "TAX_CODE"
                },
                "taxExempt": {
                    "type": "boolean",
                    "example": true
                },
                "totalBillingCycles": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 0
                },
                "trialLength": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 0
                },
                "trialRequiresBillingInfo": {
                    "type": "boolean",
                    "example": true
                },
                "trialUnit": {
                    "type": "string",
                    "enum": [
                        "days",
                        "months"
                    ],
                    "example": "months"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "plan.CreatePlanAddOn": {
            "type": "object",
            "required": [
                "code",
                "currencies",
                "name",
                "percentageTiers",
                "tiers"
            ],
            "properties": {
                "accountingCode": {
                    "type": "string",
                    "example": "400"
                },
                "addOnType": {
                    "type": "string",
                    "enum": [
                        "fixed",
                        "usage"
                    ],
                    "example": "fixed"
                },
                "code": {
                    "type": "string",
                    "maxLength": 25,
                    "example": "mppstandardplanaddon"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "currencies": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/plan.CreatePlanAddOnCurrency"
                    }
                },
                "defaultQuantity": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "displayQuantity": {
                    "type": "boolean",
                    "example": true
                },
                "externalSku": {
                    "type": "string",
                    "example": "SKU123"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "liabilityGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "measuredUnitId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "MyPetParlor App Standard Add On"
                },
                "optional": {
                    "type": "boolean",
                    "example": true
                },
                "percentageTiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.CreatePlanAddOnPercentageTier"
                    }
                },
                "performanceObligationId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "revenueGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "revenueScheduleType": {
                    "type": "string",
                    "example": "at_range_start"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ],
                    "example": "active"
                },
                "taxCode": {
                    "type": "string",
                    "example": "TAX_CODE"
                },
                "tierType": {
                    "type": "string",
                    "enum": [
                        "flat",
                        "tiered",
                        "stairstep",
                        "volume"
                    ],
                    "example": "flat"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.CreatePlanAddOnTier"
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "usageCalculationType": {
                    "type": "string",
                    "enum": [
                        "cumulative",
                        "last_in_period"
                    ],
                    "example": "cumulative"
                },
                "usagePercentage": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 0
                },
                "usageTimeframe": {
                    "type": "string",
                    "enum": [
                        "billing_period",
                        "subscription_term"
                    ],
                    "example": "billing_period"
                },
                "usageType": {
                    "type": "string",
                    "enum": [
                        "price",
                        "percentage"
                    ],
                    "example": "price"
                }
            }
        },
        "plan.CreatePlanAddOnCurrency": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "ZAR"
                },
                "unitAmount": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 999
                },
                "unitAmountDecimal": {
                    "type": "string",
                    "example": "0.0005"
                }
            }
        },
        "plan.CreatePlanAddOnPercentageTier": {
            "type": "object",
            "required": [
                "code",
                "currencies"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "ZAR"
                },
                "currencies": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/plan.CreatePlanAddOnPercentageTierCurrency"
                    }
                }
            }
        },
        "plan.CreatePlanAddOnPercentageTierCurrency": {
            "type": "object",
            "required": [
                "endingAmount",
                "usagePercentage"
            ],
            "properties": {
                "endingAmount": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 999
                },
                "usagePercentage": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 0
                }
            }
        },
        "plan.CreatePlanAddOnTier": {
            "type": "object",
            "required": [
                "currencies"
            ],
            "properties": {
                "currencies": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/plan.CreatePlanAddOnTierCurrency"
                    }
                },
                "endingQuantity": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 10
                }
            }
        },
        "plan.CreatePlanAddOnTierCurrency": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "ZAR"
                },
                "unitAmount": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 999
                },
                "unitAmountDecimal": {
                    "type": "string",
                    "example": "0.0005"
                }
            }
        },
        "plan.CreatePlanCurrency": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "ZAR"
                },
                "setupFee": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 1099
                },
                "unitAmount": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 999
                }
            }
        },
        "plan.CreatePlanRampInterval": {
            "type": "object",
            "required": [
                "currencies",
                "startingBillingCycle"
            ],
            "properties": {
                "currencies": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/plan.CreatePlanRampIntervalCurrency"
                    }
                },
                "startingBillingCycle": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                }
            }
        },
        "plan.CreatePlanRampIntervalCurrency": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "ZAR"
                },
                "unitAmount": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 999
                }
            }
        },
        "plan.Plan": {
            "type": "object",
            "properties": {
                "accountingCode": {
                    "type": "string",
                    "example": "400"
                },
                "addOns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.PlanAddOn"
                    }
                },
                "autoRenew": {
                    "type": "boolean",
                    "example": true
                },
                "code": {
                    "type": "string",
                    "example": "mppstandardplan"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "currencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.PlanCurrency"
                    }
                },
                "description": {
                    "type": "string",
                    "example": "The standard plan for the MyPetParlor App"
                },
                "dunningCampaignId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "intervalLength": {
                    "type": "integer",
                    "example": 1
                },
                "intervalUnit": {
                    "type": "string",
                    "example": "months"
                },
                "liabilityGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "MyPetParlor App Standard"
                },
                "performanceObligationId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "pricingModel": {
                    "type": "string",
                    "example": "fixed"
                },
                "rampIntervals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.PlanRampInterval"
                    }
                },
                "revenueGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "revenueScheduleType": {
                    "type": "string",
                    "example": "at_range_start"
                },
                "setupFeeAccountingCode": {
                    "type": "string",
                    "example": "SETUP_FEE_ACCOUNTING_CODE"
                },
                "setupFeeLiabilityGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "setupFeePerformanceObligationId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "setupFeeRevenueGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "setupFeeRevenueScheduleType": {
                    "type": "string",
                    "example": "at_range_start"
                },
                "state": {
                    "type": "string",
                    "example": "active"
                },
                "taxCode": {
                    "type": "string",
                    "example": "TAX_CODE"
                },
                "taxExempt": {
                    "type": "boolean",
                    "example": true
                },
                "totalBillingCycles": {
                    "type": "integer",
                    "example": 0
                },
                "trialLength": {
                    "type": "integer",
                    "example": 0
                },
                "trialRequiresBillingInfo": {
                    "type": "boolean",
                    "example": true
                },
                "trialUnit": {
                    "type": "string",
                    "example": "months"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "plan.PlanAddOn": {
            "type": "object",
            "properties": {
                "accountingCode": {
                    "type": "string",
                    "example": "400"
                },
                "addOnType": {
                    "type": "string",
                    "example": "addon"
                },
                "code": {
                    "type": "string",
                    "example": "mppstandardplanaddon"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "currencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.PlanAddOnCurrency"
                    }
                },
                "defaultQuantity": {
                    "type": "integer",
                    "example": 1
                },
                "deletedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "displayQuantity": {
                    "type": "boolean",
                    "example": true
                },
                "externalSku": {
                    "type": "string",
                    "example": "SKU123"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "liabilityGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "measuredUnitId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "MyPetParlor App Standard Add On"
                },
                "optional": {
                    "type": "boolean",
                    "example": true
                },
                "percentageTiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.PlanAddOnPercentageTier"
                    }
                },
                "performanceObligationId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "revenueGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "revenueScheduleType": {
                    "type": "string",
                    "example": "at_range_start"
                },
                "state": {
                    "type": "string",
                    "example": "active"
                },
                "taxCode": {
                    "type": "string",
                    "example": "TAX_CODE"
                },
                "tierType": {
                    "type": "string",
                    "example": "flat"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.PlanAddOnTier"
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "usageCalculationType": {
                    "type": "string",
                    "example": "percentage"
                },
                "usagePercentage": {
                    "type": "number",
                    "example": 100
                },
                "usageTimeframe": {
                    "type": "string",
                    "example": "billing_period"
                },
                "usageType": {
                    "type": "string",
                    "example": "usage"
                }
            }
        },
        "plan.PlanAddOnCurrency": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "3-letter ISO 4217 currency code.",
                    "type": "string",
                    "example": "ZAR"
                },
                "unitAmount": {
                    "description": "The amount (in cents). Required unless unit_amount_decimal is provided.",
                    "type": "integer",
                    "example": 999
                },
                "unitAmountDecimal": {
                    "description": "The amount (in decimals) allows up to 9 decimal places. Only supported when add_on_type = usage.\nIf unit_amount_decimal is provided, unit_amount cannot be provided.",
                    "type": "string",
                    "example": "0.0005"
                }
            }
        },
        "plan.PlanAddOnPercentageTier": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "3-letter ISO 4217 currency code.",
                    "type": "string",
                    "example": "ZAR"
                },
                "currencies": {
                    "description": "Represents the percentage tier's currencies for the plan.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.PlanAddOnPercentageTierCurrency"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                }
            }
        },
        "plan.PlanAddOnPercentageTierCurrency": {
            "type": "object",
            "properties": {
                "endingAmount": {
                    "description": "The ending amount (in cents) for the tier. Allows up to 2 decimal places. Must be left empty if\nit is the final tier.",
                    "type": "integer",
                    "example": 999
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "usagePercentage": {
                    "description": "The percentage taken of the monetary amount of usage tracked. This can be up to 4 decimal places\nrepresented as a float.",
                    "type": "number",
                    "example": 0
                }
            }
        },
        "plan.PlanAddOnTier": {
            "type": "object",
            "properties": {
                "currencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.PlanAddOnTierCurrency"
                    }
                },
                "endingQuantity": {
                    "description": "Ending quantity for the tier. This represents a unit amount for unit-priced add ons.\nMust be left empty (set at 0) if it is the final tier.",
                    "type": "integer",
                    "example": 10
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                }
            }
        },
        "plan.PlanAddOnTierCurrency": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "3-letter ISO 4217 currency code.",
                    "type": "string",
                    "example": "ZAR"
                },
                "unitAmount": {
                    "description": "The amount (in cents). Required unless unit_amount_decimal is provided.",
                    "type": "integer",
                    "example": 999
                },
                "unitAmountDecimal": {
                    "description": "The amount (in decimals) allows up to 9 decimal places. Only supported when add_on_type = usage.\nIf unit_amount_decimal is provided, unit_amount cannot be provided.",
                    "type": "string",
                    "example": "0.0005"
                }
            }
        },
        "plan.PlanCurrency": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "3-letter ISO 4217 currency code.",
                    "type": "string",
                    "example": "ZAR"
                },
                "setupFee": {
                    "description": "Amount (in cents) of one-time setup fee automatically charged at the beginning of a subscription billing cycle.\nFor subscription plans with a trial, the setup fee will be charged at the time of signup. Setup fees\ndo not increase with the quantity of a subscription plan.",
                    "type": "integer",
                    "example": 1099
                },
                "unitAmount": {
                    "description": "The amount (in cents) should not be sent when the pricing model is 'ramp'.",
                    "type": "integer",
                    "example": 999
                }
            }
        },
        "plan.PlanRampInterval": {
            "type": "object",
            "properties": {
                "currencies": {
                    "description": "Represents the price for the ramp interval.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.PlanRampIntervalCurrency"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "startingBillingCycle": {
                    "description": "Represents the billing cycle where a ramp interval starts.",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "plan.PlanRampIntervalCurrency": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "3-letter ISO 4217 currency code.",
                    "type": "string",
                    "example": "ZAR"
                },
                "unitAmount": {
                    "description": "The amount (in cents) should not be sent when the pricing model is 'ramp'.",
                    "type": "integer",
                    "example": 999
                }
            }
        },
        "plan.UpdatePlan": {
            "type": "object",
            "properties": {
                "accountingCode": {
                    "type": "string",
                    "example": "400"
                },
                "autoRenew": {
                    "type": "boolean",
                    "example": true
                },
                "code": {
                    "type": "string",
                    "maxLength": 25,
                    "example": "mppstandardplan"
                },
                "currencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.UpdatePlanCurrency"
                    }
                },
                "description": {
                    "type": "string",
                    "example": "The standard plan for the MyPetParlor App"
                },
                "dunningCampaignId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "intervalLength": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "intervalUnit": {
                    "type": "string",
                    "enum": [
                        "days",
                        "months"
                    ],
                    "example": "months"
                },
                "liabilityGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "MyPetParlor App Standard"
                },
                "performanceObligationId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "pricingModel": {
                    "type": "string",
                    "enum": [
                        "fixed",
                        "ramp"
                    ],
                    "example": "fixed"
                },
                "rampIntervals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.UpdatePlanRampInterval"
                    }
                },
                "revenueGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "revenueScheduleType": {
                    "type": "string",
                    "enum": [
                        "at_range_end",
                        "at_range_start",
                        "evenly",
                        "never"
                    ],
                    "example": "at_range_start"
                },
                "setupFeeAccountingCode": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "SETUP_FEE_ACCOUNTING_CODE"
                },
                "setupFeeLiabilityGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "setupFeePerformanceObligationId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "setupFeeRevenueGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "setupFeeRevenueScheduleType": {
                    "type": "string",
                    "enum": [
                        "at_range_end",
                        "at_range_start",
                        "evenly",
                        "never"
                    ],
                    "example": "at_range_start"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ],
                    "example": "inactive"
                },
                "taxCode": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "TAX_CODE"
                },
                "taxExempt": {
                    "type": "boolean",
                    "example": true
                },
                "totalBillingCycles": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 0
                },
                "trialLength": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 0
                },
                "trialRequiresBillingInfo": {
                    "type": "boolean",
                    "example": true
                },
                "trialUnit": {
                    "type": "string",
                    "enum": [
                        "days",
                        "months"
                    ],
                    "example": "months"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "plan.UpdatePlanAddOn": {
            "type": "object",
            "properties": {
                "accountingCode": {
                    "type": "string",
                    "example": "400"
                },
                "addOnType": {
                    "type": "string",
                    "enum": [
                        "fixed",
                        "usage"
                    ],
                    "example": "fixed"
                },
                "code": {
                    "type": "string",
                    "maxLength": 25,
                    "example": "mppstandardplanaddon"
                },
                "currencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.UpdatePlanAddOnCurrency"
                    }
                },
                "defaultQuantity": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "displayQuantity": {
                    "type": "boolean",
                    "example": true
                },
                "externalSku": {
                    "type": "string",
                    "example": "SKU123"
                },
                "liabilityGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "measuredUnitId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "MyPetParlor App Standard Add On"
                },
                "optional": {
                    "type": "boolean",
                    "example": true
                },
                "percentageTiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.UpdatePlanAddOnPercentageTier"
                    }
                },
                "performanceObligationId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "revenueGLAccountId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "revenueScheduleType": {
                    "type": "string",
                    "enum": [
                        "at_range_end",
                        "at_range_start",
                        "evenly",
                        "never"
                    ],
                    "example": "at_range_start"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ],
                    "example": "active"
                },
                "taxCode": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "TAX_CODE"
                },
                "tierType": {
                    "type": "string",
                    "enum": [
                        "flat",
                        "tiered",
                        "stairstep",
                        "volume"
                    ],
                    "example": "flat"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.UpdatePlanAddOnTier"
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "usageCalculationType": {
                    "type": "string",
                    "enum": [
                        "cumulative",
                        "last_in_period"
                    ],
                    "example": "cumulative"
                },
                "usagePercentage": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 100
                },
                "usageTimeframe": {
                    "type": "string",
                    "enum": [
                        "billing_period",
                        "subscription_term"
                    ],
                    "example": "billing_period"
                },
                "usageType": {
                    "type": "string",
                    "enum": [
                        "price",
                        "percentage"
                    ],
                    "example": "price"
                }
            }
        },
        "plan.UpdatePlanAddOnCurrency": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "ZAR"
                },
                "unitAmount": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 999
                },
                "unitAmountDecimal": {
                    "type": "string",
                    "example": "0.0005"
                }
            }
        },
        "plan.UpdatePlanAddOnPercentageTier": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "ZAR"
                },
                "currencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.UpdatePlanAddOnPercentageTierCurrency"
                    }
                }
            }
        },
        "plan.UpdatePlanAddOnPercentageTierCurrency": {
            "type": "object",
            "required": [
                "endingAmount"
            ],
            "properties": {
                "endingAmount": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 999
                },
                "usagePercentage": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 0
                }
            }
        },
        "plan.UpdatePlanAddOnTier": {
            "type": "object",
            "required": [
                "currencies",
                "endingQuantity"
            ],
            "properties": {
                "currencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.UpdatePlanAddOnTierCurrency"
                    }
                },
                "endingQuantity": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 10
                }
            }
        },
        "plan.UpdatePlanAddOnTierCurrency": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "ZAR"
                },
                "unitAmount": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 999
                },
                "unitAmountDecimal": {
                    "type": "string",
                    "example": "0.0005"
                }
            }
        },
        "plan.UpdatePlanCurrency": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "ZAR"
                },
                "setupFee": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 1099
                },
                "unitAmount": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 999
                }
            }
        },
        "plan.UpdatePlanRampInterval": {
            "type": "object",
            "properties": {
                "currencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.UpdatePlanRampIntervalCurrency"
                    }
                },
                "startingBillingCycle": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                }
            }
        },
        "plan.UpdatePlanRampIntervalCurrency": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "ZAR"
                },
                "unitAmount": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 999
                }
            }
        },
        "profile.CreateProfile": {
            "type": "object",
            "required": [
                "enabled",
                "name",
                "profileType",
                "scheduleConfig",
                "xeroConfig"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": ""
                },
                "eftConfig": {
                    "$ref": "#/definitions/tenant.CreateEFTConfiguration"
                },
                "email": {
                    "type": "string",
                    "example": "info@mppdemo.co.za"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "gravatarUrl": {
                    "type": "string",
                    "example": "https://gravatar.com/avatar/fe1dad0128df2f64a8e50ba221fff1d1?d=retro"
                },
                "id": {
                    "type": "string",
                    "example": "mobile"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Mobile Profile"
                },
                "payParlorConfig": {
                    "$ref": "#/definitions/tenant.CreatePayParlorConfiguration"
                },
                "paystackState": {
                    "type": "string",
                    "enum": [
                        "disabled",
                        "live",
                        "test"
                    ],
                    "example": "disabled"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+27654324343"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://shared-mybusinessapp.azureedge.net/images/mSI8TgB90dU0wd42WkwZdEQy9vL2-dd43f0be-9dcc-4326-87f1-beea52aed3d1.jpg"
                },
                "profileType": {
                    "type": "string",
                    "enum": [
                        "mobile",
                        "parlor",
                        "custom"
                    ],
                    "example": "mobile"
                },
                "scheduleConfig": {
                    "$ref": "#/definitions/tenant.CreateScheduleConfiguration"
                },
                "useGravatar": {
                    "type": "boolean",
                    "example": false
                },
                "websiteUrl": {
                    "type": "string",
                    "example": "https://mppdemo.com"
                },
                "xeroConfig": {
                    "$ref": "#/definitions/tenant.CreateXeroConfiguration"
                },
                "xeroState": {
                    "type": "string",
                    "enum": [
                        "disabled",
                        "live",
                        "configure"
                    ],
                    "example": "disabled"
                }
            }
        },
        "profile.Profile": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "description": {
                    "type": "string",
                    "example": "We collect and deliver for any number of your pets."
                },
                "eftConfig": {
                    "$ref": "#/definitions/tenant.EFTConfiguration"
                },
                "email": {
                    "type": "string",
                    "example": "jydy@gmail.com"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "gravatarUrl": {
                    "type": "string",
                    "example": "https://gravatar.com/avatar/d0e9201191872ec2ea8c5916df838e7d?d=retro"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "Collect And Deliver"
                },
                "payParlorConfig": {
                    "$ref": "#/definitions/tenant.PayParlorConfiguration"
                },
                "paystackState": {
                    "type": "string",
                    "example": "disabled"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+27654324343"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://shared-mybusinessapp.azureedge.net/images/mSI8TgB90dU0wd42WkwZdEQy9vL2-dd43f0be-9dcc-4326-87f1-beea52aed3d1.jpg"
                },
                "profileType": {
                    "type": "string",
                    "example": "mobile"
                },
                "scheduleConfig": {
                    "$ref": "#/definitions/tenant.ScheduleConfiguration"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "useGravatar": {
                    "type": "boolean",
                    "example": false
                },
                "websiteUrl": {
                    "type": "string",
                    "example": "https://mppdemo.com"
                },
                "xeroConfig": {
                    "$ref": "#/definitions/tenant.XeroConfiguration"
                },
                "xeroState": {
                    "type": "string",
                    "example": "disabled"
                }
            }
        },
        "profile.UpdateProfile": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "We collect and deliver for any number of your pets."
                },
                "eftConfig": {
                    "$ref": "#/definitions/tenant.UpdateEFTConfiguration"
                },
                "email": {
                    "type": "string",
                    "example": "info@mppdemo.co.za"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Collect And Deliver"
                },
                "payParlorConfig": {
                    "$ref": "#/definitions/tenant.UpdatePayParlorConfiguration"
                },
                "paystackState": {
                    "type": "string",
                    "enum": [
                        "disabled",
                        "live",
                        "test"
                    ],
                    "example": "disabled"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+27654324343"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://shared-mybusinessapp.azureedge.net/images/mSI8TgB90dU0wd42WkwZdEQy9vL2-dd43f0be-9dcc-4326-87f1-beea52aed3d1.jpg"
                },
                "profileType": {
                    "type": "string",
                    "enum": [
                        "mobile",
                        "parlor",
                        "custom"
                    ],
                    "example": "mobile"
                },
                "scheduleConfig": {
                    "$ref": "#/definitions/tenant.UpdateScheduleConfiguration"
                },
                "useGravatar": {
                    "type": "boolean",
                    "example": false
                },
                "websiteUrl": {
                    "type": "string",
                    "example": "https://mppdemo.com"
                },
                "xeroConfig": {
                    "$ref": "#/definitions/tenant.UpdateXeroConfiguration"
                },
                "xeroState": {
                    "type": "string",
                    "enum": [
                        "disabled",
                        "live",
                        "configure"
                    ],
                    "example": "disabled"
                }
            }
        },
        "schedule.CreateDateSchedule": {
            "type": "object",
            "required": [
                "date",
                "description",
                "shifts"
            ],
            "properties": {
                "date": {
                    "type": "string",
                    "example": "2023-01-05"
                },
                "description": {
                    "type": "string",
                    "maxLength": 140,
                    "minLength": 1,
                    "example": "It's a holiday"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "shifts": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/schedule.Shift"
                    }
                }
            }
        },
        "schedule.CreateDaySchedule": {
            "type": "object",
            "required": [
                "day",
                "shifts"
            ],
            "properties": {
                "day": {
                    "type": "string",
                    "enum": [
                        "monday",
                        "tuesday",
                        "wednesday",
                        "thursday",
                        "friday",
                        "saturday",
                        "sunday"
                    ],
                    "example": "monday"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "shifts": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/schedule.UpdateShift"
                    }
                }
            }
        },
        "schedule.DateSchedule": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "date": {
                    "type": "string",
                    "example": "2023-01-05"
                },
                "description": {
                    "type": "string",
                    "example": "It's a holiday"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "shifts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schedule.Shift"
                    }
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "schedule.DaySchedule": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "day": {
                    "type": "string",
                    "enum": [
                        "monday",
                        "tuesday",
                        "wednesday",
                        "thursday",
                        "friday",
                        "saturday",
                        "sunday"
                    ],
                    "example": "monday"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "maxPets": {
                    "type": "integer",
                    "example": 10
                },
                "shifts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schedule.Shift"
                    }
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "schedule.Shift": {
            "type": "object",
            "properties": {
                "endTime": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "maxPets": {
                    "type": "integer",
                    "example": 10
                },
                "startTime": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "schedule.ShiftSnapshot": {
            "type": "object",
            "properties": {
                "endTime": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "startTime": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "schedule.UpdateDateSchedule": {
            "type": "object",
            "required": [
                "shifts"
            ],
            "properties": {
                "date": {
                    "type": "string",
                    "example": "2023-01-05"
                },
                "description": {
                    "type": "string",
                    "maxLength": 140,
                    "minLength": 1,
                    "example": "It's a holiday"
                },
                "shifts": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/schedule.Shift"
                    }
                }
            }
        },
        "schedule.UpdateDaySchedule": {
            "type": "object",
            "required": [
                "shifts"
            ],
            "properties": {
                "day": {
                    "type": "string",
                    "enum": [
                        "monday",
                        "tuesday",
                        "wednesday",
                        "thursday",
                        "friday",
                        "saturday",
                        "sunday"
                    ],
                    "example": "monday"
                },
                "maxPets": {
                    "type": "integer",
                    "example": 10
                },
                "shifts": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/schedule.UpdateShift"
                    }
                }
            }
        },
        "schedule.UpdateShift": {
            "type": "object",
            "required": [
                "endTime",
                "startTime"
            ],
            "properties": {
                "endTime": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "maxPets": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 10
                },
                "startTime": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "service.BreedPriceDTO": {
            "type": "object",
            "properties": {
                "breedUniqueName": {
                    "type": "string",
                    "example": "airedale_terrier"
                },
                "price": {
                    "$ref": "#/definitions/service.PriceDTO"
                },
                "timeRequiredInSecs": {
                    "type": "integer",
                    "example": 3600
                }
            }
        },
        "service.CreateBreedPriceDTO": {
            "type": "object",
            "required": [
                "breedUniqueName",
                "price"
            ],
            "properties": {
                "breedUniqueName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "airedale_terrier"
                },
                "price": {
                    "$ref": "#/definitions/service.CreatePriceDTO"
                },
                "timeRequiredInSecs": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 3600
                }
            }
        },
        "service.CreatePriceDTO": {
            "type": "object",
            "required": [
                "coatType",
                "currency",
                "value"
            ],
            "properties": {
                "coatType": {
                    "type": "string",
                    "enum": [
                        "none",
                        "all",
                        "double",
                        "medium",
                        "single"
                    ],
                    "example": "single"
                },
                "currency": {
                    "type": "string",
                    "enum": [
                        "ZAR",
                        "USD",
                        "GBP"
                    ],
                    "example": "ZAR"
                },
                "value": {
                    "type": "integer",
                    "example": 10000
                }
            }
        },
        "service.CreateServiceDTO": {
            "type": "object",
            "required": [
                "description",
                "name",
                "petType",
                "pricesByBreed",
                "pricesByWeightClass",
                "serviceType",
                "visibilityRules"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "🐾Includes: Warm wash , Brush, Dry, Nail clip, Ear cleaning, Tooth brushing + perfume \u0026 🎀Bow/Bandana🎀  +7 point grooming health check."
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Foundation Groom"
                },
                "petType": {
                    "type": "string",
                    "enum": [
                        "dog",
                        "cat"
                    ],
                    "example": "dog"
                },
                "pricesByBreed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.CreateBreedPriceDTO"
                    }
                },
                "pricesByWeightClass": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.CreateWeightClassPriceDTO"
                    }
                },
                "serviceType": {
                    "type": "string",
                    "enum": [
                        "groom",
                        "extra"
                    ],
                    "example": "groom"
                },
                "visibilityRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.CreateVisibilityRule"
                    }
                }
            }
        },
        "service.CreateWeightClassPriceDTO": {
            "type": "object",
            "required": [
                "price",
                "size"
            ],
            "properties": {
                "price": {
                    "$ref": "#/definitions/service.CreatePriceDTO"
                },
                "size": {
                    "type": "string",
                    "enum": [
                        "small",
                        "medium",
                        "large",
                        "extraLarge"
                    ],
                    "example": "medium"
                },
                "timeRequiredInSecs": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 3600
                }
            }
        },
        "service.PriceDTO": {
            "type": "object",
            "properties": {
                "coatType": {
                    "type": "string",
                    "enum": [
                        "none",
                        "all",
                        "double",
                        "medium",
                        "single"
                    ],
                    "example": "single"
                },
                "currency": {
                    "type": "string",
                    "enum": [
                        "ZAR",
                        "USD",
                        "GBP"
                    ],
                    "example": "ZAR"
                },
                "value": {
                    "type": "integer",
                    "example": 10000
                }
            }
        },
        "service.ServiceDTO": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "description": {
                    "type": "string",
                    "example": "🐾Includes: Warm wash , Brush, Dry, Nail clip, Ear cleaning, Tooth brushing + perfume \u0026 🎀Bow/Bandana🎀  +7 point grooming health check."
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "Foundation Groom"
                },
                "petType": {
                    "type": "string",
                    "enum": [
                        "dog",
                        "cat"
                    ],
                    "example": "dog"
                },
                "pricesByBreed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.BreedPriceDTO"
                    }
                },
                "pricesByWeightClass": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.WeightClassPriceDTO"
                    }
                },
                "serviceType": {
                    "type": "string",
                    "enum": [
                        "groom",
                        "extra"
                    ],
                    "example": "groom"
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "service.ServiceDTOSnapshot": {
            "type": "object",
            "required": [
                "description",
                "name",
                "petType",
                "serviceType",
                "weightClassPrice"
            ],
            "properties": {
                "breedPrice": {
                    "$ref": "#/definitions/service.BreedPriceDTO"
                },
                "description": {
                    "type": "string",
                    "minLength": 1,
                    "example": "🐾Includes: Warm wash , Brush, Dry, Nail clip, Ear cleaning, Tooth brushing + perfume \u0026 🎀Bow/Bandana🎀  +7 point grooming health check."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Foundation Groom"
                },
                "petType": {
                    "type": "string",
                    "enum": [
                        "dog",
                        "cat"
                    ],
                    "example": "dog"
                },
                "serviceType": {
                    "type": "string",
                    "enum": [
                        "groom",
                        "extra"
                    ],
                    "example": "groom"
                },
                "weightClassPrice": {
                    "$ref": "#/definitions/service.WeightClassPriceDTO"
                }
            }
        },
        "service.UpdateBreedPriceDTO": {
            "type": "object",
            "properties": {
                "breedUniqueName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "airedale_terrier"
                },
                "price": {
                    "$ref": "#/definitions/service.UpdatePriceDTO"
                },
                "timeRequiredInSecs": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 3600
                }
            }
        },
        "service.UpdatePriceDTO": {
            "type": "object",
            "properties": {
                "coatType": {
                    "type": "string",
                    "enum": [
                        "none",
                        "all",
                        "double",
                        "medium",
                        "single"
                    ],
                    "example": "single"
                },
                "currency": {
                    "type": "string",
                    "enum": [
                        "ZAR",
                        "USD",
                        "GBP"
                    ],
                    "example": "ZAR"
                },
                "value": {
                    "type": "integer",
                    "example": 10000
                }
            }
        },
        "service.UpdateServiceDTO": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "🐾Includes: Warm wash , Brush, Dry, Nail clip, Ear cleaning, Tooth brushing + perfume \u0026 🎀Bow/Bandana🎀  +7 point grooming health check."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Foundation Groom"
                },
                "petType": {
                    "type": "string",
                    "enum": [
                        "dog",
                        "cat"
                    ],
                    "example": "dog"
                },
                "pricesByBreed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.UpdateBreedPriceDTO"
                    }
                },
                "pricesByWeightClass": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.UpdateWeightClassPriceDTO"
                    }
                },
                "serviceType": {
                    "type": "string",
                    "enum": [
                        "groom",
                        "extra"
                    ],
                    "example": "groom"
                },
                "visibilityRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.CreateVisibilityRule"
                    }
                }
            }
        },
        "service.UpdateWeightClassPriceDTO": {
            "type": "object",
            "properties": {
                "price": {
                    "$ref": "#/definitions/service.UpdatePriceDTO"
                },
                "size": {
                    "type": "string",
                    "enum": [
                        "small",
                        "medium",
                        "large",
                        "extraLarge"
                    ],
                    "example": "medium"
                },
                "timeRequiredInSecs": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 3600
                }
            }
        },
        "service.WeightClassPriceDTO": {
            "type": "object",
            "properties": {
                "price": {
                    "$ref": "#/definitions/service.PriceDTO"
                },
                "size": {
                    "type": "string",
                    "enum": [
                        "small",
                        "medium",
                        "large",
                        "extraLarge"
                    ],
                    "example": "medium"
                },
                "timeRequiredInSecs": {
                    "type": "integer",
                    "example": 3600
                }
            }
        },
        "stamp.CreateStamp": {
            "type": "object",
            "required": [
                "config",
                "deploymentLocation",
                "maxApplications",
                "name",
                "resourceId",
                "vendor"
            ],
            "properties": {
                "config": {
                    "$ref": "#/definitions/util.CreateStampConfiguration"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "currentApplicationCount": {
                    "type": "integer",
                    "example": 5
                },
                "deploymentLocation": {
                    "type": "string",
                    "minLength": 1,
                    "example": "za1"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "maxApplications": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 15
                },
                "name": {
                    "type": "string",
                    "example": "Google Stamp 0"
                },
                "resourceId": {
                    "type": "string",
                    "example": "folder/4323242353/projects/stamp0"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "vendor": {
                    "type": "string",
                    "enum": [
                        "google",
                        "azure"
                    ],
                    "example": "google"
                }
            }
        },
        "stamp.Stamp": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/util.StampConfiguration"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "currentApplicationCount": {
                    "type": "integer",
                    "example": 5
                },
                "deploymentLocation": {
                    "type": "string",
                    "example": "za1"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "maxApplications": {
                    "type": "integer",
                    "example": 15
                },
                "name": {
                    "type": "string",
                    "example": "Google Stamp 0"
                },
                "resourceId": {
                    "type": "string",
                    "example": "folder/4323242353/projects/stamp0"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "vendor": {
                    "type": "string",
                    "example": "google"
                }
            }
        },
        "stamp.UpdateStamp": {
            "type": "object",
            "required": [
                "config"
            ],
            "properties": {
                "config": {
                    "$ref": "#/definitions/util.UpdateStampConfiguration"
                },
                "maxApplications": {
                    "type": "integer",
                    "example": 15
                },
                "name": {
                    "type": "string",
                    "example": "Google Stamp 0"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "statistic.CreateStatisticTimeSlot": {
            "type": "object",
            "required": [
                "bookingId",
                "endTime",
                "shiftEndTime",
                "shiftStartTime",
                "startTime",
                "timeSlotGroomingRequirements"
            ],
            "properties": {
                "bookingId": {
                    "type": "string",
                    "example": "0e02b87f-6add-4a27-a7ea-489fb84ef7a9"
                },
                "date": {
                    "type": "string",
                    "example": "2022-02-22"
                },
                "endTime": {
                    "type": "string",
                    "example": "1970-01-01T08:55:00Z"
                },
                "pet": {
                    "$ref": "#/definitions/statistic.CreateStatisticTimeSlotPet"
                },
                "shiftEndTime": {
                    "type": "string",
                    "example": "1970-01-01T08:55:00Z"
                },
                "shiftStartTime": {
                    "type": "string",
                    "example": "1970-01-01T08:00:00Z"
                },
                "startTime": {
                    "type": "string",
                    "example": "1970-01-01T08:00:00Z"
                },
                "timeRequiredInSecs": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 3600
                },
                "timeSlotGroomingRequirements": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/statistic.CreateStatisticTimeSlotGroomingRequirements"
                    }
                }
            }
        },
        "statistic.CreateStatisticTimeSlotGroomingRequirements": {
            "type": "object",
            "required": [
                "name",
                "serviceId",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Standard Groom"
                },
                "serviceId": {
                    "type": "string",
                    "example": "0e02b87f-6add-4a27-a7ea-489fb84ef7a9"
                },
                "timeRequiredInSecs": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 3600
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "groomService",
                        "extraService",
                        "transportService"
                    ],
                    "example": "groomService"
                }
            }
        },
        "statistic.CreateStatisticTimeSlotPet": {
            "type": "object",
            "required": [
                "name",
                "petId"
            ],
            "properties": {
                "imageUrl": {
                    "type": "string",
                    "example": "https://en.wikipedia.org/wiki/Affenpinscher"
                },
                "name": {
                    "type": "string",
                    "example": "Sati"
                },
                "petId": {
                    "type": "string",
                    "example": "0e02b87f-6add-4a27-a7ea-489fb84ef7a9"
                }
            }
        },
        "statistic.DecrementTotalBookingsDTO": {
            "type": "object",
            "required": [
                "totalBookingsCount",
                "totalPetsCount"
            ],
            "properties": {
                "totalBookingsCount": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 3
                },
                "totalPetsCount": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 6
                }
            }
        },
        "statistic.IncrementTotalBookingsDTO": {
            "type": "object",
            "required": [
                "totalBookingsCount",
                "totalPetsCount"
            ],
            "properties": {
                "totalBookingsCount": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 3
                },
                "totalPetsCount": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 6
                }
            }
        },
        "statistic.TimeSlotBounds": {
            "type": "object",
            "properties": {
                "endTime": {
                    "type": "string",
                    "example": "1970-01-01T08:55:00Z"
                },
                "startTime": {
                    "type": "string",
                    "example": "1970-01-01T08:00:00Z"
                },
                "timeRequiredInSecs": {
                    "type": "integer",
                    "example": 3600
                }
            }
        },
        "statistic.UpdateStatisticTimeSlot": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string",
                    "example": "2022-02-22"
                },
                "endTime": {
                    "type": "string",
                    "example": "1970-01-01T08:55:00Z"
                },
                "pet": {
                    "$ref": "#/definitions/statistic.UpdateStatisticTimeSlotPet"
                },
                "shiftEndTime": {
                    "type": "string",
                    "example": "1970-01-01T08:55:00Z"
                },
                "shiftStartTime": {
                    "type": "string",
                    "example": "1970-01-01T08:00:00Z"
                },
                "startTime": {
                    "type": "string",
                    "example": "1970-01-01T08:00:00Z"
                },
                "timeRequiredInSecs": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 3600
                },
                "timeSlotGroomingRequirements": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/statistic.UpdateStatisticTimeSlotGroomingRequirements"
                    }
                }
            }
        },
        "statistic.UpdateStatisticTimeSlotGroomingRequirements": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Standard Groom"
                },
                "serviceId": {
                    "type": "string",
                    "example": "0e02b87f-6add-4a27-a7ea-489fb84ef7a9"
                },
                "timeRequiredInSecs": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 3600
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "groomService",
                        "extraService",
                        "transport"
                    ],
                    "example": "groomService"
                }
            }
        },
        "statistic.UpdateStatisticTimeSlotPet": {
            "type": "object",
            "properties": {
                "imageUrl": {
                    "type": "string",
                    "example": "https://en.wikipedia.org/wiki/Affenpinscher"
                },
                "name": {
                    "type": "string",
                    "example": "Sati"
                },
                "petId": {
                    "type": "string",
                    "example": "0e02b87f-6add-4a27-a7ea-489fb84ef7a9"
                }
            }
        },
        "team.CreateTeam": {
            "type": "object",
            "required": [
                "description",
                "email",
                "enabled",
                "includes",
                "name",
                "scheduleConfig",
                "teamType",
                "xeroConfig"
            ],
            "properties": {
                "coatTypeAllDescription": {
                    "type": "string",
                    "example": "any coat type"
                },
                "coatTypeAllRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeDoubleDescription": {
                    "type": "string",
                    "example": "long coat type"
                },
                "coatTypeDoubleRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeMediumDescription": {
                    "type": "string",
                    "example": "medium coat type"
                },
                "coatTypeMediumRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeSingleDescription": {
                    "type": "string",
                    "example": "short coat type"
                },
                "coatTypeSingleRequired": {
                    "type": "boolean",
                    "example": true
                },
                "description": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "We collect and deliver for any number of your pets."
                },
                "eftConfig": {
                    "$ref": "#/definitions/tenant.CreateEFTConfiguration"
                },
                "email": {
                    "type": "string",
                    "example": "info@mppdemo.co.za"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "gravatarUrl": {
                    "type": "string",
                    "example": "https://gravatar.com/avatar/fe1dad0128df2f64a8e50ba221fff1d1?d=retro"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "includeProfileTeamId": {
                    "type": "string",
                    "enum": [
                        "parlor",
                        "mobile",
                        "main",
                        ""
                    ],
                    "example": "mobile"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[]"
                    ]
                },
                "minimumBookingAdvanceTime": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 43200
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Collect And Deliver"
                },
                "payParlorConfig": {
                    "$ref": "#/definitions/tenant.CreatePayParlorConfiguration"
                },
                "paymentConfig": {
                    "$ref": "#/definitions/tenant.CreatePaymentConfiguration"
                },
                "paystackState": {
                    "type": "string",
                    "enum": [
                        "disabled",
                        "live",
                        "test"
                    ],
                    "example": "disabled"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+27654324343"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://shared-mybusinessapp.azureedge.net/images/mSI8TgB90dU0wd42WkwZdEQy9vL2-dd43f0be-9dcc-4326-87f1-beea52aed3d1.jpg"
                },
                "scheduleConfig": {
                    "$ref": "#/definitions/tenant.CreateScheduleConfiguration"
                },
                "teamType": {
                    "type": "string",
                    "enum": [
                        "parlor",
                        "mobile"
                    ],
                    "example": "mobile"
                },
                "useGravatar": {
                    "type": "boolean",
                    "example": false
                },
                "useParentEFT": {
                    "type": "boolean",
                    "example": true
                },
                "useParentPayParlor": {
                    "type": "boolean",
                    "example": true
                },
                "useParentPaystack": {
                    "type": "boolean",
                    "example": true
                },
                "useParentXero": {
                    "type": "boolean",
                    "example": true
                },
                "websiteUrl": {
                    "type": "string",
                    "example": "https://mppdemo.com"
                },
                "xeroConfig": {
                    "$ref": "#/definitions/tenant.CreateXeroConfiguration"
                },
                "xeroState": {
                    "type": "string",
                    "enum": [
                        "disabled",
                        "live",
                        "configure"
                    ],
                    "example": "disabled"
                }
            }
        },
        "team.Team": {
            "type": "object",
            "properties": {
                "coatTypeAllDescription": {
                    "type": "string",
                    "example": "any coat type"
                },
                "coatTypeAllRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeDoubleDescription": {
                    "type": "string",
                    "example": "long coat type"
                },
                "coatTypeDoubleRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeMediumDescription": {
                    "type": "string",
                    "example": "medium coat type"
                },
                "coatTypeMediumRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeSingleDescription": {
                    "type": "string",
                    "example": "short coat type"
                },
                "coatTypeSingleRequired": {
                    "type": "boolean",
                    "example": true
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "description": {
                    "type": "string",
                    "example": "We collect and deliver for any number of your pets."
                },
                "eftConfig": {
                    "$ref": "#/definitions/tenant.EFTConfiguration"
                },
                "email": {
                    "type": "string",
                    "example": "jydy@gmail.com"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "gravatarUrl": {
                    "type": "string",
                    "example": "https://gravatar.com/avatar/d0e9201191872ec2ea8c5916df838e7d?d=retro"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "includeProfileTeamId": {
                    "type": "string",
                    "example": "mobile"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[]"
                    ]
                },
                "minimumBookingAdvanceTime": {
                    "type": "integer",
                    "example": 43200
                },
                "name": {
                    "type": "string",
                    "example": "Collect And Deliver"
                },
                "payParlorConfig": {
                    "$ref": "#/definitions/tenant.PayParlorConfiguration"
                },
                "paymentConfig": {
                    "$ref": "#/definitions/tenant.PaymentConfiguration"
                },
                "paystackState": {
                    "type": "string",
                    "example": "disabled"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+27654324343"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://shared-mybusinessapp.azureedge.net/images/mSI8TgB90dU0wd42WkwZdEQy9vL2-dd43f0be-9dcc-4326-87f1-beea52aed3d1.jpg"
                },
                "scheduleConfig": {
                    "$ref": "#/definitions/tenant.ScheduleConfiguration"
                },
                "teamType": {
                    "type": "string",
                    "example": "mobile"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "useGravatar": {
                    "type": "boolean",
                    "example": false
                },
                "useParentEFT": {
                    "type": "boolean",
                    "example": true
                },
                "useParentPayParlor": {
                    "type": "boolean",
                    "example": true
                },
                "useParentPaystack": {
                    "type": "boolean",
                    "example": true
                },
                "useParentXero": {
                    "type": "boolean",
                    "example": true
                },
                "websiteUrl": {
                    "type": "string",
                    "example": "https://mppdemo.com"
                },
                "xeroConfig": {
                    "$ref": "#/definitions/tenant.XeroConfiguration"
                },
                "xeroState": {
                    "type": "string",
                    "example": "disabled"
                }
            }
        },
        "team.UpdateTeam": {
            "type": "object",
            "properties": {
                "coatTypeAllDescription": {
                    "type": "string",
                    "example": "any coat type"
                },
                "coatTypeAllRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeDoubleDescription": {
                    "type": "string",
                    "example": "long coat type"
                },
                "coatTypeDoubleRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeMediumDescription": {
                    "type": "string",
                    "example": "medium coat type"
                },
                "coatTypeMediumRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeSingleDescription": {
                    "type": "string",
                    "example": "short coat type"
                },
                "coatTypeSingleRequired": {
                    "type": "boolean",
                    "example": true
                },
                "description": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "We collect and deliver for any number of your pets."
                },
                "eftConfig": {
                    "$ref": "#/definitions/tenant.UpdateEFTConfiguration"
                },
                "email": {
                    "type": "string",
                    "example": "info@mppdemo.co.za"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "includeProfileTeamId": {
                    "type": "string",
                    "enum": [
                        "parlor",
                        "mobile",
                        "main",
                        ""
                    ],
                    "example": "mobile"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[]"
                    ]
                },
                "minimumBookingAdvanceTime": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 43200
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Collect And Deliver"
                },
                "payParlorConfig": {
                    "$ref": "#/definitions/tenant.UpdatePayParlorConfiguration"
                },
                "paymentConfig": {
                    "$ref": "#/definitions/tenant.UpdatePaymentConfiguration"
                },
                "paystackState": {
                    "type": "string",
                    "enum": [
                        "disabled",
                        "live",
                        "test"
                    ],
                    "example": "disabled"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+27654324343"
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://shared-mybusinessapp.azureedge.net/images/mSI8TgB90dU0wd42WkwZdEQy9vL2-dd43f0be-9dcc-4326-87f1-beea52aed3d1.jpg"
                },
                "scheduleConfig": {
                    "$ref": "#/definitions/tenant.UpdateScheduleConfiguration"
                },
                "teamType": {
                    "type": "string",
                    "enum": [
                        "parlor",
                        "mobile"
                    ],
                    "example": "mobile"
                },
                "useGravatar": {
                    "type": "boolean",
                    "example": false
                },
                "websiteUrl": {
                    "type": "string",
                    "example": "https://mppdemo.com"
                },
                "xeroConfig": {
                    "$ref": "#/definitions/tenant.UpdateXeroConfiguration"
                },
                "xeroState": {
                    "type": "string",
                    "enum": [
                        "disabled",
                        "live",
                        "configure"
                    ],
                    "example": "disabled"
                }
            }
        },
        "tenant.AndroidConfiguration": {
            "type": "object",
            "properties": {
                "appName": {
                    "type": "string",
                    "example": "MPP Demo"
                },
                "storeUrl": {
                    "type": "string",
                    "example": "https://play.google.com/store/apps/details?id=za.co.mypetparlorapp.mppdemo"
                }
            }
        },
        "tenant.CreateAndroidConfiguration": {
            "type": "object",
            "required": [
                "appName",
                "storeUrl"
            ],
            "properties": {
                "appName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                },
                "storeUrl": {
                    "type": "string",
                    "example": "https://play.google.com/store/apps/details?id=za.co.mypetparlorapp.mppdemo"
                }
            }
        },
        "tenant.CreateEFTConfiguration": {
            "type": "object",
            "required": [
                "accountNumber",
                "accountType",
                "bank",
                "branchCode",
                "disabled",
                "referenceBy"
            ],
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "example": "12345678910"
                },
                "accountType": {
                    "type": "string",
                    "enum": [
                        "cheque",
                        "current",
                        "savings"
                    ],
                    "example": "cheque"
                },
                "bank": {
                    "type": "string",
                    "example": "FNB"
                },
                "branchCode": {
                    "type": "string",
                    "example": "34007"
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                },
                "referenceBy": {
                    "type": "string",
                    "enum": [
                        "customer",
                        "booking"
                    ],
                    "example": "customer"
                }
            }
        },
        "tenant.CreateFirebaseConfiguration": {
            "type": "object",
            "required": [
                "apiKey",
                "authDomain",
                "messagingSenderId",
                "storageBucket",
                "tenantId"
            ],
            "properties": {
                "androidAppId": {
                    "type": "string",
                    "example": "1:androidApps:****"
                },
                "apiKey": {
                    "type": "string",
                    "example": "your_api_key"
                },
                "authDomain": {
                    "type": "string",
                    "example": "your_auth_domain"
                },
                "iosAppId": {
                    "type": "string",
                    "example": "1:iosApps:****"
                },
                "measurementId": {
                    "type": "string",
                    "example": "your_measurement_id"
                },
                "messagingSenderId": {
                    "type": "string",
                    "example": "your_messaging_sender_id"
                },
                "projectId": {
                    "type": "string",
                    "example": "mpp-mppdemo"
                },
                "storageBucket": {
                    "type": "string",
                    "example": "your_storage_bucket"
                },
                "tenantId": {
                    "type": "string",
                    "example": "mppdemo-5thak"
                },
                "webAppId": {
                    "type": "string",
                    "example": "1:webApps:****"
                }
            }
        },
        "tenant.CreateIOSConfiguration": {
            "type": "object",
            "required": [
                "appName",
                "storeUrl"
            ],
            "properties": {
                "appName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                },
                "storeUrl": {
                    "type": "string",
                    "example": "https://apps.apple.com/za/app/mppdemo/id1632886541"
                }
            }
        },
        "tenant.CreatePayParlorConfiguration": {
            "type": "object",
            "required": [
                "acceptCard",
                "acceptCash",
                "disabled"
            ],
            "properties": {
                "acceptCard": {
                    "type": "boolean",
                    "example": true
                },
                "acceptCash": {
                    "type": "boolean",
                    "example": true
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "tenant.CreatePaymentConfiguration": {
            "type": "object",
            "properties": {
                "precedenceOrder": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "card",
                        "eft",
                        "payAtParlor"
                    ]
                }
            }
        },
        "tenant.CreateScheduleConfiguration": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "bookingDays": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 28
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "timeblock",
                        "intaketime"
                    ],
                    "example": "timeblock"
                }
            }
        },
        "tenant.CreateTenant": {
            "type": "object",
            "required": [
                "androidConfig",
                "firebaseConfig",
                "iosConfig",
                "name",
                "scheduleConfig",
                "supportUrl",
                "tenantId",
                "websiteUrl",
                "xeroConfig"
            ],
            "properties": {
                "androidConfig": {
                    "$ref": "#/definitions/tenant.CreateAndroidConfiguration"
                },
                "coatTypeAllDescription": {
                    "type": "string",
                    "example": "any coat type"
                },
                "coatTypeAllRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeDoubleDescription": {
                    "type": "string",
                    "example": "long coat type"
                },
                "coatTypeDoubleRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeMediumDescription": {
                    "type": "string",
                    "example": "medium coat type"
                },
                "coatTypeMediumRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeSingleDescription": {
                    "type": "string",
                    "example": "short coat type"
                },
                "coatTypeSingleRequired": {
                    "type": "boolean",
                    "example": true
                },
                "currency": {
                    "type": "string",
                    "example": "USD"
                },
                "description": {
                    "type": "string",
                    "maxLength": 4000,
                    "example": "MPP Demo tenant for the world to see."
                },
                "eftConfig": {
                    "$ref": "#/definitions/tenant.CreateEFTConfiguration"
                },
                "firebaseConfig": {
                    "$ref": "#/definitions/tenant.CreateFirebaseConfiguration"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "iosConfig": {
                    "$ref": "#/definitions/tenant.CreateIOSConfiguration"
                },
                "minimumBookingAdvanceTime": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 43200
                },
                "mobileTeamsQuota": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                },
                "parlorTeamsQuota": {
                    "type": "integer",
                    "example": 1
                },
                "payParlorConfig": {
                    "$ref": "#/definitions/tenant.CreatePayParlorConfiguration"
                },
                "paymentConfig": {
                    "$ref": "#/definitions/tenant.CreatePaymentConfiguration"
                },
                "paystackState": {
                    "type": "string",
                    "enum": [
                        "disabled",
                        "live",
                        "test"
                    ],
                    "example": "disabled"
                },
                "scheduleConfig": {
                    "$ref": "#/definitions/tenant.CreateScheduleConfiguration"
                },
                "supportUrl": {
                    "type": "string",
                    "example": "https://mppdemo.com/support"
                },
                "tenantId": {
                    "type": "string",
                    "example": "mppdemo"
                },
                "websiteUrl": {
                    "type": "string",
                    "example": "https://mppdemo.com"
                },
                "xeroConfig": {
                    "$ref": "#/definitions/tenant.CreateXeroConfiguration"
                },
                "xeroState": {
                    "type": "string",
                    "enum": [
                        "disabled",
                        "live",
                        "configure"
                    ],
                    "example": "disabled"
                }
            }
        },
        "tenant.CreateXeroConfiguration": {
            "type": "object",
            "required": [
                "accountCode",
                "accountId",
                "connectionId",
                "enableAutomaticCustomerCreation",
                "enableAutomaticInvoiceCreation",
                "isDataStale",
                "isOrganisationStale",
                "paymentAccountCode",
                "paymentAccountId",
                "tenantId"
            ],
            "properties": {
                "accountCode": {
                    "type": "string",
                    "example": "200"
                },
                "accountId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "connectionId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "enableAutomaticCustomerCreation": {
                    "type": "boolean",
                    "example": true
                },
                "enableAutomaticInvoiceCreation": {
                    "type": "boolean",
                    "example": true
                },
                "isDataStale": {
                    "type": "boolean",
                    "example": false
                },
                "isOrganisationStale": {
                    "type": "boolean",
                    "example": false
                },
                "paymentAccountCode": {
                    "type": "string",
                    "example": "200"
                },
                "paymentAccountId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "tenantId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                }
            }
        },
        "tenant.EFTConfiguration": {
            "type": "object",
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "example": "12345678910"
                },
                "accountType": {
                    "type": "string",
                    "example": "cheque"
                },
                "bank": {
                    "type": "string",
                    "example": "FNB"
                },
                "branchCode": {
                    "type": "string",
                    "example": "34007"
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                },
                "referenceBy": {
                    "type": "string",
                    "example": "customer"
                }
            }
        },
        "tenant.FirebaseConfiguration": {
            "type": "object",
            "properties": {
                "androidAppId": {
                    "type": "string",
                    "example": "1:androidApps:****"
                },
                "apiKey": {
                    "type": "string",
                    "example": "your_api_key"
                },
                "authDomain": {
                    "type": "string",
                    "example": "your_auth_domain"
                },
                "iosAppId": {
                    "type": "string",
                    "example": "1:iosApps:****"
                },
                "measurementId": {
                    "type": "string",
                    "example": "your_measurement_id"
                },
                "messagingSenderId": {
                    "type": "string",
                    "example": "your_messaging_sender_id"
                },
                "projectId": {
                    "type": "string",
                    "example": "mpp-mppdemo"
                },
                "storageBucket": {
                    "type": "string",
                    "example": "your_storage_bucket"
                },
                "tenantId": {
                    "type": "string",
                    "example": "mppdemo-5thak"
                },
                "webAppId": {
                    "type": "string",
                    "example": "1:webApps:****"
                }
            }
        },
        "tenant.IOSConfiguration": {
            "type": "object",
            "properties": {
                "appName": {
                    "type": "string",
                    "example": "MPP Demo"
                },
                "storeUrl": {
                    "type": "string",
                    "example": "https://apps.apple.com/za/app/mppdemo/id1632886541"
                }
            }
        },
        "tenant.PayParlorConfiguration": {
            "type": "object",
            "properties": {
                "acceptCard": {
                    "type": "boolean",
                    "example": true
                },
                "acceptCash": {
                    "type": "boolean",
                    "example": true
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "tenant.PaymentConfiguration": {
            "type": "object",
            "properties": {
                "precedenceOrder": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "card",
                        "eft",
                        "payAtParlor"
                    ]
                }
            }
        },
        "tenant.ScheduleConfiguration": {
            "type": "object",
            "properties": {
                "bookingDays": {
                    "type": "integer",
                    "example": 28
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "timeblock",
                        "intaketime"
                    ],
                    "example": "timeblock"
                }
            }
        },
        "tenant.Tenant": {
            "type": "object",
            "properties": {
                "androidConfig": {
                    "$ref": "#/definitions/tenant.AndroidConfiguration"
                },
                "applicationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "coatTypeAllDescription": {
                    "type": "string",
                    "example": "any coat type"
                },
                "coatTypeAllRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeDoubleDescription": {
                    "type": "string",
                    "example": "long coat type"
                },
                "coatTypeDoubleRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeMediumDescription": {
                    "type": "string",
                    "example": "medium coat type"
                },
                "coatTypeMediumRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeSingleDescription": {
                    "type": "string",
                    "example": "short coat type"
                },
                "coatTypeSingleRequired": {
                    "type": "boolean",
                    "example": true
                },
                "configAzureResourceGroupID": {
                    "type": "string",
                    "example": "fefkqejff43f24f23"
                },
                "configGoogleCloudProjectID": {
                    "type": "string",
                    "example": "fefkqejff43f24f23"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "currency": {
                    "type": "string",
                    "example": "ZAR"
                },
                "deploymentLocation": {
                    "type": "string",
                    "example": "za0"
                },
                "description": {
                    "type": "string",
                    "example": "MPP Demo tenant for the world to see."
                },
                "eftConfig": {
                    "$ref": "#/definitions/tenant.EFTConfiguration"
                },
                "firebaseConfig": {
                    "$ref": "#/definitions/tenant.FirebaseConfiguration"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "iosConfig": {
                    "$ref": "#/definitions/tenant.IOSConfiguration"
                },
                "minimumBookingAdvanceTime": {
                    "type": "integer",
                    "example": 43200
                },
                "mobileTeamsQuota": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "MPP Demo"
                },
                "parlorTeamsQuota": {
                    "type": "integer",
                    "example": 1
                },
                "payParlorConfig": {
                    "$ref": "#/definitions/tenant.PayParlorConfiguration"
                },
                "paymentConfig": {
                    "$ref": "#/definitions/tenant.PaymentConfiguration"
                },
                "paystackState": {
                    "type": "string",
                    "example": "disabled"
                },
                "scheduleConfig": {
                    "$ref": "#/definitions/tenant.ScheduleConfiguration"
                },
                "supportUrl": {
                    "type": "string",
                    "example": "https://mppdemo.com/support"
                },
                "tenantId": {
                    "type": "string",
                    "example": "mppdemo"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "websiteUrl": {
                    "type": "string",
                    "example": "https://mppdemo.com"
                },
                "xeroConfig": {
                    "$ref": "#/definitions/tenant.XeroConfiguration"
                },
                "xeroState": {
                    "type": "string",
                    "example": "disabled"
                }
            }
        },
        "tenant.UpdateAndroidConfiguration": {
            "type": "object",
            "properties": {
                "appName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                },
                "storeUrl": {
                    "type": "string",
                    "example": "https://play.google.com/store/apps/details?id=za.co.mypetparlorapp.mppdemo"
                }
            }
        },
        "tenant.UpdateEFTConfiguration": {
            "type": "object",
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "example": "12345678910"
                },
                "accountType": {
                    "type": "string",
                    "enum": [
                        "cheque",
                        "current",
                        "savings"
                    ],
                    "example": "cheque"
                },
                "bank": {
                    "type": "string",
                    "example": "FNB"
                },
                "branchCode": {
                    "type": "string",
                    "example": "34007"
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                },
                "referenceBy": {
                    "type": "string",
                    "enum": [
                        "customer",
                        "booking"
                    ],
                    "example": "customer"
                }
            }
        },
        "tenant.UpdateFirebaseConfiguration": {
            "type": "object",
            "properties": {
                "androidAppId": {
                    "type": "string",
                    "example": "1:androidApps:****"
                },
                "apiKey": {
                    "type": "string",
                    "example": "your_api_key"
                },
                "authDomain": {
                    "type": "string",
                    "example": "your_auth_domain"
                },
                "iosAppId": {
                    "type": "string",
                    "example": "1:iosApps:****"
                },
                "measurementId": {
                    "type": "string",
                    "example": "your_measurement_id"
                },
                "messagingSenderId": {
                    "type": "string",
                    "example": "your_messaging_sender_id"
                },
                "projectId": {
                    "type": "string",
                    "example": "mpp-mppdemo"
                },
                "storageBucket": {
                    "type": "string",
                    "example": "your_storage_bucket"
                },
                "tenantId": {
                    "type": "string",
                    "example": "mppdemo-5thak"
                },
                "webAppId": {
                    "type": "string",
                    "example": "1:webApps:****"
                }
            }
        },
        "tenant.UpdateIOSConfiguration": {
            "type": "object",
            "properties": {
                "appName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                },
                "storeUrl": {
                    "type": "string",
                    "example": "https://apps.apple.com/za/app/mppdemo/id1632886541"
                }
            }
        },
        "tenant.UpdatePayParlorConfiguration": {
            "type": "object",
            "properties": {
                "acceptCard": {
                    "type": "boolean",
                    "example": true
                },
                "acceptCash": {
                    "type": "boolean",
                    "example": true
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "tenant.UpdatePaymentConfiguration": {
            "type": "object",
            "properties": {
                "precedenceOrder": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "card",
                        "eft",
                        "payAtParlor"
                    ]
                }
            }
        },
        "tenant.UpdateScheduleConfiguration": {
            "type": "object",
            "properties": {
                "bookingDays": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 28
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "timeblock",
                        "intaketime"
                    ],
                    "example": "timeblock"
                }
            }
        },
        "tenant.UpdateTenant": {
            "type": "object",
            "properties": {
                "androidConfig": {
                    "$ref": "#/definitions/tenant.UpdateAndroidConfiguration"
                },
                "coatTypeAllDescription": {
                    "type": "string",
                    "example": "any coat type"
                },
                "coatTypeAllRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeDoubleDescription": {
                    "type": "string",
                    "example": "long coat type"
                },
                "coatTypeDoubleRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeMediumDescription": {
                    "type": "string",
                    "example": "medium coat type"
                },
                "coatTypeMediumRequired": {
                    "type": "boolean",
                    "example": true
                },
                "coatTypeSingleDescription": {
                    "type": "string",
                    "example": "short coat type"
                },
                "coatTypeSingleRequired": {
                    "type": "boolean",
                    "example": true
                },
                "currency": {
                    "type": "string",
                    "example": "USD"
                },
                "description": {
                    "type": "string",
                    "maxLength": 4000,
                    "example": "MPP Demo tenant for the world to see."
                },
                "eftConfig": {
                    "$ref": "#/definitions/tenant.UpdateEFTConfiguration"
                },
                "firebaseConfig": {
                    "$ref": "#/definitions/tenant.UpdateFirebaseConfiguration"
                },
                "iosConfig": {
                    "$ref": "#/definitions/tenant.UpdateIOSConfiguration"
                },
                "minimumBookingAdvanceTime": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 43200
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                },
                "payParlorConfig": {
                    "$ref": "#/definitions/tenant.UpdatePayParlorConfiguration"
                },
                "paymentConfig": {
                    "$ref": "#/definitions/tenant.UpdatePaymentConfiguration"
                },
                "paystackState": {
                    "type": "string",
                    "enum": [
                        "disabled",
                        "live",
                        "test"
                    ],
                    "example": "disabled"
                },
                "scheduleConfig": {
                    "$ref": "#/definitions/tenant.UpdateScheduleConfiguration"
                },
                "supportUrl": {
                    "type": "string",
                    "example": "https://mppdemo.com/support"
                },
                "tenantId": {
                    "type": "string",
                    "example": "mppdemo"
                },
                "websiteUrl": {
                    "type": "string",
                    "example": "https://mppdemo.com"
                },
                "xeroConfig": {
                    "$ref": "#/definitions/tenant.UpdateXeroConfiguration"
                },
                "xeroState": {
                    "type": "string",
                    "enum": [
                        "disabled",
                        "live",
                        "configure"
                    ],
                    "example": "disabled"
                }
            }
        },
        "tenant.UpdateXeroConfiguration": {
            "type": "object",
            "properties": {
                "accountCode": {
                    "type": "string",
                    "example": "200"
                },
                "accountId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "connectionId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "enableAutomaticCustomerCreation": {
                    "type": "boolean",
                    "example": true
                },
                "enableAutomaticInvoiceCreation": {
                    "type": "boolean",
                    "example": true
                },
                "isDataStale": {
                    "type": "boolean",
                    "example": false
                },
                "isOrganisationStale": {
                    "type": "boolean",
                    "example": false
                },
                "paymentAccountCode": {
                    "type": "string",
                    "example": "200"
                },
                "paymentAccountId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "tenantId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                }
            }
        },
        "tenant.XeroConfiguration": {
            "type": "object",
            "properties": {
                "accountCode": {
                    "type": "string",
                    "example": "200"
                },
                "accountId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "connectionId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "enableAutomaticCustomerCreation": {
                    "type": "boolean",
                    "example": true
                },
                "enableAutomaticInvoiceCreation": {
                    "type": "boolean",
                    "example": true
                },
                "isDataStale": {
                    "type": "boolean",
                    "example": false
                },
                "isOrganisationStale": {
                    "type": "boolean",
                    "example": false
                },
                "paymentAccountCode": {
                    "type": "string",
                    "example": "200"
                },
                "paymentAccountId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "tenantId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                }
            }
        },
        "tenant_azure_resource_group.CreateTenantsAzureResourceGroup": {
            "type": "object",
            "required": [
                "location",
                "name",
                "quotaTenants",
                "resourceId",
                "resourceName"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "location": {
                    "type": "string",
                    "enum": [
                        "southafricanorth"
                    ],
                    "example": "southafricanorth"
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                },
                "quotaTenants": {
                    "type": "integer",
                    "maximum": 500,
                    "minimum": 1,
                    "example": 500
                },
                "quotaTenantsCurrent": {
                    "type": "integer",
                    "maximum": 500,
                    "example": 244
                },
                "resourceId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "/subsciptions/\u003csubscription-id\u003e/.../568c28fffc4be30d44d0398e"
                },
                "resourceName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                }
            }
        },
        "tenant_azure_resource_group.TenantsAzureResourceGroup": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "location": {
                    "type": "string",
                    "example": "southafricanorth"
                },
                "name": {
                    "type": "string",
                    "example": "MPP Demo"
                },
                "quotaTenants": {
                    "type": "integer",
                    "example": 500
                },
                "quotaTenantsCurrent": {
                    "type": "integer",
                    "example": 244
                },
                "resourceId": {
                    "type": "string",
                    "example": "/subsciptions/\u003csubscription-id\u003e/.../568c28fffc4be30d44d0398e"
                },
                "resourceName": {
                    "type": "string",
                    "example": "MPP Demo"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "tenant_azure_resource_group.UpdateTenantsAzureResourceGroup": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                }
            }
        },
        "tenant_google_cloud_project.CreateTenantsGoogleCloudProject": {
            "type": "object",
            "required": [
                "location",
                "name",
                "quotaTenants",
                "resourceId",
                "resourceName"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "location": {
                    "type": "string",
                    "enum": [
                        "southafricanorth"
                    ],
                    "example": "southafricanorth"
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                },
                "quotaTenants": {
                    "type": "integer",
                    "maximum": 10,
                    "minimum": 1,
                    "example": 4
                },
                "quotaTenantsCurrent": {
                    "type": "integer",
                    "maximum": 10,
                    "example": 4
                },
                "resourceId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "/subsciptions/\u003csubscription-id\u003e/.../568c28fffc4be30d44d0398e"
                },
                "resourceName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                }
            }
        },
        "tenant_google_cloud_project.TenantsGoogleCloudProject": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "location": {
                    "type": "string",
                    "example": "southafricanorth"
                },
                "name": {
                    "type": "string",
                    "example": "MPP Demo"
                },
                "quotaTenants": {
                    "type": "integer",
                    "example": 10
                },
                "quotaTenantsCurrent": {
                    "type": "integer",
                    "example": 4
                },
                "resourceId": {
                    "type": "string",
                    "example": "/folder/568c28fffc4be30d44d0398e"
                },
                "resourceName": {
                    "type": "string",
                    "example": "MPP Demo"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "tenant_google_cloud_project.UpdateTenantsGoogleCloudProject": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                }
            }
        },
        "token.CreateToken": {
            "type": "object",
            "required": [
                "registrationToken",
                "uid",
                "userType"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "registrationToken": {
                    "type": "string",
                    "example": "fYMwC0ZS8CNQavv0G4foSc:APA91bGxnKm_M1iEVjPaKJZZahmzfLzIWnWQpT7YgH4Ff4-kzaOc94dJj540eDkJBFJRQVmd_T87kX4EDDZRh8UO3Avv-TJPwzdEspPhGKZdEefCRi5g4DwQ1VuUFnaD3A9FmFtjaVYR"
                },
                "registrationTokens": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['fYMwC0ZS8CNQavv0G4foSc:APA91bGxnKm_M1iEVjPaKJZZahmzfLzIWnWQpT7YgH4Ff4-kzaOc94dJj540eDkJBFJRQVmd_T87kX4EDDZRh8UO3Avv-TJPwzdEspPhGKZdEefCRi5g4DwQ1VuUFnaD3A9FmFtjaVYR']"
                    ]
                },
                "uid": {
                    "type": "string",
                    "example": "vhVR3yfRoveOsbPeDU5EnLHqD593"
                },
                "userType": {
                    "type": "string",
                    "enum": [
                        "employee",
                        "customer"
                    ],
                    "example": "employee"
                }
            }
        },
        "token.RemoveRegistrationToken": {
            "type": "object",
            "required": [
                "registrationToken"
            ],
            "properties": {
                "registrationToken": {
                    "type": "string",
                    "example": "fYMwC0ZS8CNQavv0G4foSc:APA91bGxnKm_M1iEVjPaKJZZahmzfLzIWnWQpT7YgH4Ff4-kzaOc94dJj540eDkJBFJRQVmd_T87kX4EDDZRh8UO3Avv-TJPwzdEspPhGKZdEefCRi5g4DwQ1VuUFnaD3A9FmFtjaVYR"
                },
                "registrationTokens": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['fYMwC0ZS8CNQavv0G4foSc:APA91bGxnKm_M1iEVjPaKJZZahmzfLzIWnWQpT7YgH4Ff4-kzaOc94dJj540eDkJBFJRQVmd_T87kX4EDDZRh8UO3Avv-TJPwzdEspPhGKZdEefCRi5g4DwQ1VuUFnaD3A9FmFtjaVYR']"
                    ]
                }
            }
        },
        "token.Token": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "registrationTokens": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['fYMwC0ZS8CNQavv0G4foSc:APA91bGxnKm_M1iEVjPaKJZZahmzfLzIWnWQpT7YgH4Ff4-kzaOc94dJj540eDkJBFJRQVmd_T87kX4EDDZRh8UO3Avv-TJPwzdEspPhGKZdEefCRi5g4DwQ1VuUFnaD3A9FmFtjaVYR']"
                    ]
                },
                "uid": {
                    "type": "string",
                    "example": "vhVR3yfRoveOsbPeDU5EnLHqD593"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "userType": {
                    "type": "string",
                    "enum": [
                        "employee",
                        "customer"
                    ],
                    "example": "employee"
                }
            }
        },
        "token.UpdateToken": {
            "type": "object",
            "properties": {
                "registrationToken": {
                    "type": "string",
                    "example": "fYMwC0ZS8CNQavv0G4foSc:APA91bGxnKm_M1iEVjPaKJZZahmzfLzIWnWQpT7YgH4Ff4-kzaOc94dJj540eDkJBFJRQVmd_T87kX4EDDZRh8UO3Avv-TJPwzdEspPhGKZdEefCRi5g4DwQ1VuUFnaD3A9FmFtjaVYR"
                },
                "registrationTokens": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['fYMwC0ZS8CNQavv0G4foSc:APA91bGxnKm_M1iEVjPaKJZZahmzfLzIWnWQpT7YgH4Ff4-kzaOc94dJj540eDkJBFJRQVmd_T87kX4EDDZRh8UO3Avv-TJPwzdEspPhGKZdEefCRi5g4DwQ1VuUFnaD3A9FmFtjaVYR']"
                    ]
                },
                "userType": {
                    "type": "string",
                    "enum": [
                        "employee",
                        "customer"
                    ],
                    "example": "employee"
                }
            }
        },
        "transport.CreatePrice": {
            "type": "object",
            "required": [
                "coatType",
                "currency",
                "value"
            ],
            "properties": {
                "coatType": {
                    "type": "string",
                    "enum": [
                        "none",
                        "all",
                        "double",
                        "medium",
                        "single"
                    ],
                    "example": "single"
                },
                "currency": {
                    "type": "string",
                    "enum": [
                        "ZAR",
                        "USD",
                        "GBP"
                    ],
                    "example": "ZAR"
                },
                "value": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 10000
                }
            }
        },
        "transport.CreateTransport": {
            "type": "object",
            "required": [
                "availability",
                "description",
                "enabled",
                "name",
                "transportMode"
            ],
            "properties": {
                "availability": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['monday'",
                        " 'tuesday'",
                        " 'wednesday'",
                        " 'thursday'",
                        " 'friday']"
                    ]
                },
                "description": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "We collect and deliver for any number of your pets."
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Collect And Deliver"
                },
                "price": {
                    "$ref": "#/definitions/transport.CreatePrice"
                },
                "timeRequiredInSecs": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 3600
                },
                "transportMode": {
                    "type": "string",
                    "minLength": 1,
                    "example": "collectAndDeliver"
                }
            }
        },
        "transport.Price": {
            "type": "object",
            "properties": {
                "coatType": {
                    "type": "string",
                    "enum": [
                        "none",
                        "all",
                        "double",
                        "medium",
                        "single"
                    ],
                    "example": "single"
                },
                "currency": {
                    "type": "string",
                    "enum": [
                        "ZAR",
                        "USD",
                        "GBP"
                    ],
                    "example": "ZAR"
                },
                "value": {
                    "type": "integer",
                    "example": 10000
                }
            }
        },
        "transport.Transport": {
            "type": "object",
            "properties": {
                "availability": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['monday'",
                        " 'tuesday'",
                        " 'wednesday'",
                        " 'thursday'",
                        " 'friday']"
                    ]
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "description": {
                    "type": "string",
                    "example": "We collect and deliver for any number of your pets."
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "Collect And Deliver"
                },
                "price": {
                    "$ref": "#/definitions/transport.Price"
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "timeRequiredInSecs": {
                    "type": "integer",
                    "example": 3600
                },
                "transportMode": {
                    "type": "string",
                    "example": "collectAndDeliver"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "transport.TransportSnapshot": {
            "type": "object",
            "required": [
                "availability",
                "description",
                "id",
                "name",
                "price"
            ],
            "properties": {
                "availability": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['monday'",
                        " 'tuesday'",
                        " 'wednesday'",
                        " 'thursday'",
                        " 'friday']"
                    ]
                },
                "description": {
                    "type": "string",
                    "example": "We collect and deliver for any number of your pets."
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "name": {
                    "type": "string",
                    "example": "Collect And Deliver"
                },
                "price": {
                    "$ref": "#/definitions/transport.Price"
                },
                "timeRequiredInSecs": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 3600
                }
            }
        },
        "transport.UpdatePrice": {
            "type": "object",
            "properties": {
                "coatType": {
                    "type": "string",
                    "enum": [
                        "none",
                        "all",
                        "single",
                        "double"
                    ],
                    "example": "single"
                },
                "currency": {
                    "type": "string",
                    "enum": [
                        "ZAR",
                        "USD",
                        "GBP"
                    ],
                    "example": "ZAR"
                },
                "value": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 10000
                }
            }
        },
        "transport.UpdateTransport": {
            "type": "object",
            "properties": {
                "availability": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['monday'",
                        " 'tuesday'",
                        " 'wednesday'",
                        " 'thursday'",
                        " 'friday']"
                    ]
                },
                "description": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "We collect and deliver for any number of your pets."
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Collect And Deliver"
                },
                "price": {
                    "$ref": "#/definitions/transport.UpdatePrice"
                },
                "timeRequiredInSecs": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 3600
                },
                "transportMode": {
                    "type": "string",
                    "minLength": 1,
                    "example": "collectAndDeliver"
                }
            }
        },
        "user.Claims": {
            "type": "object",
            "properties": {
                "customerTenantIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "employeeTenantId": {
                    "type": "string"
                },
                "isAdmin": {
                    "type": "boolean"
                },
                "isCustomer": {
                    "type": "boolean"
                },
                "isDeveloper": {
                    "type": "boolean"
                },
                "isEmployee": {
                    "type": "boolean"
                },
                "isGroomer": {
                    "type": "boolean"
                },
                "isOwner": {
                    "type": "boolean"
                },
                "isReception": {
                    "type": "boolean"
                },
                "isTaxi": {
                    "type": "boolean"
                },
                "teamIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "user.User": {
            "type": "object",
            "properties": {
                "claims": {
                    "$ref": "#/definitions/user.Claims"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "isEmailVerified": {
                    "type": "boolean"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "photoUrl": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "util.AndroidConfiguration": {
            "type": "object",
            "properties": {
                "appName": {
                    "type": "string",
                    "example": "MPP Demo"
                },
                "storeUrl": {
                    "type": "string",
                    "example": "https://play.google.com/store/apps/details?id=za.co.mypetparlorapp.mppdemo"
                }
            }
        },
        "util.ApplicationStampProperties": {
            "type": "object",
            "properties": {
                "androidConfig": {
                    "$ref": "#/definitions/util.AndroidConfiguration"
                },
                "applicationId": {
                    "type": "string"
                },
                "applicationType": {
                    "type": "string"
                },
                "azureStampId": {
                    "type": "string"
                },
                "coatTypeAllDescription": {
                    "type": "string"
                },
                "coatTypeAllRequired": {
                    "type": "boolean"
                },
                "coatTypeDoubleDescription": {
                    "type": "string"
                },
                "coatTypeDoubleRequired": {
                    "type": "boolean"
                },
                "coatTypeMediumDescription": {
                    "type": "string"
                },
                "coatTypeMediumRequired": {
                    "type": "boolean"
                },
                "coatTypeSingleDescription": {
                    "type": "string"
                },
                "coatTypeSingleRequired": {
                    "type": "boolean"
                },
                "companyUrl": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "deploymentLocation": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "eftConfig": {
                    "$ref": "#/definitions/util.EFTConfiguration"
                },
                "firebaseConfig": {
                    "$ref": "#/definitions/util.FirebaseConfiguration"
                },
                "googleStampId": {
                    "type": "string"
                },
                "iosConfig": {
                    "$ref": "#/definitions/util.IOSConfiguration"
                },
                "minimumBookingAdvanceTime": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "payParlorConfig": {
                    "$ref": "#/definitions/util.PayParlorConfiguration"
                },
                "paymentConfig": {
                    "$ref": "#/definitions/util.PaymentConfiguration"
                },
                "paystackState": {
                    "type": "string"
                },
                "quotaTeamsMobile": {
                    "type": "integer"
                },
                "quotaTeamsParlor": {
                    "type": "integer"
                },
                "scheduleConfig": {
                    "$ref": "#/definitions/util.ScheduleConfiguration"
                },
                "supportUrl": {
                    "type": "string"
                },
                "xeroConfig": {
                    "$ref": "#/definitions/util.XeroConfiguration"
                },
                "xeroState": {
                    "type": "string"
                }
            }
        },
        "util.CreateAndroidConfiguration": {
            "type": "object",
            "required": [
                "appName",
                "storeUrl"
            ],
            "properties": {
                "appName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                },
                "storeUrl": {
                    "type": "string",
                    "example": "https://play.google.com/store/apps/details?id=za.co.mypetparlorapp.mppdemo"
                }
            }
        },
        "util.CreateApplicationStampProperties": {
            "type": "object",
            "required": [
                "androidConfig",
                "firebaseConfig",
                "iosConfig",
                "scheduleConfig",
                "xeroConfig"
            ],
            "properties": {
                "androidConfig": {
                    "$ref": "#/definitions/util.CreateAndroidConfiguration"
                },
                "applicationId": {
                    "type": "string"
                },
                "applicationType": {
                    "type": "string"
                },
                "azureStampId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "azure-stamp0"
                },
                "coatTypeAllDescription": {
                    "type": "string"
                },
                "coatTypeAllRequired": {
                    "type": "boolean"
                },
                "coatTypeDoubleDescription": {
                    "type": "string"
                },
                "coatTypeDoubleRequired": {
                    "type": "boolean"
                },
                "coatTypeMediumDescription": {
                    "type": "string"
                },
                "coatTypeMediumRequired": {
                    "type": "boolean"
                },
                "coatTypeSingleDescription": {
                    "type": "string"
                },
                "coatTypeSingleRequired": {
                    "type": "boolean"
                },
                "companyUrl": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "deploymentLocation": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "eftConfig": {
                    "$ref": "#/definitions/util.CreateEFTConfiguration"
                },
                "firebaseConfig": {
                    "$ref": "#/definitions/util.CreateFirebaseConfiguration"
                },
                "googleStampId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "google-stamp0"
                },
                "iosConfig": {
                    "$ref": "#/definitions/util.CreateIOSConfiguration"
                },
                "minimumBookingAdvanceTime": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "payParlorConfig": {
                    "$ref": "#/definitions/util.CreatePayParlorConfiguration"
                },
                "paymentConfig": {
                    "$ref": "#/definitions/util.CreatePaymentConfiguration"
                },
                "paystackState": {
                    "type": "string"
                },
                "quotaTeamsMobile": {
                    "type": "integer"
                },
                "quotaTeamsParlor": {
                    "type": "integer"
                },
                "scheduleConfig": {
                    "$ref": "#/definitions/util.CreateScheduleConfiguration"
                },
                "supportUrl": {
                    "type": "string"
                },
                "xeroConfig": {
                    "$ref": "#/definitions/util.CreateXeroConfiguration"
                },
                "xeroState": {
                    "type": "string"
                }
            }
        },
        "util.CreateEFTConfiguration": {
            "type": "object",
            "required": [
                "accountNumber",
                "accountType",
                "bank",
                "branchCode",
                "disabled",
                "referenceBy"
            ],
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "example": "12345678910"
                },
                "accountType": {
                    "type": "string",
                    "enum": [
                        "cheque",
                        "current",
                        "savings"
                    ],
                    "example": "cheque"
                },
                "bank": {
                    "type": "string",
                    "example": "FNB"
                },
                "branchCode": {
                    "type": "string",
                    "example": "34007"
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                },
                "referenceBy": {
                    "type": "string",
                    "enum": [
                        "customer",
                        "booking"
                    ],
                    "example": "customer"
                }
            }
        },
        "util.CreateFirebaseConfiguration": {
            "type": "object",
            "required": [
                "apiKey",
                "authDomain",
                "authTenantId",
                "messagingSenderId",
                "storageBucket"
            ],
            "properties": {
                "androidAppId": {
                    "type": "string",
                    "example": "1:androidApps:****"
                },
                "apiKey": {
                    "type": "string",
                    "example": "your_api_key"
                },
                "authDomain": {
                    "type": "string",
                    "example": "your_auth_domain"
                },
                "authTenantId": {
                    "type": "string",
                    "example": "mppdemo-5thak"
                },
                "iosAppId": {
                    "type": "string",
                    "example": "1:iosApps:****"
                },
                "measurementId": {
                    "type": "string",
                    "example": "your_measurement_id"
                },
                "messagingSenderId": {
                    "type": "string",
                    "example": "your_messaging_sender_id"
                },
                "projectId": {
                    "type": "string",
                    "example": "mpp-mppdemo"
                },
                "storageBucket": {
                    "type": "string",
                    "example": "your_storage_bucket"
                },
                "webAppId": {
                    "type": "string",
                    "example": "1:webApps:****"
                }
            }
        },
        "util.CreateIOSConfiguration": {
            "type": "object",
            "required": [
                "appName",
                "storeUrl"
            ],
            "properties": {
                "appName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                },
                "storeUrl": {
                    "type": "string",
                    "example": "https://apps.apple.com/za/app/mppdemo/id1632886541"
                }
            }
        },
        "util.CreatePayParlorConfiguration": {
            "type": "object",
            "required": [
                "acceptCard",
                "acceptCash",
                "disabled"
            ],
            "properties": {
                "acceptCard": {
                    "type": "boolean",
                    "example": true
                },
                "acceptCash": {
                    "type": "boolean",
                    "example": true
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "util.CreatePaymentConfiguration": {
            "type": "object",
            "properties": {
                "precedenceOrder": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "card",
                        "eft",
                        "payAtParlor"
                    ]
                }
            }
        },
        "util.CreateScheduleConfiguration": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "bookingDays": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 28
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "timeblock",
                        "intaketime"
                    ],
                    "example": "timeblock"
                }
            }
        },
        "util.CreateStampConfiguration": {
            "type": "object",
            "properties": {
                "firebaseApiKey": {
                    "type": "string",
                    "minLength": 1,
                    "example": "AIDc21z_568c28fffc4be30d44d0398e"
                },
                "firebaseAuthDomain": {
                    "type": "string",
                    "minLength": 1,
                    "example": "your_auth_domain"
                },
                "firebaseAuthTenantIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['stamp0-5thak'",
                        " 'stamp0-h9pry']"
                    ]
                },
                "firebaseMeasurementId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "G-xxxxxxx"
                },
                "firebaseMessagingSenderId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "your_messaging_sender_id"
                },
                "firebaseProjectId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "mypetparlour-prod-shared"
                },
                "firebaseStorageBucket": {
                    "type": "string",
                    "minLength": 1,
                    "example": "your_storage_bucket"
                },
                "firebaseWebAppId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "1:web:xxxxxxxx"
                }
            }
        },
        "util.CreateXeroConfiguration": {
            "type": "object",
            "required": [
                "accountCode",
                "accountId",
                "connectionId",
                "enableAutomaticCustomerCreation",
                "enableAutomaticInvoiceCreation",
                "isDataStale",
                "isOrganisationStale",
                "paymentAccountCode",
                "paymentAccountId",
                "tenantId"
            ],
            "properties": {
                "accountCode": {
                    "type": "string",
                    "example": "200"
                },
                "accountId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "connectionId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "enableAutomaticCustomerCreation": {
                    "type": "boolean",
                    "example": true
                },
                "enableAutomaticInvoiceCreation": {
                    "type": "boolean",
                    "example": true
                },
                "isDataStale": {
                    "type": "boolean",
                    "example": false
                },
                "isOrganisationStale": {
                    "type": "boolean",
                    "example": false
                },
                "paymentAccountCode": {
                    "type": "string",
                    "example": "200"
                },
                "paymentAccountId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "tenantId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                }
            }
        },
        "util.EFTConfiguration": {
            "type": "object",
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "example": "12345678910"
                },
                "accountType": {
                    "type": "string",
                    "example": "cheque"
                },
                "bank": {
                    "type": "string",
                    "example": "FNB"
                },
                "branchCode": {
                    "type": "string",
                    "example": "34007"
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                },
                "referenceBy": {
                    "type": "string",
                    "example": "customer"
                }
            }
        },
        "util.FirebaseConfiguration": {
            "type": "object",
            "properties": {
                "androidAppId": {
                    "type": "string",
                    "example": "1:androidApps:****"
                },
                "apiKey": {
                    "type": "string",
                    "example": "your_api_key"
                },
                "authDomain": {
                    "type": "string",
                    "example": "your_auth_domain"
                },
                "authTenantId": {
                    "type": "string",
                    "example": "mppdemo-5thak"
                },
                "iosAppId": {
                    "type": "string",
                    "example": "1:iosApps:****"
                },
                "measurementId": {
                    "type": "string",
                    "example": "your_measurement_id"
                },
                "messagingSenderId": {
                    "type": "string",
                    "example": "your_messaging_sender_id"
                },
                "projectId": {
                    "type": "string",
                    "example": "mpp-mppdemo"
                },
                "storageBucket": {
                    "type": "string",
                    "example": "your_storage_bucket"
                },
                "webAppId": {
                    "type": "string",
                    "example": "1:webApps:****"
                }
            }
        },
        "util.IOSConfiguration": {
            "type": "object",
            "properties": {
                "appName": {
                    "type": "string",
                    "example": "MPP Demo"
                },
                "storeUrl": {
                    "type": "string",
                    "example": "https://apps.apple.com/za/app/mppdemo/id1632886541"
                }
            }
        },
        "util.PayParlorConfiguration": {
            "type": "object",
            "properties": {
                "acceptCard": {
                    "type": "boolean",
                    "example": true
                },
                "acceptCash": {
                    "type": "boolean",
                    "example": true
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "util.PaymentConfiguration": {
            "type": "object",
            "properties": {
                "precedenceOrder": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "card",
                        "eft",
                        "payAtParlor"
                    ]
                }
            }
        },
        "util.ScheduleConfiguration": {
            "type": "object",
            "properties": {
                "bookingDays": {
                    "type": "integer",
                    "example": 28
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "timeblock",
                        "intaketime"
                    ],
                    "example": "timeblock"
                }
            }
        },
        "util.StampConfiguration": {
            "type": "object",
            "properties": {
                "firebaseApiKey": {
                    "type": "string",
                    "example": "AIDc21z_568c28fffc4be30d44d0398e"
                },
                "firebaseAuthDomain": {
                    "type": "string",
                    "example": "your_auth_domain"
                },
                "firebaseAuthTenantIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['stamp0-5thak'",
                        " 'stamp0-h9pry']"
                    ]
                },
                "firebaseMeasurementId": {
                    "type": "string",
                    "example": "G-xxxxxxx"
                },
                "firebaseMessagingSenderId": {
                    "type": "string",
                    "example": "your_messaging_sender_id"
                },
                "firebaseProjectId": {
                    "type": "string",
                    "example": "mypetparlour-prod-shared"
                },
                "firebaseStorageBucket": {
                    "type": "string",
                    "example": "your_storage_bucket"
                },
                "firebaseWebAppId": {
                    "type": "string",
                    "example": "1:web:xxxxxxxx"
                }
            }
        },
        "util.UpdateAndroidConfiguration": {
            "type": "object",
            "properties": {
                "appName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                },
                "storeUrl": {
                    "type": "string",
                    "example": "https://play.google.com/store/apps/details?id=za.co.mypetparlorapp.mppdemo"
                }
            }
        },
        "util.UpdateApplicationStampProperties": {
            "type": "object",
            "properties": {
                "androidConfig": {
                    "$ref": "#/definitions/util.UpdateAndroidConfiguration"
                },
                "applicationId": {
                    "type": "string"
                },
                "applicationType": {
                    "type": "string"
                },
                "azureStampId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "azure-stamp0"
                },
                "coatTypeAllDescription": {
                    "type": "string"
                },
                "coatTypeAllRequired": {
                    "type": "boolean"
                },
                "coatTypeDoubleDescription": {
                    "type": "string"
                },
                "coatTypeDoubleRequired": {
                    "type": "boolean"
                },
                "coatTypeMediumDescription": {
                    "type": "string"
                },
                "coatTypeMediumRequired": {
                    "type": "boolean"
                },
                "coatTypeSingleDescription": {
                    "type": "string"
                },
                "coatTypeSingleRequired": {
                    "type": "boolean"
                },
                "companyUrl": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "deploymentLocation": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "eftConfig": {
                    "$ref": "#/definitions/util.UpdateEFTConfiguration"
                },
                "firebaseConfig": {
                    "$ref": "#/definitions/util.UpdateFirebaseConfiguration"
                },
                "googleStampId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "google-stamp0"
                },
                "iosConfig": {
                    "$ref": "#/definitions/util.UpdateIOSConfiguration"
                },
                "minimumBookingAdvanceTime": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "payParlorConfig": {
                    "$ref": "#/definitions/util.UpdatePayParlorConfiguration"
                },
                "paymentConfig": {
                    "$ref": "#/definitions/util.UpdatePaymentConfiguration"
                },
                "paystackState": {
                    "type": "string"
                },
                "quotaTeamsMobile": {
                    "type": "integer"
                },
                "quotaTeamsParlor": {
                    "type": "integer"
                },
                "scheduleConfig": {
                    "$ref": "#/definitions/util.UpdateScheduleConfiguration"
                },
                "supportUrl": {
                    "type": "string"
                },
                "xeroConfig": {
                    "$ref": "#/definitions/util.UpdateXeroConfiguration"
                },
                "xeroState": {
                    "type": "string"
                }
            }
        },
        "util.UpdateEFTConfiguration": {
            "type": "object",
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "example": "12345678910"
                },
                "accountType": {
                    "type": "string",
                    "enum": [
                        "cheque",
                        "current",
                        "savings"
                    ],
                    "example": "cheque"
                },
                "bank": {
                    "type": "string",
                    "example": "FNB"
                },
                "branchCode": {
                    "type": "string",
                    "example": "34007"
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                },
                "referenceBy": {
                    "type": "string",
                    "enum": [
                        "customer",
                        "booking"
                    ],
                    "example": "customer"
                }
            }
        },
        "util.UpdateFirebaseConfiguration": {
            "type": "object",
            "properties": {
                "androidAppId": {
                    "type": "string",
                    "example": "1:androidApps:****"
                },
                "apiKey": {
                    "type": "string",
                    "example": "your_api_key"
                },
                "authDomain": {
                    "type": "string",
                    "example": "your_auth_domain"
                },
                "authTenantId": {
                    "type": "string",
                    "example": "mppdemo-5thak"
                },
                "iosAppId": {
                    "type": "string",
                    "example": "1:iosApps:****"
                },
                "measurementId": {
                    "type": "string",
                    "example": "your_measurement_id"
                },
                "messagingSenderId": {
                    "type": "string",
                    "example": "your_messaging_sender_id"
                },
                "projectId": {
                    "type": "string",
                    "example": "mpp-mppdemo"
                },
                "storageBucket": {
                    "type": "string",
                    "example": "your_storage_bucket"
                },
                "webAppId": {
                    "type": "string",
                    "example": "1:webApps:****"
                }
            }
        },
        "util.UpdateIOSConfiguration": {
            "type": "object",
            "properties": {
                "appName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                },
                "storeUrl": {
                    "type": "string",
                    "example": "https://apps.apple.com/za/app/mppdemo/id1632886541"
                }
            }
        },
        "util.UpdatePayParlorConfiguration": {
            "type": "object",
            "properties": {
                "acceptCard": {
                    "type": "boolean",
                    "example": true
                },
                "acceptCash": {
                    "type": "boolean",
                    "example": true
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "util.UpdatePaymentConfiguration": {
            "type": "object",
            "properties": {
                "precedenceOrder": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "card",
                        "eft",
                        "payAtParlor"
                    ]
                }
            }
        },
        "util.UpdateScheduleConfiguration": {
            "type": "object",
            "properties": {
                "bookingDays": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 28
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "timeblock",
                        "intaketime"
                    ],
                    "example": "timeblock"
                }
            }
        },
        "util.UpdateStampConfiguration": {
            "type": "object",
            "properties": {
                "firebaseApiKey": {
                    "type": "string",
                    "minLength": 1,
                    "example": "AIDc21z_568c28fffc4be30d44d0398e"
                },
                "firebaseAuthDomain": {
                    "type": "string",
                    "minLength": 1,
                    "example": "your_auth_domain"
                },
                "firebaseAuthTenantIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['stamp0-5thak'",
                        " 'stamp0-h9pry']"
                    ]
                },
                "firebaseMeasurementId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "G-xxxxxxx"
                },
                "firebaseMessagingSenderId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "your_messaging_sender_id"
                },
                "firebaseProjectId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "mypetparlour-prod-shared"
                },
                "firebaseStorageBucket": {
                    "type": "string",
                    "minLength": 1,
                    "example": "your_storage_bucket"
                },
                "firebaseWebAppId": {
                    "type": "string",
                    "minLength": 1,
                    "example": "1:web:xxxxxxxx"
                }
            }
        },
        "util.UpdateXeroConfiguration": {
            "type": "object",
            "properties": {
                "accountCode": {
                    "type": "string",
                    "example": "200"
                },
                "accountId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "connectionId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "enableAutomaticCustomerCreation": {
                    "type": "boolean",
                    "example": true
                },
                "enableAutomaticInvoiceCreation": {
                    "type": "boolean",
                    "example": true
                },
                "isDataStale": {
                    "type": "boolean",
                    "example": false
                },
                "isOrganisationStale": {
                    "type": "boolean",
                    "example": false
                },
                "paymentAccountCode": {
                    "type": "string",
                    "example": "200"
                },
                "paymentAccountId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "tenantId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                }
            }
        },
        "util.XeroConfiguration": {
            "type": "object",
            "properties": {
                "accountCode": {
                    "type": "string",
                    "example": "200"
                },
                "accountId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "connectionId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "enableAutomaticCustomerCreation": {
                    "type": "boolean",
                    "example": true
                },
                "enableAutomaticInvoiceCreation": {
                    "type": "boolean",
                    "example": true
                },
                "isDataStale": {
                    "type": "boolean",
                    "example": false
                },
                "isOrganisationStale": {
                    "type": "boolean",
                    "example": false
                },
                "paymentAccountCode": {
                    "type": "string",
                    "example": "200"
                },
                "paymentAccountId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "tenantId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                }
            }
        },
        "voucher.CreateVoucher": {
            "type": "object"
        },
        "voucher.RedeemVoucher": {
            "type": "object",
            "required": [
                "customerId",
                "dryRun"
            ],
            "properties": {
                "customerId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "dryRun": {
                    "type": "boolean",
                    "example": true
                },
                "force": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "voucher.ReleaseVoucher": {
            "type": "object",
            "required": [
                "customerId"
            ],
            "properties": {
                "customerId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                }
            }
        },
        "voucher.UpdateVoucher": {
            "type": "object",
            "required": [
                "usageByCustomer"
            ],
            "properties": {
                "discountValue": {
                    "type": "integer",
                    "example": 10000
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "expires": {
                    "type": "boolean",
                    "example": true
                },
                "expiresAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "percentageValue": {
                    "type": "integer",
                    "maximum": 100,
                    "example": 55
                },
                "removeUsageByCustomerLimit": {
                    "type": "boolean",
                    "example": true
                },
                "removeUsageLimit": {
                    "type": "boolean",
                    "example": true
                },
                "usageByCustomer": {
                    "type": "object"
                },
                "usageByCustomerLimit": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 4
                },
                "usageLimit": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 200
                },
                "usePercentage": {
                    "type": "boolean",
                    "example": true
                },
                "voucherCode": {
                    "type": "string",
                    "minLength": 1,
                    "example": "JAN2023"
                }
            }
        },
        "voucher.Voucher": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "currency": {
                    "type": "string",
                    "example": "ZAR"
                },
                "discountValue": {
                    "type": "integer",
                    "example": 10000
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "expires": {
                    "type": "boolean",
                    "example": true
                },
                "expiresAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "percentageValue": {
                    "type": "integer",
                    "example": 55
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "usageByCustomer": {
                    "type": "object"
                },
                "usageByCustomerLimit": {
                    "type": "integer",
                    "example": 4
                },
                "usageLimit": {
                    "type": "integer",
                    "example": 200
                },
                "usePercentage": {
                    "type": "boolean",
                    "example": true
                },
                "voucherCode": {
                    "type": "string",
                    "example": "JAN2023"
                }
            }
        },
        "weightclass.CreateWeightClass": {
            "type": "object",
            "required": [
                "displayName",
                "size"
            ],
            "properties": {
                "displayName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Medium"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "maxWeight": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 20
                },
                "minWeight": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 10
                },
                "size": {
                    "type": "string",
                    "enum": [
                        "small",
                        "medium",
                        "large",
                        "extraLarge"
                    ],
                    "example": "medium"
                }
            }
        },
        "weightclass.UpdateWeightClass": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Medium"
                },
                "maxWeight": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 20
                },
                "minWeight": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 10
                },
                "size": {
                    "type": "string",
                    "enum": [
                        "small",
                        "medium",
                        "large",
                        "extraLarge"
                    ],
                    "example": "medium"
                }
            }
        },
        "weightclass.WeightClass": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                },
                "displayName": {
                    "type": "string",
                    "example": "Medium"
                },
                "id": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "maxWeight": {
                    "type": "number",
                    "example": 20
                },
                "minWeight": {
                    "type": "number",
                    "example": 10
                },
                "size": {
                    "type": "string",
                    "enum": [
                        "small",
                        "medium",
                        "large",
                        "extraLarge"
                    ],
                    "example": "medium"
                },
                "teamId": {
                    "type": "string",
                    "example": "568c28fffc4be30d44d0398e"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-05T00:00:00.000Z"
                }
            }
        },
        "xero.CreateXeroInvoice": {
            "type": "object",
            "required": [
                "contactId",
                "dueDate",
                "lineItems"
            ],
            "properties": {
                "contactId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "dueDate": {
                    "type": "string",
                    "example": "2022-01-05T00:00:00.000Z"
                },
                "lineItems": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/xero.CreateXeroLineItem"
                    }
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+27675445454"
                },
                "reference": {
                    "type": "string",
                    "minLength": 1,
                    "example": "feaf233fd"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "DRAFT",
                        "AUTHORISED"
                    ],
                    "example": "DRAFT"
                }
            }
        },
        "xero.CreateXeroLineItem": {
            "type": "object",
            "required": [
                "accountCode",
                "description",
                "quantity",
                "unitAmount"
            ],
            "properties": {
                "accountCode": {
                    "type": "string",
                    "example": "200"
                },
                "description": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Kalisi - Standard Groom"
                },
                "quantity": {
                    "type": "number",
                    "example": 1
                },
                "unitAmount": {
                    "type": "number",
                    "example": 200
                }
            }
        },
        "xero.UpdateXeroInvoice": {
            "type": "object",
            "required": [
                "lineItems"
            ],
            "properties": {
                "dueDate": {
                    "type": "string",
                    "example": "2022-01-05T00:00:00.000Z"
                },
                "lineItems": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/xero.CreateXeroLineItem"
                    }
                },
                "reference": {
                    "type": "string",
                    "minLength": 1,
                    "example": "feaf233fd"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "DRAFT",
                        "AUTHORISED",
                        "VOIDED",
                        "DELETED",
                        "SUBMITTED"
                    ],
                    "example": "DRAFT"
                }
            }
        },
        "xero.XeroAccount": {
            "type": "object",
            "required": [
                "accountId",
                "code",
                "name",
                "type"
            ],
            "properties": {
                "accountId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "code": {
                    "type": "string",
                    "minLength": 1,
                    "example": "200"
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Sales"
                },
                "type": {
                    "type": "string",
                    "example": "0"
                }
            }
        },
        "xero.XeroConnection": {
            "type": "object",
            "required": [
                "authEventId",
                "createdDateUtc",
                "id",
                "tenantId",
                "tenantName",
                "tenantType",
                "updatedDateUtc"
            ],
            "properties": {
                "authEventId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "createdDateUtc": {
                    "type": "string",
                    "minLength": 1,
                    "example": "2022-01-05T00:00:00.000Z"
                },
                "id": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "tenantId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "tenantName": {
                    "type": "string",
                    "minLength": 1,
                    "example": "MPP Demo"
                },
                "tenantType": {
                    "type": "string",
                    "minLength": 1,
                    "example": "ORGANISATION"
                },
                "updatedDateUtc": {
                    "type": "string",
                    "minLength": 1,
                    "example": "2022-01-05T00:00:00.000Z"
                }
            }
        },
        "xero.XeroContact": {
            "type": "object",
            "required": [
                "contactId",
                "emailAddress",
                "isCustomer",
                "isSupplier",
                "mergedToContactID",
                "name"
            ],
            "properties": {
                "contactId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "emailAddress": {
                    "type": "string",
                    "example": "alli.vila@gmail.com"
                },
                "isCustomer": {
                    "type": "boolean",
                    "example": true
                },
                "isSupplier": {
                    "type": "boolean",
                    "example": false
                },
                "mergedToContactID": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Alli Vila"
                }
            }
        },
        "xero.XeroInvoice": {
            "type": "object",
            "required": [
                "contact",
                "invoiceId",
                "invoiceNumber",
                "lineItems",
                "reference",
                "status",
                "total",
                "type"
            ],
            "properties": {
                "contact": {
                    "$ref": "#/definitions/xero.XeroContact"
                },
                "invoiceId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "invoiceNumber": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "lineItems": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/xero.CreateXeroLineItem"
                    }
                },
                "reference": {
                    "type": "string",
                    "minLength": 1,
                    "example": "dafe32f2a23a"
                },
                "status": {
                    "type": "string",
                    "example": "DRAFT"
                },
                "total": {
                    "type": "number",
                    "example": 230.95
                },
                "type": {
                    "type": "string",
                    "example": "ACCREC"
                }
            }
        },
        "xero.XeroPayment": {
            "type": "object",
            "required": [
                "account",
                "amount",
                "date",
                "invoice",
                "paymentId",
                "paymentType",
                "status"
            ],
            "properties": {
                "account": {
                    "$ref": "#/definitions/xero.XeroAccount"
                },
                "amount": {
                    "type": "number",
                    "example": 200
                },
                "date": {
                    "type": "string",
                    "example": "2022-01-05T00:00:00.000Z"
                },
                "invoice": {
                    "$ref": "#/definitions/xero.XeroInvoice"
                },
                "paymentId": {
                    "type": "string",
                    "example": "d12eb97b-d207-4vcb-9ab6-8b466a8b4d39"
                },
                "paymentType": {
                    "type": "string",
                    "example": "ACCRECPAYMENT"
                },
                "status": {
                    "type": "string",
                    "example": "AUTHORISED"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}